{
  "applicationName": "TURBINE_INTERNAL",
  "nodes": [
    {
      "operationName": "[sqlsyntax] exchg_rate",
      "operationDescription": "exchange rate",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"sqlQuery\": \"SELECT \\n  srce_iso_crncy_code, \\n  time_perd_id, \\n  CASE \\n    WHEN MAX(full_mth_ind) = 'Y' THEN AVG(exchg_rate) --get exchange rate average (for N full months)\\n    WHEN MAX(mth_end_date_ind) = 'Y' THEN MIN(exchg_rate) --get exchange rate from ralated month (MIN to avoid DQ issue in case od duplicated data) \\n    ELSE SUM(exchg_rate*day_qty/tot_day_qty) --get weigth exchange rate average \\n  END AS exchg_rate,\\n    CASE \\n    WHEN MAX(full_mth_ind) = 'Y' THEN AVG(const_exchg_rate) --get constant exchange rate average (for N full months)\\n    WHEN MAX(mth_end_date_ind) = 'Y' THEN MIN(const_exchg_rate) --get constant exchange rate from ralated month (MIN to avoid DQ issue in case od duplicated data) \\n    ELSE SUM(const_exchg_rate*day_qty/tot_day_qty) --get weigth constant exchange rate average \\n  END AS const_exchg_rate\\nFROM \\n(SELECT \\n    time_perd_start_date, \\n    time_perd_end_date,\\n    time_perd_id, \\n    time_perd_class_code,\\n    exchg_rate,\\n    const_exchg_rate,\\n    NVL2(a.mth_end_date, 'Y', 'N') as mth_end_date_ind, -- check if end of month is specified in calendar \\n    DATEDIFF(to_date(a.time_perd_end_date,'yyyy-MM-dd'),to_date(a.time_perd_start_date,'yyyy-MM-dd')) as tot_day_qty, --get total number of days  \\n    DATEDIFF(LEAST(to_date(a.time_perd_end_date,'yyyy-MM-dd'),LAST_DAY(to_date(e.exchg_rate_end_date,'yyyy-MM-dd'))), GREATEST(to_date(a.time_perd_start_date,'yyyy-MM-dd'), TRUNC(to_date(e.exchg_rate_end_date,'yyyy-MM-dd'), 'MM'))) day_qty, --count number of days from period common with given month\\n    DECODE(to_date(a.time_perd_start_date,'yyyy-MM-dd'), TRUNC(to_date(a.time_perd_start_date,'yyyy-MM-dd'), 'MM'), DECODE(to_date(a.time_perd_end_date,'yyyy-MM-dd'), LAST_DAY(to_date(a.time_perd_end_date,'yyyy-MM-dd')), 'Y', 'N'), 'N') full_mth_ind, --check if period contains whole month(s) (end date equal to end of month, start date equal to begining of month) \\n    e.srce_iso_crncy_code, \\n    e.exchg_rate_end_date\\n  FROM parquet.`/mnt/<@@PATH1@@>/MM_TIME_PERD_FDIM_VW/` a \\n  JOIN (\\n    SELECT \\n srce_iso_crncy_code3 AS srce_iso_crncy_code,\\n LAST_DAY(exchg_rate_end_date3) AS exchg_rate_end_date,\\n exchg_rate3 AS exchg_rate,\\n exchg_rate5 AS const_exchg_rate\\n  FROM (SELECT DENSE_RANK() OVER(PARTITION BY cal_skid3, crncy_srce_skid3, srce_iso_crncy_code3, crncy_srce_skid5, srce_iso_crncy_code5 ORDER BY time_eff_dif ASC, time_end_dif ASC, cal_skid5 desc) AS time_accry,\\n               type_3_5.*\\n          FROM (SELECT (type_5.exchg_rate_end_date5 - type_3.exchg_rate_end_date3) AS time_end_dif,\\n                       (type_3.exchg_rate_eff_date3 - type_5.exchg_rate_eff_date5) AS time_eff_dif,\\n                       type_3.*,\\n                       type_5.*\\n                  FROM (SELECT cal_skid            AS cal_skid3,\\n                               crncy_srce_skid     AS crncy_srce_skid3,\\n                               exchg_rate_eff_date AS exchg_rate_eff_date3,\\n                               exchg_rate_end_date AS exchg_rate_end_date3,\\n                               exchg_rate          AS exchg_rate3,\\n                               srce_iso_crncy_code AS srce_iso_crncy_code3\\n                          FROM parquet.`/mnt/<@@PATH1@@>/EXCHG_RATE_FCT/` a\\n                         WHERE trgt_iso_crncy_code = 'USD'\\n                               AND curr_ind = 'Y'\\n                               AND exchg_rate_type_id = 3) type_3\\n                  LEFT JOIN (SELECT cal_skid            AS cal_skid5,\\n                                   crncy_srce_skid     AS crncy_srce_skid5,\\n                                   exchg_rate_eff_date AS exchg_rate_eff_date5,\\n                                   exchg_rate_end_date AS exchg_rate_end_date5,\\n                                   exchg_rate          AS exchg_rate5,\\n                                   srce_iso_crncy_code AS srce_iso_crncy_code5\\n                              FROM parquet.`/mnt/<@@PATH1@@>/EXCHG_RATE_FCT/` a\\n                             WHERE trgt_iso_crncy_code = 'USD'\\n                                   AND curr_ind = 'Y'\\n                                   AND exchg_rate_type_id = 5) type_5\\n                    ON type_3.exchg_rate_end_date3 BETWEEN\\n                       type_5.exchg_rate_eff_date5 AND\\n                       type_5.exchg_rate_end_date5\\n                       AND type_3.crncy_srce_skid3 = type_5.crncy_srce_skid5) type_3_5)\\n WHERE time_accry = 1\\n  ) e\\n    ON (a.mth_end_date IS NULL AND e.exchg_rate_end_date BETWEEN A.time_perd_start_date AND LAST_DAY(A.time_perd_end_date)) --to join all rates in period\\n    OR (a.mth_end_date IS NOT NULL AND e.exchg_rate_end_date = a.mth_end_date) --to join with rate if end of month related to period specified in calendar\\n) A\\nGROUP BY srce_iso_crncy_code, time_perd_id\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_perd_fdim\",\n      \"alias\": \"df_time_perd_fdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate_fact_vm\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "SQLSyntax",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] exchg_rate_fact_vm",
      "predecessorName": "[sqlsyntax] exchg_rate",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"srce_iso_crncy_code= '<<ISO_CRNCY_CODE>>'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate_fact_vm\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate_fact_vm\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] get exchange rates",
      "predecessorName": "[FIL] exchg_rate_fact_vm",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_map\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"mm_time_perd_id\",\n          \"columnAlias\": \"mm_time_perd_id\"\n        },\n        {\n          \"columnName\": \"extrn_code\",\n          \"columnAlias\": \"extrn_code\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_exchg_rate_fact_vm\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"er_usd\",\n      \"columns\": [\n        {\n          \"columnName\": \"exchg_rate\",\n          \"columnAlias\": \"exchg_rate_usd\"\n        },\n        {\n          \"columnName\": \"const_exchg_rate\",\n          \"columnAlias\": \"const_exchg_rate_usd\"\n        },\n        {\n          \"columnName\": \"time_perd_id\",\n          \"columnAlias\": \"time_perd_id1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_exchg_rate_fact_vm\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"er_usd_euro\",\n      \"columns\": [\n        {\n          \"columnName\": \"exchg_rate\",\n          \"columnAlias\": \"exchg_rate_usd_euro\"\n        },\n        {\n          \"columnName\": \"time_perd_id\",\n          \"columnAlias\": \"time_perd_id2\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"er_usd\",\n      \"joinExpression\": \"er_usd.time_perd_id=input.time_perd_id\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"er_usd_euro\",\n      \"joinExpression\": \"er_usd_euro.time_perd_id=input.time_perd_id\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN] - Update Newest data date",
      "predecessorName": "[JOIN] get exchange rates",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql import Window, functions as fn\\nfrom pyspark.sql.functions import *\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\nPROCESS_RUN_KEY = <<PROCESS_RUN_KEY>>\\nCNTRT_ID = <<CNTRT_ID>>\\n\\ndf_fct_pre_promo_vw = dict_all_dfs['df_exchg_rate'][\\\"df_object\\\"]\\n\\n\\ndf_fct_pre_promo_vw = df_fct_pre_promo_vw.select(max(\\\"mm_time_perd_end_date\\\"))\\n\\ndf_fct_pre_promo_vw = df_fct_pre_promo_vw.withColumnRenamed(\\\"max(mm_time_perd_end_date)\\\", \\\"latest_time_perd_end_date\\\")\\n\\ndf_fct_date = df_fct_pre_promo_vw.withColumn('run_id',lit(PROCESS_RUN_KEY)).withColumn('cntrt_id',lit(CNTRT_ID)).withColumn('dlvry_id',lit(PROCESS_RUN_KEY))\\n\\n\\njdbcDF2 = df_fct_date\\njdbcDF2.write.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_dlvry_latest_date_plc\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").mode(\\\"append\\\").save()\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] adds cntrt_crncy_code",
      "predecessorName": "[GEN] - Update Newest data date",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_exchg_rate = dict_all_dfs['df_exchg_rate'][\\\"df_object\\\"]\\n\\ncntrt_crncy_code='<<ISO_CRNCY_CODE>>'\\n\\nfrom pyspark.sql.functions import lit \\n\\ndf_exchg_rate = df_exchg_rate.withColumn(\\\"cntrt_crncy_code\\\",lit(cntrt_crncy_code))\\n\\n\\ndict_all_dfs['df_exchg_rate'] = {\\\"df_object\\\" :df_exchg_rate}\\ndf_output_dict['df_exchg_rate'] = df_exchg_rate\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_exchg_rate\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] get measure multiply factors",
      "predecessorName": "[gen] adds cntrt_crncy_code",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_measr_map = dict_all_dfs['df_measr_map'][\\\"df_object\\\"]\\ndf_srce_pre_mfct = dict_all_dfs['df_srce_fct'][\\\"df_object\\\"]\\n\\ndf_measr_map.createOrReplaceTempView('measr_map')\\ndf_srce_pre_mfct.createOrReplaceTempView('srce_pre_mfct')\\n\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\ndf_measr_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"ADWGP_MM.MM_MEASR_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\n\\ndf_measr_lkp.createOrReplaceTempView('MM_MEASR_LKP')\\n\\ndf_measr_vendr_factr_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"ADWGP_MM.MM_MEASR_VENDR_FACTR_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\n\\ndf_measr_vendr_factr_lkp.createOrReplaceTempView('MM_MEASR_VENDR_FACTR_LKP')\\n\\ndf_measr_cntrt_factr_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"ADWGP_MM.MM_MEASR_CNTRT_FACTR_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\n\\ndf_measr_cntrt_factr_lkp.createOrReplaceTempView('MM_MEASR_CNTRT_FACTR_LKP')\\n\\ndf_measr_factr_cntrt_mapped = spark.sql('''with input as (SELECT  \\n                                           MIDL.EXTRN_CODE,\\n                                           ML.MEASR_PHYS_NAME, \\n                                           MC.FACTR as c_factr, \\n                                           MV.FACTR as v_factr, \\n                                           ML.USE_IND,\\n                                           MIDL.NR\\n                                       FROM\\n                                       (SELECT \\n                                       SRC.*, \\n                                       ROW_NUMBER() OVER(PARTITION BY 1 ORDER BY SRC.LINE_NUM) NR \\n                                       FROM measr_map SRC) MIDL\\n                                       JOIN MM_MEASR_LKP ML ON MIDL.MEASR_ID = ML.MEASR_ID\\n                                       LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP MV\\n                                           ON (MIDL.MEASR_ID = MV.MEASR_ID AND MV.VENDR_ID = 1)\\n                                       LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP MC\\n                                           ON (MIDL.MEASR_ID = MC.MEASR_ID AND MC.CNTRT_ID = <<CNTRT_ID>>) \\n                                   ),\\n                                   mapng_reslt as (\\n                                       select col_name, measr_code, \\n                                       case when  cast(substr(col_name, 4) as int) > 3 then 'FACT_AMT_' || replace(cast(substr(col_name, 4)-3 as string),'.0','')  else null end as fact_amt_col_name\\n                                       from (\\n                                           select *\\n                                           from (select * from srce_pre_mfct where col1 = 'MKT_TAG' and col2 = 'PROD_TAG' and col3 = 'PER_TAG'\\n                                           )\\n                                           unpivot (\\n                                               measr_code for col_name in (\\n                                                   COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL14,COL15,COL16,COL17,COL18,COL19,COL20,\\n                                                   COL21,COL22,COL23,COL24,COL25,COL26,COL27,COL28,COL29,COL30,COL31,COL32,COL33,COL34,COL35,COL36,COL37,COL38,COL39,COL40,\\n                                                   COL41,COL42,COL43,COL44,COL45,COL46,COL47,COL48,COL49,COL50,COL51,COL52,COL53,COL54,COL55,COL56,COL57,COL58,COL59,COL60,\\n                                                   COL61,COL62,COL63,COL64,COL65,COL66,COL67,COL68,COL69,COL70,COL71,COL72,COL73,COL74,COL75,COL76,COL77,COL78,COL79,COL80,\\n                                                   COL81,COL82,COL83,COL84,COL85,COL86,COL87,COL88,COL89,COL90,COL91,COL92,COL93,COL94,COL95,COL96,COL97,COL98,COL99,COL100,\\n                                                   COL101,COL102,COL103\\n                                               )\\n                                           )\\n                                       )\\n                                   )\\n                                   select i.MEASR_PHYS_NAME as measr_phys_name, i.C_FACTR as c_factr, i.V_FACTR as v_factr, i.USE_IND as use_ind, i.NR as nr, r.fact_amt_col_name\\n                                   from input i\\n                                   join mapng_reslt r on i.extrn_code = r.measr_code\\n                                   order by cast(substr(fact_amt_col_name, 10) as integer)''')\\n\\n\\ndict_all_dfs['df_measr_factr_cntrt_mapped'] = {\\\"df_object\\\" :df_measr_factr_cntrt_mapped}\\ndf_output_dict['df_measr_factr_cntrt_mapped'] = df_measr_factr_cntrt_mapped                                   \",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_measr_map\"\n    },\n    {\n      \"name\": \"df_srce_fct\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_measr_factr_cntrt_mapped\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "get precision value for fact_amt_cols",
      "predecessorName": "[gen] get measure multiply factors",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom pyspark.sql.functions import *\\n\\n\\ndf_srce_fct = dict_all_dfs['df_srce_fct'][\\\"df_object\\\"]\\ndf_srce_mmeasr = dict_all_dfs['df_srce_mmeasr'][\\\"df_object\\\"]\\ndf_measr_factr_cntrt_mapped = dict_all_dfs['df_measr_factr_cntrt_mapped'][\\\"df_object\\\"]\\n\\n\\ndf_srce_fct.createOrReplaceTempView('srce_pre_mfct')\\ndf_srce_mmeasr.createOrReplaceTempView('srce_mmeasr')\\ndf_measr_factr_cntrt_mapped.createOrReplaceTempView('measr_factr_cntrt_mapped')\\n\\nspark.sql(\\\"\\\"\\\"create or replace temp view srce_fct_measr_code_mapped as\\nselect * from \\n(select col_name, measr_code, \\n                                       case when  cast(substr(col_name, 4) as int) > 3 then 'FACT_AMT_' || replace(cast(substr(col_name, 4)-3 as string),'.0','')  else null end as fact_amt_col_name\\n                                       from (\\n                                           select *\\n                                           from (select * from srce_pre_mfct where col1 = 'MKT_TAG' and col2 = 'PROD_TAG' and col3 = 'PER_TAG'\\n                                           )\\n                                           unpivot (\\n                                               measr_code for col_name in (\\n                                                   COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL14,COL15,COL16,COL17,COL18,COL19,COL20,\\n                                                   COL21,COL22,COL23,COL24,COL25,COL26,COL27,COL28,COL29,COL30,COL31,COL32,COL33,COL34,COL35,COL36,COL37,COL38,COL39,COL40,\\n                                                   COL41,COL42,COL43,COL44,COL45,COL46,COL47,COL48,COL49,COL50,COL51,COL52,COL53,COL54,COL55,COL56,COL57,COL58,COL59,COL60,\\n                                                   COL61,COL62,COL63,COL64,COL65,COL66,COL67,COL68,COL69,COL70,COL71,COL72,COL73,COL74,COL75,COL76,COL77,COL78,COL79,COL80,\\n                                                   COL81,COL82,COL83,COL84,COL85,COL86,COL87,COL88,COL89,COL90,COL91,COL92,COL93,COL94,COL95,COL96,COL97,COL98,COL99,COL100,\\n                                                   COL101,COL102,COL103\\n                                               )\\n                                           )\\n                                       ))\\nwhere fact_amt_col_name is not null\\\"\\\"\\\")\\n\\nspark.sql(\\\"\\\"\\\"create or replace temp view fct_col_precision_mapped as\\nselect f.*,m.precision_val from srce_fct_measr_code_mapped f\\ninner join srce_mmeasr m \\non f.measr_code = m.extrn_code\\\"\\\"\\\")\\n\\ndf_output = spark.sql(\\\"\\\"\\\"select f.*,m.precision_val from measr_factr_cntrt_mapped f\\ninner join fct_col_precision_mapped m\\non f.fact_amt_col_name = m.fact_amt_col_name\\\"\\\"\\\")\\n\\n\\ndict_all_dfs['df_measr_factr_cntrt_mapped'] = {\\\"df_object\\\" :df_output}\\ndf_output_dict['df_measr_factr_cntrt_mapped'] = df_output\\n\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_fct\"\n    },\n    {\n      \"name\": \"df_srce_mmeasr\"\n    },\n    {\n      \"name\": \"df_measr_factr_cntrt_mapped\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_measr_factr_cntrt_mapped\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "power calculation ",
      "predecessorName": "get precision value for fact_amt_cols",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom pyspark.sql.functions import *\\n\\nfrom IPython import get_ipython\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_fct_cfl = dict_all_dfs['df_fct_cfl'][\\\"df_object\\\"]\\ndf_measr_factr_cntrt_mapped = dict_all_dfs['df_measr_factr_cntrt_mapped'][\\\"df_object\\\"]\\n\\ndf_fct_cfl.createOrReplaceTempView('fct_cfl')\\ndf_measr_factr_cntrt_mapped.createOrReplaceTempView('measr_factr_cntrt_mapped')\\n\\nlst_key_cols = ['line_num','prod_prttn_code','cntrt_id','srce_sys_id','run_id','rcd_orign_code','mkt_extrn_code','prod_extrn_code','time_extrn_code']\\n\\ndf_measr_mapped  = spark.sql(f\\\"\\\"\\\"select fact_amt_col_name || \\\"/power ( 10,\\\" || cast(precision_val as decimal) || \\\") as \\\" || fact_amt_col_name as fact_amt_col_name from measr_factr_cntrt_mapped  \\\"\\\"\\\")\\n\\nlst_measr_trans = [row['fact_amt_col_name'] for row in df_measr_mapped.select('fact_amt_col_name').collect()]\\n\\nlst_all_cols = lst_key_cols + lst_measr_trans\\n\\nstr_select_cols = ','.join(lst_all_cols)\\ndf_out = spark.sql(f\\\"\\\"\\\"select {str_select_cols} from fct_cfl\\\"\\\"\\\")\\n\\ndict_all_dfs['df_fct_cfl'] = {\\\"df_object\\\" :df_out}\\ndf_output_dict['df_fct_cfl'] = df_out\\n\\n\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_measr_factr_cntrt_mapped\"\n    },\n    {\n      \"name\": \"df_fct_cfl\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_cfl\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] dynamic fact transformation",
      "predecessorName": "power calculation ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\nfrom pyspark.sql.functions import *\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_fct_cfl = dict_all_dfs['df_fct_cfl'][\\\"df_object\\\"]\\ndf_measr_factr_cntrt_mapped = dict_all_dfs['df_measr_factr_cntrt_mapped'][\\\"df_object\\\"]\\n\\ndf_measr_factr_cntrt_mapped=df_measr_factr_cntrt_mapped.withColumn(\\\"c_factr_count\\\",length(col(\\\"c_factr\\\")))\\ndf_measr_factr_cntrt_mapped=df_measr_factr_cntrt_mapped.withColumn(\\\"c_factr\\\",when (col(\\\"c_factr_count\\\")==0,None).otherwise(col(\\\"c_factr\\\"))).drop(\\\"c_factr_count\\\")\\n\\ndf_fct_cfl.createOrReplaceTempView('fct_cfl')\\ndf_measr_factr_cntrt_mapped.createOrReplaceTempView('measr_factr_cntrt_mapped')\\n\\nlst_key_cols = ['line_num','prod_prttn_code','cntrt_id','srce_sys_id','run_id','rcd_orign_code','mkt_extrn_code','prod_extrn_code','time_extrn_code']\\n\\ndf_measr_mapped  = spark.sql(\\\"\\\"\\\"select case when nvl(c_factr,v_factr) is not null then '(' || nvl(c_factr,v_factr) || ' * ' || fact_amt_col_name || ') as ' || lower(measr_phys_name)\\nelse fact_amt_col_name || ' as ' || lower(measr_phys_name) end measr_transf from measr_factr_cntrt_mapped where use_ind = 'Y'\\\"\\\"\\\")\\n\\nlst_measr_trans = [row['measr_transf'] for row in df_measr_mapped.select('measr_transf').collect()]\\n\\nlst_all_cols = lst_key_cols + lst_measr_trans\\n\\nstr_select_cols = ','.join(lst_all_cols)\\n\\ndf_fct_smn_m = spark.sql(f\\\"\\\"\\\"select {str_select_cols} from fct_cfl\\\"\\\"\\\")\\n\\ndict_all_dfs['df_fct_smn_m'] = {\\\"df_object\\\" :df_fct_smn_m}\\ndf_output_dict['df_fct_smn_m'] = df_fct_smn_m\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_cfl\"\n    },\n    {\n      \"name\": \"df_measr_factr_cntrt_mapped\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_smn_m\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] df_fct_cfl",
      "predecessorName": "[gen] dynamic fact transformation",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_cfl\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"rcd_orign_code\",\n      \"columnName\": \"rcd_orign_code\"\n    },\n    {\n      \"transformation\": \"mkt_extrn_code\",\n      \"columnName\": \"mkt_extrn_code\"\n    },\n    {\n      \"transformation\": \"prod_extrn_code\",\n      \"columnName\": \"prod_extrn_code\"\n    },\n    {\n      \"transformation\": \"time_extrn_code\",\n      \"columnName\": \"time_extrn_code\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_1)\",\n      \"columnName\": \"sales_mu_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_2)\",\n      \"columnName\": \"sales_mu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_3)\",\n      \"columnName\": \"sales_mu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_4)\",\n      \"columnName\": \"sales_msu_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_5)\",\n      \"columnName\": \"sales_msu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_6)\",\n      \"columnName\": \"sales_msu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_7)\",\n      \"columnName\": \"sales_msu_featr_dsply_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_8)\",\n      \"columnName\": \"sales_msu_dsply_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_9)\",\n      \"columnName\": \"sales_msu_featr_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_10)\",\n      \"columnName\": \"sales_msu_prcut_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_11)\",\n      \"columnName\": \"sales_msu_prcut_only_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_12\",\n      \"columnName\": \"sales_msu_efeat_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_13)\",\n      \"columnName\": \"sales_mlc_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_14)\",\n      \"columnName\": \"sales_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_15)\",\n      \"columnName\": \"sales_mlc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_16)\",\n      \"columnName\": \"sales_mlc_featr_dsply_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_17)\",\n      \"columnName\": \"sales_mlc_dsply_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_18)\",\n      \"columnName\": \"sales_mlc_featr_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_19)\",\n      \"columnName\": \"sales_mlc_prcut_amt\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_20)\",\n      \"columnName\": \"sales_mlc_prcut_only_amt\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_21)\",\n      \"columnName\": \"sales_per_dspt_msu_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_22\",\n      \"columnName\": \" numrc_dist_sellg_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_23\",\n      \"columnName\": \"numrc_dist_any_prmtn_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_33\",\n      \"columnName\": \"wgt_dist_sellg_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_34\",\n      \"columnName\": \"wgt_dist_any_prmtn_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_35\",\n      \"columnName\": \"wgt_dist_featr_dsply_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_36\",\n      \"columnName\": \"wgt_dist_dsply_wo_featr_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_37\",\n      \"columnName\": \"wgt_dist_featr_wo_dsply_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_38\",\n      \"columnName\": \"wgt_dist_prcut_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_39\",\n      \"columnName\": \"wgt_dist_prcut_only_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_40\",\n      \"columnName\": \"wgt_dist_featr_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_41\",\n      \"columnName\": \"wgt_dist_dsply_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_42\",\n      \"columnName\": \"wgt_dist_bnspk_pct\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_44)\",\n      \"columnName\": \"basln_mu_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_45)\",\n      \"columnName\": \"basln_mu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_46)\",\n      \"columnName\": \"basln_msu_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_47)\",\n      \"columnName\": \"basln_msu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_48)\",\n      \"columnName\": \"basln_msu_featr_dsply_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_49)\",\n      \"columnName\": \"basln_msu_dsply_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_50)\",\n      \"columnName\": \"basln_msu_featr_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_51)\",\n      \"columnName\": \"basln_msu_prcut_qty\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_52)\",\n      \"columnName\": \"basln_msu_prcut_only_qty\"\n    },\n    {\n      \"transformation\": \"(.001* fact_amt_53)\",\n      \"columnName\": \"basln_mlc_amt\"\n    },\n    {\n      \"transformation\": \"(1* fact_amt_54)\",\n      \"columnName\": \"basln_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"fact_amt_55\",\n      \"columnName\": \"sku_per_dspt_u_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_56\",\n      \"columnName\": \"shelf_lngth_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_57\",\n      \"columnName\": \"numrc_dist_sellg_4_wk_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_58\",\n      \"columnName\": \"wgt_dist_sellg_4_wk_pct\"\n    },\n    {\n      \"transformation\": \"fact_amt_59\",\n      \"columnName\": \"shelf_sellg_lngth_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_60\",\n      \"columnName\": \"tdp_u_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_61\",\n      \"columnName\": \"num_store_unvrs_sellg_u_qty\"\n    },\n    {\n      \"transformation\": \"fact_amt_62\",\n      \"columnName\": \"sales_efprc_mlc_efeat_amt\"\n    },\n    {\n      \"transformation\": \"fact_amt_63\",\n      \"columnName\": \"sales_cnprc_mlc_amt\"\n    },\n    {\n      \"transformation\": \"fact_amt_64\",\n      \"columnName\": \"sales_cnprc_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"fact_amt_65\",\n      \"columnName\": \"sales_cnprc_mlc_efeat_amt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_smn_m\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] add currency exchange rate",
      "predecessorName": "[CET] df_fct_cfl",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"INNER\",\n  \"referenceDataframe\": \"df_exchg_rate\",\n  \"joinExpression\": \"ref.extrn_code = in.time_extrn_code\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_smn_m\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"line_num\",\n          \"columnAlias\": \"line_num\"\n        },\n        {\n          \"columnName\": \"prod_prttn_code\",\n          \"columnAlias\": \"prod_prttn_code\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_exchg_rate\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"exchg_rate_usd\",\n          \"columnAlias\": \"exchg_rate_usd_amt\"\n        },\n        {\n          \"columnName\": \"const_exchg_rate_usd\",\n          \"columnAlias\": \"exchg_rate_cus_amt\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_rate\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] to EXCHG_RATE_EUR_AMT",
      "predecessorName": "[JOIN] add currency exchange rate",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_rate\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"exchg_rate_usd_amt/exchg_rate_usd_euro\",\n      \"columnName\": \"exchg_rate_eur_amt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_rate\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] df_fct_rate",
      "operationDescription": "Turning off for Prod testing",
      "predecessorName": "[CET] to EXCHG_RATE_EUR_AMT",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_rate\"\n    }\n  ],\n  \"transformations\": [\n     {\n      \"transformation\": \"(sales_mlc_amt * exchg_rate_usd_amt)\",\n      \"columnName\": \"sales_musd_amt\"\n    },\n    {\n      \"transformation\": \"(sales_mlc_amt * exchg_rate_eur_amt)\",\n      \"columnName\": \"sales_meur_amt\"\n    },\n      \n    {\n      \"transformation\": \"(sales_mlc_amt * exchg_rate_cus_amt)\",\n      \"columnName\": \"sales_mcus_amt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN]",
      "predecessorName": "[CET] df_fct_rate",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_fct_crncy = dict_all_dfs['df_fct_crncy'][\\\"df_object\\\"]\\n\\n\\niso_crncy_code='<<ISO_CRNCY_CODE>>'\\nfact_type_code='<<FACT_TYPE_CODE>>'\\n\\nfrom pyspark.sql.functions import lit \\n\\n\\ndf_fct_crncy = df_fct_crncy.withColumn(\\\"iso_crncy_code\\\",lit(iso_crncy_code))\\ndf_fct_crncy = df_fct_crncy.withColumn(\\\"fact_type_code\\\",lit(fact_type_code))\\n\\ndict_all_dfs['df_fct_crncy'] = {\\\"df_object\\\" :df_fct_crncy}\\ndf_output_dict['df_fct_crncy'] = df_fct_crncy\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] reading fact schema",
      "predecessorName": "[GEN]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\ndf_fct_schema = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_tp_fct_schema\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\n    \\ndf_output_dict['df_fct_schema'] = df_fct_schema\\ndict_all_dfs['df_fct_schema'] = {\\\"df_object\\\" :df_fct_schema}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_schema\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] typecasting the columns",
      "predecessorName": "[gen] reading fact schema",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_fct_crncy= dict_all_dfs['df_fct_crncy'][\\\"df_object\\\"]\\ndf_fct_schema = dict_all_dfs['df_fct_schema'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_fct_crncy.columns\\nsdim_cols = df_fct_schema.columns\\n\\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_fct_crncy = df_fct_crncy.withColumn(i,lit(None).cast('string'))\\n\\n# df_fct_crncy = df_fct_crncy.select(*sdim_cols)\\ncols = df_fct_crncy.columns\\n\\nfor j in add_cols:\\n  df_fct_crncy = df_fct_crncy.withColumn(j, col(j).cast(dict(df_fct_schema.dtypes)[j]))\\n\\ndict_all_dfs['df_fct_crncy'] = {\\\"df_object\\\" :df_fct_crncy}\\ndf_output_dict['df_fct_crncy'] = df_fct_crncy\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\"\n    },\n    {\n      \"name\": \"df_fct_schema\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] df_fct_crncy",
      "predecessorName": "[gen] typecasting the columns",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"iso_crncy_code\",\n      \"columnName\": \"iso_crncy_code\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"fact_type_code\",\n      \"columnName\": \"fact_type_code\"\n    },\n    {\n      \"transformation\": \"basln_mu_qty\",\n      \"columnName\": \"basln_mu_qty\"\n    },\n    {\n      \"transformation\": \"basln_mu_qty - basln_mu_any_prmtn_qty\",\n      \"columnName\": \"basln_mu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_mu_any_prmtn_qty\",\n      \"columnName\": \"basln_mu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_qty\",\n      \"columnName\": \"basln_msu_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_qty - basln_msu_any_prmtn_qty\",\n      \"columnName\": \"basln_msu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_any_prmtn_qty\",\n      \"columnName\": \"basln_msu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_mlc_amt\",\n      \"columnName\": \"basln_mlc_amt\"\n    },\n    {\n      \"transformation\": \"basln_mlc_amt - basln_mlc_any_prmtn_amt\",\n      \"columnName\": \"basln_mlc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"basln_mlc_any_prmtn_amt\",\n      \"columnName\": \"basln_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"NVL((sales_mu_qty),(sales_mu_non_prmtn_qty + sales_mu_any_prmtn_qty))\",\n      \"columnName\": \"sales_mu_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_mu_non_prmtn_qty),(sales_mu_qty - sales_mu_any_prmtn_qty))\",\n      \"columnName\": \"sales_mu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_mu_any_prmtn_qty),(sales_mu_qty - sales_mu_non_prmtn_qty))\",\n      \"columnName\": \"sales_mu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_msu_qty),(sales_msu_non_prmtn_qty + sales_msu_any_prmtn_qty))\",\n      \"columnName\": \"sales_msu_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_msu_non_prmtn_qty),(sales_msu_qty - sales_msu_any_prmtn_qty))\",\n      \"columnName\": \"sales_msu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_msu_any_prmtn_qty),(sales_msu_qty - sales_msu_non_prmtn_qty))\",\n      \"columnName\": \"sales_msu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_mlc_amt),(sales_mlc_non_prmtn_amt + sales_mlc_any_prmtn_amt))\",\n      \"columnName\": \"sales_mlc_amt\"\n    },\n    {\n      \"transformation\": \"NVL((sales_mlc_non_prmtn_amt),(sales_mlc_amt - sales_mlc_any_prmtn_amt))\",\n      \"columnName\": \"sales_mlc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"NVL((sales_mlc_any_prmtn_amt),(sales_mlc_amt - sales_mlc_non_prmtn_amt))\",\n      \"columnName\": \"sales_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"NVL((numrc_dist_sellg_pct),(numrc_dist_sellg_4_wk_pct))\",\n      \"columnName\": \"numrc_dist_pct\"\n    },\n    {\n      \"transformation\": \"NVL((wgt_dist_sellg_pct),(wgt_dist_sellg_4_wk_pct))\",\n      \"columnName\": \"wgt_dist_pct\"\n    },\n    {\n      \"transformation\": \"NVL((num_store_unvrs_sellg_u_qty),(case when sales_per_dspt_msu_qty != 0 then sales_msu_qty / sales_per_dspt_msu_qty end))\",\n      \"columnName\": \"num_store_unvrs_sellg_u_qty\"\n    },\n    {\n      \"transformation\": \"sales_efprc_mlc_efeat_amt\",\n      \"columnName\": \"sales_efprc_mlc_efeat_amt\"\n    },\n    {\n      \"transformation\": \"sales_cnprc_mlc_amt\",\n      \"columnName\": \"sales_cnprc_mlc_amt\"\n    },\n    {\n      \"transformation\": \"sales_cnprc_mlc_any_prmtn_amt\",\n      \"columnName\": \"sales_cnprc_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"sales_cnprc_mlc_efeat_amt\",\n      \"columnName\": \"sales_cnprc_mlc_efeat_amt\"\n    },\n    {\n      \"transformation\": \"exchg_rate_usd_amt\",\n      \"columnName\": \"exchg_rate_usd_amt\"\n    },\n    {\n      \"transformation\": \"exchg_rate_eur_amt\",\n      \"columnName\": \"exchg_rate_eur_amt\"\n    },\n    {\n      \"transformation\": \"exchg_rate_cus_amt\",\n      \"columnName\": \"exchg_rate_cus_amt\"\n    },\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"rcd_orign_code\",\n      \"columnName\": \"rcd_orign_code\"\n    },\n    {\n      \"transformation\": \"mkt_extrn_code\",\n      \"columnName\": \"mkt_extrn_code\"\n    },\n    {\n      \"transformation\": \"prod_extrn_code\",\n      \"columnName\": \"prod_extrn_code\"\n    },\n    {\n      \"transformation\": \"time_extrn_code\",\n      \"columnName\": \"time_extrn_code\"\n    },\n    {\n      \"transformation\": \"sales_msu_featr_dsply_qty\",\n      \"columnName\": \"sales_msu_featr_dsply_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_dsply_qty\",\n      \"columnName\": \"sales_msu_dsply_qty\"\n    },\n    {\n      \"transformation\": \"sales_musd_amt\",\n      \"columnName\": \"sales_musd_amt\"\n    },\n    {\n      \"transformation\": \"sales_meur_amt\",\n      \"columnName\": \"sales_meur_amt\"\n    },\n    {\n      \"transformation\": \"sales_mcus_amt\",\n      \"columnName\": \"sales_mcus_amt\"\n    },\n    {\n      \"transformation\": \"sales_msu_featr_qty\",\n      \"columnName\": \"sales_msu_featr_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_prcut_qty\",\n      \"columnName\": \"sales_msu_prcut_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_prcut_only_qty\",\n      \"columnName\": \"sales_msu_prcut_only_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_efeat_qty\",\n      \"columnName\": \"sales_msu_efeat_qty\"\n    },\n    {\n      \"transformation\": \"sales_mlc_featr_dsply_amt\",\n      \"columnName\": \"sales_mlc_featr_dsply_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_dsply_amt\",\n      \"columnName\": \"sales_mlc_dsply_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_featr_amt\",\n      \"columnName\": \"sales_mlc_featr_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_prcut_amt\",\n      \"columnName\": \"sales_mlc_prcut_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_prcut_only_amt\",\n      \"columnName\": \"sales_mlc_prcut_only_amt\"\n    },\n    {\n      \"transformation\": \"sales_per_dspt_msu_qty\",\n      \"columnName\": \"sales_per_dspt_msu_qty\"\n    },\n    {\n      \"transformation\": \"numrc_dist_sellg_pct\",\n      \"columnName\": \"numrc_dist_sellg_pct\"\n    },\n    {\n      \"transformation\": \"numrc_dist_any_prmtn_pct\",\n      \"columnName\": \"numrc_dist_any_prmtn_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_sellg_pct\",\n      \"columnName\": \"wgt_dist_sellg_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_any_prmtn_pct\",\n      \"columnName\": \"wgt_dist_any_prmtn_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_featr_dsply_pct\",\n      \"columnName\": \"wgt_dist_featr_dsply_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_dsply_wo_featr_pct\",\n      \"columnName\": \"wgt_dist_dsply_wo_featr_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_featr_wo_dsply_pct\",\n      \"columnName\": \"wgt_dist_featr_wo_dsply_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_prcut_pct\",\n      \"columnName\": \"wgt_dist_prcut_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_prcut_only_pct\",\n      \"columnName\": \"wgt_dist_prcut_only_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_featr_pct\",\n      \"columnName\": \"wgt_dist_featr_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_dsply_pct\",\n      \"columnName\": \"wgt_dist_dsply_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_bnspk_pct\",\n      \"columnName\": \"wgt_dist_bnspk_pct\"\n    },\n    {\n      \"transformation\": \"basln_msu_featr_dsply_qty\",\n      \"columnName\": \"basln_msu_featr_dsply_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_dsply_qty\",\n      \"columnName\": \"basln_msu_dsply_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_featr_qty\",\n      \"columnName\": \"basln_msu_featr_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_prcut_qty\",\n      \"columnName\": \"basln_msu_prcut_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_prcut_only_qty\",\n      \"columnName\": \"basln_msu_prcut_only_qty\"\n    },\n    {\n      \"transformation\": \"sku_per_dspt_u_qty\",\n      \"columnName\": \"sku_per_dspt_u_qty\"\n    },\n    {\n      \"transformation\": \"shelf_lngth_qty\",\n      \"columnName\": \"shelf_lngth_qty\"\n    },\n    {\n      \"transformation\": \"numrc_dist_sellg_4_wk_pct\",\n      \"columnName\": \"numrc_dist_sellg_4_wk_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_sellg_4_wk_pct\",\n      \"columnName\": \"wgt_dist_sellg_4_wk_pct\"\n    },\n    {\n      \"transformation\": \"shelf_sellg_lngth_qty\",\n      \"columnName\": \"shelf_sellg_lngth_qty\"\n    },\n    {\n      \"transformation\": \"tdp_u_qty\",\n      \"columnName\": \"tdp_u_qty\"\n    },\n    {\n      \"transformation\": \"num_store_unvrs_sellg_u_qty\",\n      \"columnName\": \"num_store_unvrs_sellg_u_qty\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[dcet] df_fct_crncy",
      "predecessorName": "[CET] df_fct_crncy",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\"\n    }\n  ],\n  \"dynamicColumns\": [\n    {\n      \"columnName\": \"basln_mu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mu_non_prmtn_qty + basln_mu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mu_non_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mu_qty - basln_mu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mu_any_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mu_qty - basln_mu_non_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_msu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_msu_non_prmtn_qty + basln_msu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_msu_non_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_msu_qty - basln_msu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_msu_any_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_msu_qty - basln_msu_non_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mpu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mpu_non_prmtn_qty + basln_mpu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mpu_non_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mpu_qty - basln_mpu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mpu_any_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mpu_qty - basln_mpu_non_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mlc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mlc_non_prmtn_amt + basln_mlc_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mlc_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mlc_amt - basln_mlc_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mlc_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mlc_amt - basln_mlc_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"numrc_dist_stock_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"numrc_dist_hndlg_pct - numrc_dist_oos_pct\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"numrc_dist_oos_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"numrc_dist_hndlg_pct - numrc_dist_stock_pct\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"wgt_dist_stock_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"wgt_dist_hndlg_pct - wgt_dist_oos_pct\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"wgt_dist_oos_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"wgt_dist_hndlg_pct - wgt_dist_stock_pct\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mu_non_prmtn_qty + sales_mu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mu_non_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mu_qty - sales_mu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mu_any_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mu_qty - sales_mu_non_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_msu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_msu_non_prmtn_qty + sales_msu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_msu_non_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_msu_qty - sales_msu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_msu_any_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_msu_qty - sales_msu_non_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mpu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mpu_non_prmtn_qty + sales_mpu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mpu_non_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mpu_qty - sales_mpu_any_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mpu_any_prmtn_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mpu_qty - sales_mpu_non_prmtn_qty\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mlc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mlc_non_prmtn_amt + sales_mlc_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mlc_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mlc_amt - sales_mlc_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mlc_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mlc_amt - sales_mlc_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"numrc_dist_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"numrc_dist_stock_pct + numrc_dist_oos_pct\"\n        },\n        {\n          \"expression\": \"numrc_dist_hndlg_pct\"\n        },\n        {\n          \"expression\": \"numrc_dist_sellg_pct\"\n        },\n        {\n          \"expression\": \"numrc_dist_sellg_4_wk_pct\"\n        },\n        {\n          \"expression\": \"numrc_dist_sellg_3_mth_pct\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"wgt_dist_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"wgt_dist_hndlg_pct\"\n        },\n        {\n          \"expression\": \"wgt_dist_sellg_pct\"\n        },\n        {\n          \"expression\": \"wgt_dist_sellg_4_wk_pct\"\n        },\n        {\n          \"expression\": \"wgt_dist_sellg_3_mth_pct\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"num_store_unvrs_u_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when numrc_dist_pct != 0  then num_store_unvrs_sellg_u_qty / (numrc_dist_pct / 100) end\"\n        },\n        {\n          \"expression\": \"case when sales_per_dspt_mu_qty != 0 and numrc_dist_pct != 0  then (sales_mu_qty / sales_per_dspt_mu_qty) / (numrc_dist_pct / 100) end\"\n        },\n        {\n          \"expression\": \"case when sales_per_dspt_msu_qty != 0 and numrc_dist_pct != 0 then (sales_msu_qty / sales_per_dspt_msu_qty) / (numrc_dist_pct / 100) end\"\n        },\n        {\n          \"expression\": \"case when  sales_per_dspt_mlc_amt != 0 and numrc_dist_pct != 0 then (sales_mlc_amt / sales_per_dspt_mlc_amt) / (numrc_dist_pct / 100) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"num_store_unvrs_sellg_u_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"num_store_unvrs_u_qty * (numrc_dist_pct / 100)\"\n        },\n        {\n          \"expression\": \"case when sales_per_dspt_mu_qty != 0  then sales_mu_qty / sales_per_dspt_mu_qty end\"\n        },\n        {\n          \"expression\": \"case when sales_per_dspt_msu_qty != 0 then sales_msu_qty / sales_per_dspt_msu_qty end\"\n        },\n        {\n          \"expression\": \"case when sales_per_dspt_mlc_amt != 0 then sales_mlc_amt / sales_per_dspt_mlc_amt end\"\n        }\n      ]\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "DynamicColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "CRBM1",
      "predecessorName": "[dcet] df_fct_crncy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\n\\nmyLogger = self.log\\n\\nfrom pyspark.sql.functions import *\\n\\nfrom IPython import get_ipython\\n\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n \\n\\ndf= dict_all_dfs['df_fct_crncy'][\\\"df_object\\\"]\\n\\n#df=spark.read.parquet(\\\"/mnt/turbinev1/Spark/data/temp/materialize/69361839_69362041_Generic_df_fct_crncy\\\")\\n\\n#df=spark.read.parquet(\\\"/mnt/turbinev1/Spark/data/temp/materialize/69487255_69488016_Generic_df_fct_crncy\\\")\\n\\ndf.createOrReplaceTempView('crncy')\\n\\n \\n\\n \\n\\ncrncy_columns = df.columns\\n\\n \\n\\nmeas_list= dict_all_dfs['df_measr_factr_cntrt_mapped'][\\\"df_object\\\"]\\n\\n\\n\\nmeas_list=meas_list.filter('use_ind=\\\"Y\\\"')\\n\\n\\n\\n\\n\\n \\n\\n \\n\\nmeas_list=meas_list.select(collect_list(\\\"measr_phys_name\\\")).collect()[0][0]\\n\\nmeas_list=[item.lower()for item in meas_list]\\n\\nb=','.join(meas_list)\\n\\n\\n\\n \\n\\ncrbm1cols=['basln_mu_qty',\\n\\n'basln_mu_non_prmtn_qty',\\n\\n'basln_mu_any_prmtn_qty',\\n\\n'basln_msu_qty',\\n\\n'basln_msu_non_prmtn_qty',\\n\\n'basln_msu_any_prmtn_qty',\\n\\n'basln_mpu_qty',\\n\\n'basln_mpu_non_prmtn_qty',\\n\\n'basln_mpu_any_prmtn_qty',\\n\\n'basln_mlc_amt',\\n\\n'basln_mlc_non_prmtn_amt',\\n\\n'basln_mlc_any_prmtn_amt',\\n\\n'numrc_dist_stock_pct',\\n\\n'numrc_dist_oos_pct',\\n\\n'wgt_dist_stock_pct',\\n\\n'wgt_dist_oos_pct',\\n\\n'sales_mu_qty',\\n\\n'sales_mu_non_prmtn_qty',\\n\\n'sales_mu_any_prmtn_qty',\\n\\n'sales_msu_qty',\\n\\n'sales_msu_non_prmtn_qty',\\n\\n'sales_msu_any_prmtn_qty',\\n\\n'sales_mpu_qty',\\n\\n'sales_mpu_non_prmtn_qty',\\n\\n'sales_mpu_any_prmtn_qty',\\n\\n'sales_mlc_amt',\\n\\n'sales_mlc_non_prmtn_amt',\\n\\n'sales_mlc_any_prmtn_amt',\\n\\n'numrc_dist_pct',\\n\\n'wgt_dist_pct',\\n\\n'num_store_unvrs_u_qty',\\n\\n'num_store_unvrs_sellg_u_qty']\\n\\nfor i in crbm1cols:\\n\\n  crncy_columns.remove(i)\\n\\n \\n\\ns = ''\\n\\nfor c in crncy_columns:\\n\\n  s = s+str(c)+', '\\n\\n  #print(s)\\n\\n \\n\\n#c=(sales_mu_any_prmtn_qty)\\n\\n#print(({', '.join([f\\\"'{col}'\\\" for col in meas_list])}))\\n\\n#crbm1\\n\\nfor col in meas_list:\\n\\n  col_check=col\\n\\ndf_fct_crbm=spark.sql(f'''\\n\\nSELECT\\n\\n{s}\\n\\n \\n\\ncoalesce((basln_mu_qty),(basln_mu_non_prmtn_qty + basln_mu_any_prmtn_qty)) basln_mu_qty,\\n\\n \\n\\n \\n\\ncoalesce((basln_mu_non_prmtn_qty),(basln_mu_qty - basln_mu_any_prmtn_qty)) basln_mu_non_prmtn_qty,\\n\\n \\n\\n \\n\\ncoalesce((basln_mu_any_prmtn_qty),(basln_mu_qty - basln_mu_non_prmtn_qty)) basln_mu_any_prmtn_qty,\\n\\n \\n\\n \\n\\ncoalesce((basln_msu_qty),(basln_msu_non_prmtn_qty + basln_msu_any_prmtn_qty)) basln_msu_qty,\\n\\n \\n\\ncoalesce((basln_msu_non_prmtn_qty),(basln_msu_qty - basln_msu_any_prmtn_qty)) basln_msu_non_prmtn_qty,\\n\\n \\n\\ncoalesce((basln_msu_any_prmtn_qty),(basln_msu_qty - basln_msu_non_prmtn_qty)) basln_msu_any_prmtn_qty,\\n\\n \\n\\ncoalesce((basln_mpu_qty),(basln_mpu_non_prmtn_qty + basln_mpu_any_prmtn_qty)) basln_mpu_qty,\\n\\n \\n\\n \\n\\ncoalesce((basln_mpu_non_prmtn_qty),(basln_mpu_qty - basln_mpu_any_prmtn_qty)) basln_mpu_non_prmtn_qty,\\n\\n \\n\\ncoalesce((basln_mpu_any_prmtn_qty),(basln_mpu_qty - basln_mpu_non_prmtn_qty)) basln_mpu_any_prmtn_qty,\\n\\n \\n\\n \\n\\ncoalesce((basln_mlc_amt),(basln_mlc_non_prmtn_amt + basln_mlc_any_prmtn_amt)) basln_mlc_amt,\\n\\ncoalesce ((basln_mlc_non_prmtn_amt),(basln_mlc_amt - basln_mlc_any_prmtn_amt)) basln_mlc_non_prmtn_amt,\\n\\ncoalesce((basln_mlc_any_prmtn_amt),(basln_mlc_amt - basln_mlc_non_prmtn_amt)) basln_mlc_any_prmtn_amt,\\n\\n \\n\\ncoalesce((numrc_dist_stock_pct),(numrc_dist_hndlg_pct - numrc_dist_oos_pct)) numrc_dist_stock_pct,\\n\\n \\n\\ncoalesce((numrc_dist_oos_pct),(numrc_dist_hndlg_pct - numrc_dist_stock_pct)) numrc_dist_oos_pct,\\n\\n \\n\\ncoalesce((wgt_dist_stock_pct),(wgt_dist_hndlg_pct - wgt_dist_oos_pct)) wgt_dist_stock_pct,\\n\\n \\n\\ncoalesce((wgt_dist_oos_pct),(wgt_dist_hndlg_pct - wgt_dist_stock_pct)) wgt_dist_oos_pct,\\n\\ncoalesce((sales_mu_qty),(sales_mu_non_prmtn_qty + sales_mu_any_prmtn_qty)) sales_mu_qty,\\n\\n \\n\\ncoalesce((sales_mu_non_prmtn_qty),(sales_mu_qty - nvl(sales_mu_any_prmtn_qty, 0))) sales_mu_non_prmtn_qty,\\n\\n\\n \\n\\ncoalesce((sales_mu_any_prmtn_qty),(sales_mu_qty - sales_mu_non_prmtn_qty)) sales_mu_any_prmtn_qty,\\n\\n \\n\\ncoalesce((sales_msu_qty),(sales_msu_non_prmtn_qty + sales_msu_any_prmtn_qty)) sales_msu_qty,\\n\\n \\n\\ncoalesce((sales_msu_non_prmtn_qty),(sales_msu_qty - nvl(sales_msu_any_prmtn_qty, 0))) sales_msu_non_prmtn_qty,\\n\\n \\n\\n\\n \\n\\ncoalesce((sales_msu_any_prmtn_qty),(sales_msu_qty - sales_msu_non_prmtn_qty)) sales_msu_any_prmtn_qty,\\n\\n \\n\\ncoalesce((sales_mpu_qty),(sales_mpu_non_prmtn_qty + sales_mpu_any_prmtn_qty)) sales_mpu_qty,\\n\\n \\n\\ncoalesce((sales_mpu_non_prmtn_qty),(sales_mpu_qty - sales_mpu_any_prmtn_qty)) sales_mpu_non_prmtn_qty,\\n\\ncoalesce((sales_mpu_any_prmtn_qty),(sales_mpu_qty - sales_mpu_non_prmtn_qty)) sales_mpu_any_prmtn_qty,\\n\\n \\n\\ncoalesce((sales_mlc_amt),(sales_mlc_non_prmtn_amt + sales_mlc_any_prmtn_amt)) sales_mlc_amt,\\n\\ncoalesce((sales_mlc_non_prmtn_amt),(sales_mlc_amt - nvl(sales_mlc_any_prmtn_amt, 0))) sales_mlc_non_prmtn_amt, \\n\\n\\n\\ncoalesce((sales_mlc_any_prmtn_amt),(sales_mlc_amt - sales_mlc_non_prmtn_amt)) sales_mlc_any_prmtn_amt,\\n\\n\\n\\ncoalesce((numrc_dist_pct),(numrc_dist_stock_pct + numrc_dist_oos_pct),(numrc_dist_hndlg_pct),(numrc_dist_sellg_pct),(numrc_dist_sellg_4_wk_pct),(numrc_dist_sellg_3_mth_pct)) numrc_dist_pct,\\n\\ncoalesce((wgt_dist_pct),(wgt_dist_hndlg_pct),(wgt_dist_sellg_pct),(wgt_dist_sellg_4_wk_pct),(wgt_dist_sellg_3_mth_pct)) wgt_dist_pct,\\n\\n\\ncoalesce((num_store_unvrs_u_qty),(case when numrc_dist_pct != 0  then num_store_unvrs_sellg_u_qty / (numrc_dist_pct / 100) end),(case when sales_per_dspt_mu_qty != 0 and numrc_dist_pct != 0  then (sales_mu_qty / sales_per_dspt_mu_qty) / (numrc_dist_pct / 100) end),(case when sales_per_dspt_msu_qty != 0 and numrc_dist_pct != 0 then (sales_msu_qty / sales_per_dspt_msu_qty) / (numrc_dist_pct / 100) end),(case when  sales_per_dspt_mlc_amt != 0 and numrc_dist_pct != 0 then (sales_mlc_amt / sales_per_dspt_mlc_amt) / (numrc_dist_pct / 100) end)) num_store_unvrs_u_qty,\\n \\ncoalesce((num_store_unvrs_sellg_u_qty),(num_store_unvrs_u_qty * (numrc_dist_pct / 100)),(case when sales_per_dspt_mu_qty != 0  then sales_mu_qty / sales_per_dspt_mu_qty end),(case when sales_per_dspt_msu_qty != 0 then sales_msu_qty / sales_per_dspt_msu_qty end),(case when sales_per_dspt_mlc_amt != 0 then sales_mlc_amt / sales_per_dspt_mlc_amt end)) num_store_unvrs_sellg_u_qty\\n\\n\\n from crncy ''')\\n\\n \\n\\ndict_all_dfs['df_fct_crbm'] = {\\\"df_object\\\" :df_fct_crbm}\\n\\ndf_output_dict['df_fct_crbm'] = df_fct_crbm\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crncy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] df_fct_crbm",
      "predecessorName": "CRBM1",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"(case when shelf_sellg_lngth_qty != 0 then sales_msu_qty / shelf_sellg_lngth_qty end) \",\n      \"columnName\": \"sales_per_lngth_msu_qty\"\n    },\n    {\n      \"transformation\": \"(case when shelf_sellg_lngth_qty != 0 then sales_mlc_amt / shelf_sellg_lngth_qty end)\",\n      \"columnName\": \"sales_per_lngth_mlc_amt\"\n    },\n    {\n      \"transformation\": \"(case when shelf_sellg_lngth_qty != 0 then sales_musd_amt / shelf_sellg_lngth_qty end)\",\n      \"columnName\": \"sales_per_lngth_musd_amt\"\n    },\n    {\n      \"transformation\": \"(case when shelf_sellg_lngth_qty != 0 then sales_mcus_amt / shelf_sellg_lngth_qty end)\",\n      \"columnName\": \"sales_per_lngth_mcus_amt\"\n    },\n    {\n      \"transformation\": \"(case when shelf_sellg_lngth_qty != 0 then sales_meur_amt / shelf_sellg_lngth_qty end)\",\n      \"columnName\": \"sales_per_lngth_meur_amt\"\n    },\n    {\n      \"transformation\": \"sku_per_dspt_u_qty\",\n      \"columnName\": \"sku_per_dspt_u_qty\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_qty != 0 then (sales_msu_any_prmtn_qty / sales_msu_qty) * 100 end)\",\n      \"columnName\": \"prmtn_itsty_su_pct\"\n    },\n    {\n      \"transformation\": \"(case when numrc_dist_pct != 0 then wgt_dist_pct / numrc_dist_pct end)\",\n      \"columnName\": \"dist_effcy_u_qty\"\n    },\n    {\n      \"transformation\": \"(case when sales_mu_qty != 0 then sales_mlc_amt / sales_mu_qty end)\",\n      \"columnName\": \"price_per_u_lc_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_mu_non_prmtn_qty != 0 then sales_mlc_non_prmtn_amt / sales_mu_non_prmtn_qty end)\",\n      \"columnName\": \"price_per_u_lc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_mu_any_prmtn_qty != 0 then sales_mlc_any_prmtn_amt / sales_mu_any_prmtn_qty end)\",\n      \"columnName\": \"price_per_u_lc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_mu_qty != 0 then sales_musd_amt / sales_mu_qty end)\",\n      \"columnName\": \"price_per_u_usd_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_mu_qty != 0 then sales_mcus_amt / sales_mu_qty end)\",\n      \"columnName\": \"price_per_u_cus_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_mu_qty != 0 then sales_meur_amt / sales_mu_qty end)\",\n      \"columnName\": \"price_per_u_eur_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_qty != 0 then sales_mlc_amt / sales_msu_qty end)\",\n      \"columnName\": \"price_per_su_lc_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_non_prmtn_qty != 0 then sales_mlc_non_prmtn_amt / sales_msu_non_prmtn_qty end)\",\n      \"columnName\": \"price_per_su_lc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_any_prmtn_qty != 0 then sales_mlc_any_prmtn_amt / sales_msu_any_prmtn_qty end)\",\n      \"columnName\": \"price_per_su_lc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_qty != 0 then sales_musd_amt / sales_msu_qty end)\",\n      \"columnName\": \"price_per_su_usd_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_qty != 0 then sales_mcus_amt / sales_msu_qty end)\",\n      \"columnName\": \"price_per_su_cus_amt\"\n    },\n    {\n      \"transformation\": \"(case when sales_msu_qty != 0 then sales_meur_amt / sales_msu_qty end)\",\n      \"columnName\": \"price_per_su_eur_amt\"\n    },\n    {\n      \"transformation\": \"sales_musd_amt\",\n      \"columnName\": \"sales_musd_amt\"\n    },\n    {\n      \"transformation\": \"sales_mcus_amt\",\n      \"columnName\": \"sales_mcus_amt\"\n    },\n    {\n      \"transformation\": \"sales_meur_amt\",\n      \"columnName\": \"sales_meur_amt\"\n    },\n    {\n      \"transformation\": \"(case when num_store_unvrs_sellg_u_qty != 0 then sales_mu_qty / num_store_unvrs_sellg_u_qty end)\",\n      \"columnName\": \"sales_per_dspt_mu_qty\"\n    },\n    {\n      \"transformation\": \"NVL((sales_per_dspt_msu_qty),(case when num_store_unvrs_sellg_u_qty != 0 then sales_msu_qty / num_store_unvrs_sellg_u_qty end))\",\n      \"columnName\": \"sales_per_dspt_msu_qty\"\n    },\n    {\n      \"transformation\": \"(case when num_store_unvrs_sellg_u_qty != 0 then sales_mlc_amt / num_store_unvrs_sellg_u_qty end)\",\n      \"columnName\": \"sales_per_dspt_mlc_amt\"\n    },\n    {\n      \"transformation\": \"(case when num_store_unvrs_sellg_u_qty != 0 then sales_musd_amt / num_store_unvrs_sellg_u_qty end)\",\n      \"columnName\": \"sales_per_dspt_musd_amt\"\n    },\n    {\n      \"transformation\": \"(case when num_store_unvrs_sellg_u_qty != 0 then sales_mcus_amt / num_store_unvrs_sellg_u_qty end)\",\n      \"columnName\": \"sales_per_dspt_mcus_amt\"\n    },\n    {\n      \"transformation\": \"(case when num_store_unvrs_sellg_u_qty != 0 then sales_meur_amt / num_store_unvrs_sellg_u_qty end)\",\n      \"columnName\": \"sales_per_dspt_meur_amt\"\n    },\n    {\n      \"transformation\": \"wgt_dist_sellg_4_wk_pct\",\n      \"columnName\": \"wgt_dist_sellg_4_wk_pct\"\n    },\n    {\n      \"transformation\": \"shelf_sellg_lngth_qty\",\n      \"columnName\": \"shelf_sellg_lngth_qty\"\n    },\n    {\n      \"transformation\": \"tdp_u_qty\",\n      \"columnName\": \"tdp_u_qty\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"iso_crncy_code\",\n      \"columnName\": \"iso_crncy_code\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"fact_type_code\",\n      \"columnName\": \"fact_type_code\"\n    },\n    {\n      \"transformation\": \"basln_mu_qty\",\n      \"columnName\": \"basln_mu_qty\"\n    },\n    {\n      \"transformation\": \"basln_mu_non_prmtn_qty\",\n      \"columnName\": \"basln_mu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_mu_any_prmtn_qty\",\n      \"columnName\": \"basln_mu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_qty\",\n      \"columnName\": \"basln_msu_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_non_prmtn_qty\",\n      \"columnName\": \"basln_msu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_any_prmtn_qty\",\n      \"columnName\": \"basln_msu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"basln_mlc_amt\",\n      \"columnName\": \"basln_mlc_amt\"\n    },\n    {\n      \"transformation\": \"basln_mlc_non_prmtn_amt\",\n      \"columnName\": \"basln_mlc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"basln_mlc_any_prmtn_amt\",\n      \"columnName\": \"basln_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"sales_mu_qty\",\n      \"columnName\": \"sales_mu_qty\"\n    },\n    {\n      \"transformation\": \"sales_mu_non_prmtn_qty\",\n      \"columnName\": \"sales_mu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"sales_mu_any_prmtn_qty\",\n      \"columnName\": \"sales_mu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_qty\",\n      \"columnName\": \"sales_msu_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_non_prmtn_qty\",\n      \"columnName\": \"sales_msu_non_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_any_prmtn_qty\",\n      \"columnName\": \"sales_msu_any_prmtn_qty\"\n    },\n    {\n      \"transformation\": \"sales_mlc_amt\",\n      \"columnName\": \"sales_mlc_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_non_prmtn_amt\",\n      \"columnName\": \"sales_mlc_non_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_any_prmtn_amt\",\n      \"columnName\": \"sales_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"numrc_dist_pct\",\n      \"columnName\": \"numrc_dist_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_pct\",\n      \"columnName\": \"wgt_dist_pct\"\n    },\n    {\n      \"transformation\": \"num_store_unvrs_sellg_u_qty\",\n      \"columnName\": \"num_store_unvrs_sellg_u_qty\"\n    },\n    {\n      \"transformation\": \"sales_efprc_mlc_efeat_amt\",\n      \"columnName\": \"sales_efprc_mlc_efeat_amt\"\n    },\n    {\n      \"transformation\": \"sales_cnprc_mlc_amt\",\n      \"columnName\": \"sales_cnprc_mlc_amt\"\n    },\n    {\n      \"transformation\": \"sales_cnprc_mlc_any_prmtn_amt\",\n      \"columnName\": \"sales_cnprc_mlc_any_prmtn_amt\"\n    },\n    {\n      \"transformation\": \"sales_cnprc_mlc_efeat_amt\",\n      \"columnName\": \"sales_cnprc_mlc_efeat_amt\"\n    },\n    {\n      \"transformation\": \"exchg_rate_usd_amt\",\n      \"columnName\": \"exchg_rate_usd_amt\"\n    },\n    {\n      \"transformation\": \"exchg_rate_eur_amt\",\n      \"columnName\": \"exchg_rate_eur_amt\"\n    },\n    {\n      \"transformation\": \"exchg_rate_cus_amt\",\n      \"columnName\": \"exchg_rate_cus_amt\"\n    },\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"rcd_orign_code\",\n      \"columnName\": \"rcd_orign_code\"\n    },\n    {\n      \"transformation\": \"mkt_extrn_code\",\n      \"columnName\": \"mkt_extrn_code\"\n    },\n    {\n      \"transformation\": \"prod_extrn_code\",\n      \"columnName\": \"prod_extrn_code\"\n    },\n    {\n      \"transformation\": \"time_extrn_code\",\n      \"columnName\": \"time_extrn_code\"\n    },\n    {\n      \"transformation\": \"sales_msu_featr_dsply_qty\",\n      \"columnName\": \"sales_msu_featr_dsply_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_dsply_qty\",\n      \"columnName\": \"sales_msu_dsply_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_featr_qty\",\n      \"columnName\": \"sales_msu_featr_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_prcut_qty\",\n      \"columnName\": \"sales_msu_prcut_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_prcut_only_qty\",\n      \"columnName\": \"sales_msu_prcut_only_qty\"\n    },\n    {\n      \"transformation\": \"sales_msu_efeat_qty\",\n      \"columnName\": \"sales_msu_efeat_qty\"\n    },\n    {\n      \"transformation\": \"sales_mlc_featr_dsply_amt\",\n      \"columnName\": \"sales_mlc_featr_dsply_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_dsply_amt\",\n      \"columnName\": \"sales_mlc_dsply_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_featr_amt\",\n      \"columnName\": \"sales_mlc_featr_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_prcut_amt\",\n      \"columnName\": \"sales_mlc_prcut_amt\"\n    },\n    {\n      \"transformation\": \"sales_mlc_prcut_only_amt\",\n      \"columnName\": \"sales_mlc_prcut_only_amt\"\n    },\n    {\n      \"transformation\": \"numrc_dist_sellg_pct\",\n      \"columnName\": \"numrc_dist_sellg_pct\"\n    },\n    {\n      \"transformation\": \"numrc_dist_any_prmtn_pct\",\n      \"columnName\": \"numrc_dist_any_prmtn_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_sellg_pct\",\n      \"columnName\": \"wgt_dist_sellg_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_any_prmtn_pct\",\n      \"columnName\": \"wgt_dist_any_prmtn_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_featr_dsply_pct\",\n      \"columnName\": \"wgt_dist_featr_dsply_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_dsply_wo_featr_pct\",\n      \"columnName\": \"wgt_dist_dsply_wo_featr_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_featr_wo_dsply_pct\",\n      \"columnName\": \"wgt_dist_featr_wo_dsply_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_prcut_pct\",\n      \"columnName\": \"wgt_dist_prcut_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_prcut_only_pct\",\n      \"columnName\": \"wgt_dist_prcut_only_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_featr_pct\",\n      \"columnName\": \"wgt_dist_featr_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_dsply_pct\",\n      \"columnName\": \"wgt_dist_dsply_pct\"\n    },\n    {\n      \"transformation\": \"wgt_dist_bnspk_pct\",\n      \"columnName\": \"wgt_dist_bnspk_pct\"\n    },\n    {\n      \"transformation\": \"basln_msu_featr_dsply_qty\",\n      \"columnName\": \"basln_msu_featr_dsply_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_dsply_qty\",\n      \"columnName\": \"basln_msu_dsply_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_featr_qty\",\n      \"columnName\": \"basln_msu_featr_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_prcut_qty\",\n      \"columnName\": \"basln_msu_prcut_qty\"\n    },\n    {\n      \"transformation\": \"basln_msu_prcut_only_qty\",\n      \"columnName\": \"basln_msu_prcut_only_qty\"\n    },\n    {\n      \"transformation\": \"shelf_lngth_qty\",\n      \"columnName\": \"shelf_lngth_qty\"\n    },\n    {\n      \"transformation\": \"numrc_dist_sellg_4_wk_pct\",\n      \"columnName\": \"numrc_dist_sellg_4_wk_pct\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm2\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[DCET] df_fct_crbm",
      "predecessorName": "[CET] df_fct_crbm",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm\"\n    }\n  ],\n  \"dynamicColumns\": [\n    {\n      \"columnName\": \"sales_meur_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_meur_amt - sales_meur_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_lngth_msu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when shelf_sellg_lngth_qty != 0 then sales_msu_qty / shelf_sellg_lngth_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_lngth_mlc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when shelf_sellg_lngth_qty != 0 then sales_mlc_amt / shelf_sellg_lngth_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_lngth_musd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when shelf_sellg_lngth_qty != 0 then sales_musd_amt / shelf_sellg_lngth_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_lngth_mcus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when shelf_sellg_lngth_qty != 0 then sales_mcus_amt / shelf_sellg_lngth_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_lngth_meur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when shelf_sellg_lngth_qty != 0 then sales_meur_amt / shelf_sellg_lngth_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"stock_per_dspt_msu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then stock_msu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"frwrd_stock_per_dspt_msu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then frwrd_stock_msu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_musd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_musd_non_prmtn_amt + basln_musd_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_musd_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_musd_amt - basln_musd_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_musd_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_musd_amt - basln_musd_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mcus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mcus_non_prmtn_amt + basln_mcus_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mcus_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mcus_amt - basln_mcus_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_mcus_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_mcus_amt - basln_mcus_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_meur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_meur_non_prmtn_amt + basln_meur_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_meur_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_meur_amt - basln_meur_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"basln_meur_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"basln_meur_amt - basln_meur_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sku_per_dspt_u_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) !=0 then num_sku_u_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"prmtn_itsty_su_pct\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_qty != 0 then (sales_msu_any_prmtn_qty / sales_msu_qty) * 100 end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"dist_effcy_u_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when numrc_dist_pct != 0 then wgt_dist_pct / numrc_dist_pct end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_lc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_qty != 0 then sales_mlc_amt / sales_mu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_lc_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_non_prmtn_qty != 0 then sales_mlc_non_prmtn_amt / sales_mu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_lc_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_any_prmtn_qty != 0 then sales_mlc_any_prmtn_amt / sales_mu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_usd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_qty != 0 then sales_musd_amt / sales_mu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_usd_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_non_prmtn_qty != 0 then sales_musd_non_prmtn_amt / sales_mu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_usd_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_any_prmtn_qty != 0 then sales_musd_any_prmtn_amt / sales_mu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_cus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_qty != 0 then sales_mcus_amt / sales_mu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_cus_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_non_prmtn_qty != 0 then sales_mcus_non_prmtn_amt / sales_mu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_cus_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_any_prmtn_qty != 0 then sales_mcus_any_prmtn_amt / sales_mu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_eur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_qty != 0 then sales_meur_amt / sales_mu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_eur_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_non_prmtn_qty != 0 then sales_meur_non_prmtn_amt / sales_mu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_u_eur_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mu_any_prmtn_qty != 0 then sales_meur_any_prmtn_amt / sales_mu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_lc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_qty != 0 then sales_mlc_amt / sales_msu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_lc_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_non_prmtn_qty != 0 then sales_mlc_non_prmtn_amt / sales_msu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_lc_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_any_prmtn_qty != 0 then sales_mlc_any_prmtn_amt / sales_msu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_usd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_qty != 0 then sales_musd_amt / sales_msu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_usd_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_non_prmtn_qty != 0 then sales_musd_non_prmtn_amt / sales_msu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_usd_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_any_prmtn_qty != 0 then sales_musd_any_prmtn_amt / sales_msu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_cus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_qty != 0 then sales_mcus_amt / sales_msu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_cus_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_non_prmtn_qty != 0 then sales_mcus_non_prmtn_amt / sales_msu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_cus_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_any_prmtn_qty != 0 then sales_mcus_any_prmtn_amt / sales_msu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_eur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_qty != 0 then sales_meur_amt / sales_msu_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_eur_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_non_prmtn_qty != 0 then sales_meur_non_prmtn_amt / sales_msu_non_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_su_eur_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_msu_any_prmtn_qty != 0 then sales_meur_any_prmtn_amt / sales_msu_any_prmtn_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_p_lc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mpack_qty != 0 then sales_mlc_amt / sales_mpack_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_p_usd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mpack_qty != 0 then sales_musd_amt / sales_mpack_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_p_cus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mpack_qty != 0 then sales_mcus_amt / sales_mpack_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"price_per_p_eur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when sales_mpack_qty != 0 then sales_meur_amt / sales_mpack_qty end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_musd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_musd_non_prmtn_amt + sales_musd_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_musd_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_musd_amt - sales_musd_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_musd_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_musd_amt - sales_musd_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mcus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mcus_non_prmtn_amt + sales_mcus_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mcus_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mcus_amt - sales_mcus_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_mcus_any_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_mcus_amt - sales_mcus_non_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_meur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_meur_non_prmtn_amt + sales_meur_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_meur_non_prmtn_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"sales_meur_amt - sales_meur_any_prmtn_amt\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_dspt_mu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when num_store_unvrs_sellg_u_qty != 0 then sales_mu_qty / num_store_unvrs_sellg_u_qty end\"\n        },\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_mu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_dspt_msu_qty\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when num_store_unvrs_sellg_u_qty != 0 then sales_msu_qty / num_store_unvrs_sellg_u_qty end\"\n        },\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_msu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_dspt_mlc_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when num_store_unvrs_sellg_u_qty != 0 then sales_mlc_amt / num_store_unvrs_sellg_u_qty end\"\n        },\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_mlc_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_dspt_musd_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when num_store_unvrs_sellg_u_qty != 0 then sales_musd_amt / num_store_unvrs_sellg_u_qty end\"\n        },\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_musd_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_dspt_mcus_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when num_store_unvrs_sellg_u_qty != 0 then sales_mcus_amt / num_store_unvrs_sellg_u_qty end\"\n        },\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_mcus_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    },\n    {\n      \"columnName\": \"sales_per_dspt_meur_amt\",\n      \"optional\": \"true\",\n      \"transformation\": [\n        {\n          \"expression\": \"case when num_store_unvrs_sellg_u_qty != 0 then sales_mcus_amt / num_store_unvrs_sellg_u_qty end\"\n        },\n        {\n          \"expression\": \"case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_meur_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end\"\n        }\n      ]\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm2\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "DynamicColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "CRBM2",
      "predecessorName": "[DCET] df_fct_crbm",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom pyspark.sql.functions import *\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_fct_crbm = dict_all_dfs['df_fct_crbm'][\\\"df_object\\\"]\\n\\ncrbm1output_columns = df_fct_crbm.columns\\n\\ncrbm2cols=['sales_meur_any_prmtn_amt',\\n'sales_per_lngth_msu_qty',\\n'sales_per_lngth_mlc_amt',\\n'sales_per_lngth_musd_amt',\\n'sales_per_lngth_mcus_amt',\\n'sales_per_lngth_meur_amt',\\n'stock_per_dspt_msu_qty',\\n'frwrd_stock_per_dspt_msu_qty',\\n'basln_musd_amt',\\n'basln_musd_non_prmtn_amt',\\n'basln_musd_any_prmtn_amt',\\n'basln_mcus_amt',\\n'basln_mcus_non_prmtn_amt',\\n'basln_mcus_any_prmtn_amt',\\n'basln_meur_amt',\\n'basln_meur_non_prmtn_amt',\\n'basln_meur_any_prmtn_amt',\\n'sku_per_dspt_u_qty',\\n'prmtn_itsty_su_pct',\\n'dist_effcy_u_qty',\\n'price_per_u_lc_amt',\\n'price_per_u_lc_non_prmtn_amt',\\n'price_per_u_lc_any_prmtn_amt',\\n'price_per_u_usd_amt',\\n'price_per_u_usd_non_prmtn_amt',\\n'price_per_u_usd_any_prmtn_amt',\\n'price_per_u_cus_amt',\\n'price_per_u_cus_non_prmtn_amt',\\n'price_per_u_cus_any_prmtn_amt',\\n'price_per_u_eur_amt',\\n'price_per_u_eur_non_prmtn_amt',\\n'price_per_u_eur_any_prmtn_amt',\\n'price_per_su_lc_amt',\\n'price_per_su_lc_non_prmtn_amt',\\n'price_per_su_lc_any_prmtn_amt',\\n'price_per_su_usd_amt',\\n'price_per_su_usd_non_prmtn_amt',\\n'price_per_su_usd_any_prmtn_amt',\\n'price_per_su_cus_amt',\\n'price_per_su_cus_non_prmtn_amt',\\n'price_per_su_cus_any_prmtn_amt',\\n'price_per_su_eur_amt',\\n'price_per_su_eur_non_prmtn_amt',\\n'price_per_su_eur_any_prmtn_amt',\\n'price_per_p_lc_amt',\\n'price_per_p_usd_amt',\\n'price_per_p_cus_amt',\\n'price_per_p_eur_amt',\\n'sales_musd_amt',\\n'sales_musd_non_prmtn_amt',\\n'sales_musd_any_prmtn_amt',\\n'sales_mcus_amt',\\n'sales_mcus_non_prmtn_amt',\\n'sales_mcus_any_prmtn_amt',\\n'sales_meur_amt',\\n'sales_meur_non_prmtn_amt',\\n'sales_per_dspt_mu_qty',\\n'sales_per_dspt_msu_qty',\\n'sales_per_dspt_mlc_amt',\\n'sales_per_dspt_musd_amt',\\n'sales_per_dspt_mcus_amt',\\n'sales_per_dspt_meur_amt'] \\nfor i in crbm2cols:\\n  crbm1output_columns.remove(i)\\n\\ns1 = ''\\nfor c in crbm1output_columns:\\n  s1 = s1+str(c)+', '\\n\\nmeas_list= dict_all_dfs['df_measr_factr_cntrt_mapped'][\\\"df_object\\\"]\\nmeas_list=meas_list.filter('use_ind=\\\"Y\\\"')\\nmeas_list=meas_list.select(collect_list(\\\"measr_phys_name\\\")).collect()[0][0]\\nmeas_list=[item.lower()for item in meas_list]\\n#b=','.join(meas_list)\\n\\n# crbm2\\n\\ndf_fct_crbm.createOrReplaceTempView(\\\"df_fct_crncy\\\")\\n\\ndf_fct_crbm2=spark.sql(f''' select\\n                       {s1}\\n                       coalesce((sales_meur_any_prmtn_amt),(sales_meur_amt - sales_meur_non_prmtn_amt)) sales_meur_any_prmtn_amt,\\ncoalesce((sales_per_lngth_msu_qty),(case when shelf_sellg_lngth_qty != 0 then sales_msu_qty / shelf_sellg_lngth_qty end))sales_per_lngth_msu_qty,                      \\ncoalesce((sales_per_lngth_mlc_amt),(case when shelf_sellg_lngth_qty != 0 then sales_mlc_amt / shelf_sellg_lngth_qty end)) sales_per_lngth_mlc_amt,\\n\\n \\n\\n \\n\\ncoalesce((sales_per_lngth_musd_amt),(case when shelf_sellg_lngth_qty != 0 then sales_musd_amt / shelf_sellg_lngth_qty end)) sales_per_lngth_musd_amt,\\n\\n \\n\\ncoalesce((sales_per_lngth_mcus_amt),(case when shelf_sellg_lngth_qty != 0 then sales_mcus_amt / shelf_sellg_lngth_qty end)) sales_per_lngth_mcus_amt,\\n\\n \\n\\ncoalesce((sales_per_lngth_meur_amt),(case when shelf_sellg_lngth_qty != 0 then sales_meur_amt / shelf_sellg_lngth_qty end)) sales_per_lngth_meur_amt,\\n\\n \\n\\n \\n\\ncoalesce((stock_per_dspt_msu_qty),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then stock_msu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) stock_per_dspt_msu_qty,\\n\\n \\n\\n \\n\\ncoalesce((frwrd_stock_per_dspt_msu_qty),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then frwrd_stock_msu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) frwrd_stock_per_dspt_msu_qty,\\n\\n \\n\\ncoalesce((basln_musd_amt),(basln_musd_non_prmtn_amt + basln_musd_any_prmtn_amt)) basln_musd_amt,\\n\\n \\n\\ncoalesce((basln_musd_non_prmtn_amt),(basln_musd_amt - basln_musd_any_prmtn_amt)) basln_musd_non_prmtn_amt,\\n\\n \\n\\ncoalesce((basln_musd_any_prmtn_amt),(basln_musd_amt - basln_musd_non_prmtn_amt)) basln_musd_any_prmtn_amt,\\ncoalesce((basln_mcus_amt),(basln_mcus_non_prmtn_amt + basln_mcus_any_prmtn_amt)) basln_mcus_amt,\\ncoalesce((basln_mcus_non_prmtn_amt),(basln_mcus_amt - basln_mcus_any_prmtn_amt)) basln_mcus_non_prmtn_amt,\\n\\n \\n\\ncoalesce((basln_mcus_any_prmtn_amt),(basln_mcus_amt - basln_mcus_non_prmtn_amt)) basln_mcus_any_prmtn_amt,\\n\\n \\n\\ncoalesce((basln_meur_amt),(basln_meur_non_prmtn_amt + basln_meur_any_prmtn_amt)) basln_meur_amt,\\ncoalesce((basln_meur_non_prmtn_amt),(basln_meur_amt - basln_meur_any_prmtn_amt)) basln_meur_non_prmtn_amt,\\ncoalesce((basln_meur_any_prmtn_amt),(basln_meur_amt - basln_meur_non_prmtn_amt)) basln_meur_any_prmtn_amt,\\n\\n \\n\\ncoalesce((sku_per_dspt_u_qty),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) !=0 then num_sku_u_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sku_per_dspt_u_qty,\\n\\n \\n\\ncoalesce((prmtn_itsty_su_pct),(case when sales_msu_qty != 0 then (sales_msu_any_prmtn_qty / sales_msu_qty) * 100 end)) prmtn_itsty_su_pct,\\n\\n \\n\\ncoalesce((dist_effcy_u_qty),(case when numrc_dist_pct != 0 then wgt_dist_pct / numrc_dist_pct end)) dist_effcy_u_qty,\\n\\n \\n\\ncoalesce((price_per_u_lc_amt),(case when sales_mu_qty != 0 then sales_mlc_amt / sales_mu_qty end)) price_per_u_lc_amt,\\n\\n \\n\\ncoalesce((price_per_u_lc_non_prmtn_amt),(case when sales_mu_non_prmtn_qty != 0 then sales_mlc_non_prmtn_amt / sales_mu_non_prmtn_qty end)) price_per_u_lc_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_u_lc_any_prmtn_amt),(case when sales_mu_any_prmtn_qty != 0 then sales_mlc_any_prmtn_amt / sales_mu_any_prmtn_qty end)) price_per_u_lc_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_u_usd_amt),(case when sales_mu_qty != 0 then sales_musd_amt / sales_mu_qty end)) price_per_u_usd_amt,\\n\\n \\n\\ncoalesce((price_per_u_usd_non_prmtn_amt),(case when sales_mu_non_prmtn_qty != 0 then sales_musd_non_prmtn_amt / sales_mu_non_prmtn_qty end)) price_per_u_usd_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_u_usd_any_prmtn_amt),(case when sales_mu_any_prmtn_qty != 0 then sales_musd_any_prmtn_amt / sales_mu_any_prmtn_qty end)) price_per_u_usd_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_u_cus_amt),(case when sales_mu_qty != 0 then sales_mcus_amt / sales_mu_qty end)) price_per_u_cus_amt,\\n\\n \\n\\ncoalesce((price_per_u_cus_non_prmtn_amt),(case when sales_mu_non_prmtn_qty != 0 then sales_mcus_non_prmtn_amt / sales_mu_non_prmtn_qty end)) price_per_u_cus_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_u_cus_any_prmtn_amt),(case when sales_mu_any_prmtn_qty != 0 then sales_mcus_any_prmtn_amt / sales_mu_any_prmtn_qty end)) price_per_u_cus_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_u_eur_amt),(case when sales_mu_qty != 0 then sales_meur_amt / sales_mu_qty end)) price_per_u_eur_amt,\\ncoalesce((price_per_u_eur_non_prmtn_amt),(case when sales_mu_non_prmtn_qty != 0 then sales_meur_non_prmtn_amt / sales_mu_non_prmtn_qty end)) price_per_u_eur_non_prmtn_amt,\\ncoalesce((price_per_u_eur_any_prmtn_amt),(case when sales_mu_any_prmtn_qty != 0 then sales_meur_any_prmtn_amt / sales_mu_any_prmtn_qty end)) price_per_u_eur_any_prmtn_amt,\\ncoalesce((price_per_su_lc_amt),(case when sales_msu_qty != 0 then sales_mlc_amt / sales_msu_qty end)) price_per_su_lc_amt,\\ncoalesce((price_per_su_lc_non_prmtn_amt),(case when sales_msu_non_prmtn_qty != 0 then sales_mlc_non_prmtn_amt / sales_msu_non_prmtn_qty end)) price_per_su_lc_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_lc_any_prmtn_amt),(case when sales_msu_any_prmtn_qty != 0 then sales_mlc_any_prmtn_amt / sales_msu_any_prmtn_qty end)) price_per_su_lc_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_usd_amt),(case when sales_msu_qty != 0 then sales_musd_amt / sales_msu_qty end)) price_per_su_usd_amt,\\n\\n \\n\\ncoalesce((price_per_su_usd_non_prmtn_amt),(case when sales_msu_non_prmtn_qty != 0 then sales_musd_non_prmtn_amt / sales_msu_non_prmtn_qty end)) price_per_su_usd_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_usd_any_prmtn_amt),(case when sales_msu_any_prmtn_qty != 0 then sales_musd_any_prmtn_amt / sales_msu_any_prmtn_qty end)) price_per_su_usd_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_cus_amt),(case when sales_msu_qty != 0 then sales_mcus_amt / sales_msu_qty end)) price_per_su_cus_amt,\\n\\n \\n\\ncoalesce((price_per_su_cus_non_prmtn_amt),(case when sales_msu_non_prmtn_qty != 0 then sales_mcus_non_prmtn_amt / sales_msu_non_prmtn_qty end)) price_per_su_cus_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_cus_any_prmtn_amt),(case when sales_msu_any_prmtn_qty != 0 then sales_mcus_any_prmtn_amt / sales_msu_any_prmtn_qty end))price_per_su_cus_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_eur_amt),(case when sales_msu_qty != 0 then sales_meur_amt / sales_msu_qty end)) price_per_su_eur_amt,\\n\\n \\n\\ncoalesce((price_per_su_eur_non_prmtn_amt),(case when sales_msu_non_prmtn_qty != 0 then sales_meur_non_prmtn_amt / sales_msu_non_prmtn_qty end)) price_per_su_eur_non_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_su_eur_any_prmtn_amt),(case when sales_msu_any_prmtn_qty != 0 then sales_meur_any_prmtn_amt / sales_msu_any_prmtn_qty end)) price_per_su_eur_any_prmtn_amt,\\n\\n \\n\\ncoalesce((price_per_p_lc_amt),(case when sales_mpack_qty != 0 then sales_mlc_amt / sales_mpack_qty end)) price_per_p_lc_amt,\\ncoalesce((price_per_p_usd_amt),(case when sales_mpack_qty != 0 then sales_musd_amt / sales_mpack_qty end)) price_per_p_usd_amt,\\ncoalesce((price_per_p_cus_amt),(case when sales_mpack_qty != 0 then sales_mcus_amt / sales_mpack_qty end)) price_per_p_cus_amt,\\ncoalesce((price_per_p_eur_amt),(case when sales_mpack_qty != 0 then sales_meur_amt / sales_mpack_qty end)) price_per_p_eur_amt,\\ncoalesce((sales_musd_amt),(sales_musd_non_prmtn_amt + sales_musd_any_prmtn_amt)) sales_musd_amt,\\ncoalesce((sales_musd_non_prmtn_amt),(sales_musd_amt - nvl(sales_musd_any_prmtn_amt, 0))) sales_musd_non_prmtn_amt,\\n\\n \\n\\ncoalesce((sales_musd_any_prmtn_amt),(sales_musd_amt - sales_musd_non_prmtn_amt)) sales_musd_any_prmtn_amt,\\ncoalesce((sales_mcus_amt),(sales_mcus_non_prmtn_amt + sales_mcus_any_prmtn_amt)) sales_mcus_amt,\\ncoalesce((sales_mcus_non_prmtn_amt),(sales_mcus_amt - sales_mcus_any_prmtn_amt)) sales_mcus_non_prmtn_amt,\\n\\n \\n\\ncoalesce((sales_mcus_any_prmtn_amt),(sales_mcus_amt - sales_mcus_non_prmtn_amt)) sales_mcus_any_prmtn_amt,\\ncoalesce((sales_meur_amt),(sales_meur_non_prmtn_amt + sales_meur_any_prmtn_amt)) sales_meur_amt,\\ncoalesce((sales_meur_non_prmtn_amt),(sales_meur_amt - nvl(sales_meur_any_prmtn_amt, 0))) sales_meur_non_prmtn_amt,\\n\\n \\n\\ncoalesce((sales_per_dspt_mu_qty),(case when num_store_unvrs_sellg_u_qty != 0 then sales_mu_qty / num_store_unvrs_sellg_u_qty end),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_mu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sales_per_dspt_mu_qty,\\n\\n \\n\\ncoalesce((sales_per_dspt_msu_qty),(case when num_store_unvrs_sellg_u_qty != 0 then sales_msu_qty / num_store_unvrs_sellg_u_qty end),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_msu_qty / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sales_per_dspt_msu_qty,\\n\\n \\n\\ncoalesce((sales_per_dspt_mlc_amt),(case when num_store_unvrs_sellg_u_qty != 0 then sales_mlc_amt / num_store_unvrs_sellg_u_qty end),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_mlc_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sales_per_dspt_mlc_amt,\\n\\n \\n\\ncoalesce((sales_per_dspt_musd_amt),(case when num_store_unvrs_sellg_u_qty != 0 then sales_musd_amt / num_store_unvrs_sellg_u_qty end),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_musd_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sales_per_dspt_musd_amt,\\n\\n \\n\\ncoalesce((sales_per_dspt_mcus_amt),(case when num_store_unvrs_sellg_u_qty != 0 then sales_mcus_amt / num_store_unvrs_sellg_u_qty end),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_mcus_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sales_per_dspt_mcus_amt,\\n\\n \\n\\ncoalesce((sales_per_dspt_meur_amt),(case when num_store_unvrs_sellg_u_qty != 0 then sales_meur_amt / num_store_unvrs_sellg_u_qty end),(case when (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) != 0 then sales_meur_amt / (num_store_unvrs_u_qty * (numrc_dist_pct / 100)) end)) sales_per_dspt_meur_amt  \\nfrom df_fct_crncy ''')\\ndf_fct_crbm2=df_fct_crbm2.drop(\\\"mkt_skid\\\",\\\"prod_skid\\\")\\n\\n\\ndict_all_dfs['df_fct_crbm2'] = {\\\"df_object\\\" :df_fct_crbm2}\\ndf_output_dict['df_fct_crbm2'] = df_fct_crbm2\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fct_crbm2\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    }
  ],
  "graphName": "T1_SFF_Atomic Measure Calculation"
}