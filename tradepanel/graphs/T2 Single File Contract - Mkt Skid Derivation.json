{
  "applicationName": "TRADEPANEL",
  "jsonSpecification": "{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \" Single File Contract Main Chain Overloading\",\r\n    \"description\": \"Overloading parameters in Main Chain\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"SRCE_SYS_ID\": {\r\n            \"title\": \"SRCE_SYS_ID\",\r\n            \"description\": \"SRCE_SYS_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n         \"ISO_CNTRY_CODE\": {\r\n            \"title\": \"ISO_CNTRY_CODE\",\r\n            \"description\": \"ISO_CNTRY_CODE\",\r\n            \"type\": \"string\"\r\n        }\r\n   },\r\n    \"required\": [],\r\n    \"configurable\": [\"SRCE_SYS_ID\", \"ISO_CNTRY_CODE\"]\r\n}",
  "nodes": [
    {
      "operationName": "df_dummy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"manualSchema\": \"true\",\n  \"transformations\": [\n    {\n      \"columnType\": \"string\",\n      \"columnName\": \"test\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "CreateSchema",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] mkt_skid",
      "predecessorName": "df_dummy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport csv\\nimport pandas as pd\\nfrom pyspark.sql.functions import *\\nfrom pyspark.sql.types import IntegerType\\n\\ndf_mkt_skid_lkp = dict_all_dfs['df_mkt_skid_lkp'][\\\"df_object\\\"]\\n\\nsrce_sys_id = [<<SRCE_SYS_ID>>]\\nsrce_sys_id1 = <<SRCE_SYS_ID>>\\nISO_CNTRY_CODE = '<<ISO_CNTRY_CODE>>'\\nkey_panel_mkt = f'\\\"TP_{(srce_sys_id1)}_MKT\\\"'\\nkey_panel_mkt1 = f'\\\"TP_EU_{(ISO_CNTRY_CODE)}\\\"'\\n\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\ndf = spark.read.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_key_domain_data_provider\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").load()\\n\\nfor i in srce_sys_id:\\n  if i != 3:\\n    df_mkt_skid = df.select(\\\"dimension_type_key\\\",\\\"data_provider_key\\\",\\\"object_type_key\\\",\\\"key_domain_data_provider_code\\\").filter(\\\"dimension_type_key == 5 and data_provider_key == 7 and key_domain_data_provider_code like 'TP_%_MKT'\\\")    \\n    df_mkt_skid.createOrReplaceTempView(\\\"mkt_skid\\\")    \\n    df_mkt_skid = spark.sql(f'''select * from mkt_skid where key_domain_data_provider_code = ({key_panel_mkt})\\n                         ''')\\n\\n  else:\\n    df_mkt_skid = df.select(\\\"dimension_type_key\\\",\\\"data_provider_key\\\",\\\"object_type_key\\\",\\\"key_domain_data_provider_code\\\").filter(\\\"dimension_type_key == 5 and data_provider_key == 7 and key_domain_data_provider_code like 'TP_EU_%'\\\")    \\n    df_mkt_skid.createOrReplaceTempView(\\\"mkt_skid\\\")    \\n    df_mkt_skid = spark.sql(f'''select * from mkt_skid where key_domain_data_provider_code = ({key_panel_mkt1})\\n                         ''')\\n\\t\\t\\t\\t\\t\\t \\ndf_mkt_skid = df_mkt_skid.select(\\\"object_type_key\\\").withColumn(\\\"srce_sys_id1\\\", lit(srce_sys_id1).cast(IntegerType()))\\n    \\ndf_mkt_skid_lkp = df_mkt_skid_lkp.join(df_mkt_skid, df_mkt_skid_lkp.srce_sys_id == df_mkt_skid.srce_sys_id1, \\\"Inner\\\").drop(\\\"srce_sys_id1\\\")\\n\\ndict_all_dfs['df_mkt_skid_lkp'] = {\\\"df_object\\\" :df_mkt_skid_lkp}\\ndf_output_dict['df_mkt_skid_lkp'] = df_mkt_skid_lkp\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    }
  ],
  "graphName": "T2 Single File Contract - Mkt Skid Derivation"
}