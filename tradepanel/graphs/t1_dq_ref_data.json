{
  "applicationName": "TURBINE_INTERNAL",
  "nodes": [
    {
      "operationName": "dummy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"manualSchema\": \"true\",\n  \"transformations\": [\n    {\n      \"columnType\": \"string\",\n      \"columnName\": \"test\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "CreateSchema",
      "overridableIndicator": false
    },
    {
      "operationName": "Reference Data - Validations",
      "predecessorName": "dummy",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n#Variables\\n\\ntier1_vendr_id = <<VENDOR_ID>>\\ntier1_fact_type_code = 'TP'\\ncntrt_id = <<CNTRT_ID>>\\ntier1_cntrt_id = cntrt_id\\ncntry_id = '<<ISO_CNTRY_CODE>>'\\ntier1_cntry_id = cntry_id\\ntier1_run_id = <<PROCESS_RUN_KEY>>\\nsrce_sys_id = <<SRCE_SYS_ID>>\\nrun_id = tier1_run_id\\n\\npath = '<@@PATH1@@>'\\n\\n\\n# Dataframes from Prior Steps\\n\\ntier1_measr_mtrlz_tbl = dict_all_dfs['tier1_measr_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_measr_mtrlz_tbl.createOrReplaceTempView('tier1_measr_mtrlz_tbl')\\n\\ntier1_fct_dvm_100_measr = dict_all_dfs['tier1_fct_dvm_100_measr'][\\\"df_object\\\"]\\ntier1_fct_dvm_100_measr.createOrReplaceTempView('tier1_fct_dvm_100_measr')\\n\\ntier1_prod_gav = dict_all_dfs['tier1_prod_gav'][\\\"df_object\\\"]\\ntier1_prod_gav.createOrReplaceTempView('tier1_prod_gav')\\n\\ntier1_time_mtrlz_tbl = dict_all_dfs['tier1_time_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_time_mtrlz_tbl.createOrReplaceTempView('tier1_time_mtrlz_tbl')\\n\\ntier1_fct_conv = dict_all_dfs['tier1_fct_conv'][\\\"df_object\\\"]\\n# Need to get the correct dataframe here.\\ntier1_fct_conv.createOrReplaceTempView('tier1_fct_conv')\\n\\ntier1_mkt_mtrlz_tbl = dict_all_dfs['tier1_mkt_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_mkt_mtrlz_tbl.createOrReplaceTempView('tier1_mkt_mtrlz_tbl')\\n\\ntier1_measr_map_tbl = dict_all_dfs['tier1_measr_map_tbl'][\\\"df_object\\\"]\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map_tbl')\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map')\\n\\ntier1_fct_mtrlz_tbl = dict_all_dfs['tier1_fct_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl.createOrReplaceTempView('tier1_fct_mtrlz_tbl')\\n\\ntier1_fact_mtrlz_tbl = dict_all_dfs['tier1_fact_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fact_mtrlz_tbl.createOrReplaceTempView('tier1_fact_mtrlz_tbl')\\n\\nmm_time_perd_fdim = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_FDIM_VW/')\\nmm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\nmm_time_perd_assoc_type = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_TYPE_VW/')\\nmm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\nmm_time_perd_assoc = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_VW/')\\nmm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\ndf_mm_run_time_perd_plc=spark.read.format('parquet').load(f'/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\n\\ntier1_fct_mtrlz_tbl2 = dict_all_dfs['tier1_fct_mtrlz_tbl2'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl2.createOrReplaceTempView('tier1_fct_mtrlz_tbl2')\\n\\nmm_mkt_xref = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_XREF/')\\nmm_mkt_xref.createOrReplaceTempView('mm_mkt_xref')\\n\\nmm_mkt_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_DIM_VW/')\\nmm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\ndf_mm_run_time_perd_plc=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc_v1')\\n\\nsql_fmt=\\\"\\\"\\\"select  cast(run_id as double) as run_id, time_perd_id,extrn_time_perd_id,rcd_orign_code from mm_run_time_perd_plc_v1\\\"\\\"\\\"\\nmm_run_time_perd_plc_v1=spark.sql(sql_fmt)\\nmm_run_time_perd_plc_v1.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\ndf_time_perd_sdads=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/TIME_PERD_SDADS/')\\ndf_time_perd_sdads.createOrReplaceTempView('mm_time_perd')\\n\\ndf_mm_mkt_skid_cntrt_lkp_vw=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_SKID_LKP/')\\ndf_mm_mkt_skid_cntrt_lkp_vw.createOrReplaceTempView('mm_mkt_skid_cntrt_lkp_vw')\\n\\nmm_run_prod_plc = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PROD_PLC/')\\nmm_run_prod_plc.createOrReplaceTempView('mm_run_prod_plc')\\n\\nmm_prod_sdim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_SDIM_VW/')\\nmm_prod_sdim.createOrReplaceTempView('mm_prod_sdim')\\n\\nmm_prod_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_DIM_VW/')\\nmm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\ntier1_prod_mtrlz_tbl = dict_all_dfs['tier1_prod_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_prod_mtrlz_tbl.createOrReplaceTempView('tier1_prod_mtrlz_tbl')\\n\\nMM_RUN_PRTTN_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PRTTN_PLC/')\\nMM_RUN_PRTTN_PLC.createOrReplaceTempView('MM_RUN_PRTTN_PLC')\\n\\nMM_RUN_MEASR_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_MEASR_PLC/')\\nMM_RUN_MEASR_PLC.createOrReplaceTempView('MM_RUN_MEASR_PLC')\\n\\n# tables from Postgres\\n\\n\\n\\n# mm_measr_id_lkp\\nmm_measr_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_id_lkp\\\")\\nmm_measr_id_lkp.createOrReplaceTempView('mm_measr_id_lkp')\\n\\n# mm_measr_lkp\\nmm_measr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_lkp\\\")\\nmm_measr_lkp.createOrReplaceTempView('mm_measr_lkp')\\n\\n# mm_cntrt_lkp\\nmm_cntrt_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_cntrt_lkp\\\")\\nmm_cntrt_lkp.createOrReplaceTempView('mm_cntrt_lkp')\\n\\n# mm_time_perd_id_lkp\\ndf_mm_time_perd_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_time_perd_id_lkp\\\")\\ndf_mm_time_perd_id_lkp.createOrReplaceTempView('mm_time_perd_id_lkp')\\n\\n# dpf_all_run_vw\\ndpf_all_run_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_process_run_lkp_vw\\\")\\ndpf_all_run_vw.createOrReplaceTempView('dpf_all_run_vw')\\n\\n# mm_categ_strct_attr_assoc_vw\\nmm_categ_strct_attr_assoc_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_categ_strct_attr_assoc_vw\\\")\\nmm_categ_strct_attr_assoc_vw.createOrReplaceTempView('mm_categ_strct_attr_assoc_vw')\\n\\n# MM_PROD_ATTR_VAL_LKP\\nMM_PROD_ATTR_VAL_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_PROD_ATTR_VAL_LKP\\\")\\nMM_PROD_ATTR_VAL_LKP.createOrReplaceTempView('MM_PROD_ATTR_VAL_LKP')\\n\\n# mm_strct_lvl_lkp\\nmm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_strct_lvl_lkp\\\")\\nmm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\n# MM_CNTRT_TIME_PERD_TYPE_ASSOC\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_CNTRT_TIME_PERD_TYPE_ASSOC\\\")\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC.createOrReplaceTempView('MM_CNTRT_TIME_PERD_TYPE_ASSOC')\\n\\n# MM_STRCT_LKP\\nMM_STRCT_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_STRCT_LKP\\\")\\nMM_STRCT_LKP.createOrReplaceTempView('MM_STRCT_LKP')\\n\\n# MM_MEASR_VENDR_FACTR_LKP\\nMM_MEASR_VENDR_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_VENDR_FACTR_LKP\\\")\\nMM_MEASR_VENDR_FACTR_LKP.createOrReplaceTempView('MM_MEASR_VENDR_FACTR_LKP')\\n\\n# MM_MEASR_CNTRT_FACTR_LKP\\nMM_MEASR_CNTRT_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_CNTRT_FACTR_LKP\\\")\\nMM_MEASR_CNTRT_FACTR_LKP.createOrReplaceTempView('MM_MEASR_CNTRT_FACTR_LKP')\\n\\n# WORK\\n\\n# 1.Unknown measure\\n\\nquery1 = f\\\"\\\"\\\" SELECT \\n(1) as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (\\n            SELECT tier1_measr_mtrlz_tbl.LINE_NUM, tier1_measr_mtrlz_tbl.EXTRN_CODE, tier1_measr_mtrlz_tbl.EXTRN_NAME\\n            FROM tier1_measr_mtrlz_tbl\\n            LEFT JOIN mm_measr_id_lkp ON EXTRN_MEASR_ID = EXTRN_CODE AND MM_MEASR_ID_LKP.VENDR_ID = {tier1_vendr_id}\\n\\t\\t\\tand (fact_type_code = '{tier1_fact_type_code}' OR fact_type_code = '[U]')\\n            WHERE mm_measr_id_lkp.EXTRN_MEASR_ID IS NULL \\t\\t\\t\\n\\t\\t    ORDER BY tier1_measr_mtrlz_tbl.LINE_NUM)\\n\\t\\t    WHERE limit 500 \\\"\\\"\\\"\\ndf_unk_msr = spark.sql(query1)\\n\\n# 2.Duplicated measure after mapping\\n\\nquery2 = f\\\"\\\"\\\"SELECT (2) as DQ, line_num line_num, \\nvendor_tag vendor_tag, \\nextrn_name extrn_name, \\nvendor_tag_old vendor_tag_old, \\nMEASR_DESC MEASR_DESC \\nFROM (\\nWITH data_init AS (\\n    SELECT src.line_num, src.extrn_code, src.extrn_name, lkp.EXTRN_MEASR_ID, lkp.MEASR_ID, mlkp.MEASR_DESC, \\n    RANK() over (\\n            partition by lkp.extrn_measr_id\\n            order by lkp.EXTRN_MEASR_ID, cntrt_id nulls last, cntry_id nulls last) as mapng_rank\\n    FROM tier1_measr_mtrlz_tbl src\\n    JOIN mm_measr_id_lkp lkp\\n        ON lkp.EXTRN_MEASR_ID = src.EXTRN_CODE\\n        AND NVL(lkp.CNTRT_ID, {cntrt_id}) = {cntrt_id}\\n        AND NVL(lkp.CNTRY_ID, '{cntry_id}') = '{cntry_id}'\\n    JOIN mm_measr_lkp mlkp\\n        ON lkp.MEASR_ID=mlkp.MEASR_ID AND lkp.fact_type_code=mlkp.fact_type_code\\n        AND VENDR_ID = {tier1_vendr_id}\\n        AND lkp.FACT_TYPE_CODE = '{tier1_fact_type_code}'\\n        AND mlkp.use_ind='Y'\\n),\\ndata_filtr as (\\n    select line_num, extrn_code, extrn_name, extrn_measr_id, measr_id, measr_desc\\n    from data_init\\n    where mapng_rank = 1\\n),\\nmid AS (\\n  SELECT MEASR_id FROM data_filtr\\n  GROUP BY MEASR_id\\n  HAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT (2) as DQ, line_num, extrn_code vendor_tag, extrn_name, EXTRN_MEASR_ID vendor_tag_old, MEASR_DESC FROM data_filtr\\n JOIN mid on data_filtr.MEASR_id = mid.MEASR_id\\n ORDER BY line_num\\n)\\nWHERE limit 500 \\\"\\\"\\\"\\n\\ndf_dup_msr_af_map = spark.sql(query2)\\n\\n# 3.No data: N/A or zero in every input row, for measure\\n\\nquery3 = f\\\"\\\"\\\"SELECT m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19,m20,\\nm21,m22,m23,m24,m25,m26,m27,m28,m29,m30,m31,m32,m33,m34,m35,m36,m37,m38,m39,m40,\\nm41,m42,m43,m44,m45,m46,m47,m48,m49,m50,m51,m52,m53,m54,m55,m56,m57,m58,m59,m60,\\nm61,m62,m63,m64,m65,m66,m67,m68,m69,m70,m71,m72,m73,m74,m75,m76,m77,m78,m79,m80,\\nm81,m82,m83,m84,m85,m86,m87,m88,m89,m90,m91,m92,m93,m94,m95,m96,m97,m98,m99,m100,\\n(3) as DQ,\\nline_num line_num,\\nextrn_code extrn_code,\\nextrn_name extrn_name,\\nuse_ind use_ind \\nFROM (\\n   WITH ordm AS (\\n   SELECT msr.*, mlkp.USE_IND AS USE_IND, ROW_NUMBER() OVER (ORDER BY LINE_NUM) rnm FROM tier1_measr_mtrlz_tbl msr\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id} AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt\\n   ON msr.EXTRN_CODE = MEASR_DEFLT.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '[U]' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt_u\\n   ON msr.EXTRN_CODE = MEASR_DEFLT_U.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID = '{cntry_id}') measr_cntry /* lookup limited to contract related country */\\n   ON msr.EXTRN_CODE = MEASR_CNTRY.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRT_ID = '{cntry_id}') measr_cntrt /* lookup limited to processed contract */\\n   ON msr.EXTRN_CODE = MEASR_CNTRT.EXTRN_MEASR_ID       \\n   JOIN MM_MEASR_LKP mlkp on COALESCE(MEASR_CNTRT.MEASR_ID, MEASR_CNTRY.MEASR_ID, MEASR_DEFLT.MEASR_ID, MEASR_DEFLT_U.MEASR_ID) = mlkp.measr_id\\n   AND mlkp.fact_type_code in ('{tier1_fact_type_code}','[U]')\\n   ),\\n    err AS (\\nSELECT\\n   NVL(MAX(FACT_AMT_1), 0) m1,NVL(MAX(FACT_AMT_2), 0) m2,NVL(MAX(FACT_AMT_3), 0) m3,NVL(MAX(FACT_AMT_4), 0) m4,\\nNVL(MAX(FACT_AMT_5), 0) m5,NVL(MAX(FACT_AMT_6), 0) m6,NVL(MAX(FACT_AMT_7), 0) m7,NVL(MAX(FACT_AMT_8), 0) m8,NVL(MAX(FACT_AMT_9), 0) m9,\\nNVL(MAX(FACT_AMT_10), 0) m10,NVL(MAX(FACT_AMT_11), 0) m11,NVL(MAX(FACT_AMT_12), 0) m12,NVL(MAX(FACT_AMT_13), 0) m13,NVL(MAX(FACT_AMT_14), 0) m14,\\nNVL(MAX(FACT_AMT_15), 0) m15,NVL(MAX(FACT_AMT_16), 0) m16,NVL(MAX(FACT_AMT_17), 0) m17,NVL(MAX(FACT_AMT_18), 0) m18,NVL(MAX(FACT_AMT_19), 0) m19,\\nNVL(MAX(FACT_AMT_20), 0) m20,NVL(MAX(FACT_AMT_21), 0) m21,NVL(MAX(FACT_AMT_22), 0) m22,NVL(MAX(FACT_AMT_23), 0) m23,NVL(MAX(FACT_AMT_24), 0) m24,\\nNVL(MAX(FACT_AMT_25), 0) m25,NVL(MAX(FACT_AMT_26), 0) m26,NVL(MAX(FACT_AMT_27), 0) m27,NVL(MAX(FACT_AMT_28), 0) m28,NVL(MAX(FACT_AMT_29), 0) m29,\\nNVL(MAX(FACT_AMT_30), 0) m30,NVL(MAX(FACT_AMT_31), 0) m31,NVL(MAX(FACT_AMT_32), 0) m32,NVL(MAX(FACT_AMT_33), 0) m33,NVL(MAX(FACT_AMT_34), 0) m34,\\nNVL(MAX(FACT_AMT_35), 0) m35,NVL(MAX(FACT_AMT_36), 0) m36,NVL(MAX(FACT_AMT_37), 0) m37,NVL(MAX(FACT_AMT_38), 0) m38,NVL(MAX(FACT_AMT_39), 0) m39,\\nNVL(MAX(FACT_AMT_40), 0) m40,NVL(MAX(FACT_AMT_41), 0) m41,NVL(MAX(FACT_AMT_42), 0) m42,NVL(MAX(FACT_AMT_43), 0) m43,NVL(MAX(FACT_AMT_44), 0) m44,\\nNVL(MAX(FACT_AMT_45), 0) m45,NVL(MAX(FACT_AMT_46), 0) m46,NVL(MAX(FACT_AMT_47), 0) m47,NVL(MAX(FACT_AMT_48), 0) m48,NVL(MAX(FACT_AMT_49), 0) m49,\\nNVL(MAX(FACT_AMT_50), 0) m50,NVL(MAX(FACT_AMT_51), 0) m51,NVL(MAX(FACT_AMT_52), 0) m52,NVL(MAX(FACT_AMT_53), 0) m53,NVL(MAX(FACT_AMT_54), 0) m54,\\nNVL(MAX(FACT_AMT_55), 0) m55,NVL(MAX(FACT_AMT_56), 0) m56,NVL(MAX(FACT_AMT_57), 0) m57,NVL(MAX(FACT_AMT_58), 0) m58,NVL(MAX(FACT_AMT_59), 0) m59,\\nNVL(MAX(FACT_AMT_60), 0) m60,NVL(MAX(FACT_AMT_61), 0) m61,NVL(MAX(FACT_AMT_62), 0) m62,NVL(MAX(FACT_AMT_63), 0) m63,NVL(MAX(FACT_AMT_64), 0) m64,\\nNVL(MAX(FACT_AMT_65), 0) m65,NVL(MAX(FACT_AMT_66), 0) m66,NVL(MAX(FACT_AMT_67), 0) m67,NVL(MAX(FACT_AMT_68), 0) m68,NVL(MAX(FACT_AMT_69), 0) m69,\\nNVL(MAX(FACT_AMT_70), 0) m70,NVL(MAX(FACT_AMT_71), 0) m71,NVL(MAX(FACT_AMT_72), 0) m72,NVL(MAX(FACT_AMT_73), 0) m73,NVL(MAX(FACT_AMT_74), 0) m74,\\nNVL(MAX(FACT_AMT_75), 0) m75,NVL(MAX(FACT_AMT_76), 0) m76,NVL(MAX(FACT_AMT_77), 0) m77,NVL(MAX(FACT_AMT_78), 0) m78,NVL(MAX(FACT_AMT_79), 0) m79,\\nNVL(MAX(FACT_AMT_80), 0) m80,NVL(MAX(FACT_AMT_81), 0) m81,NVL(MAX(FACT_AMT_82), 0) m82,NVL(MAX(FACT_AMT_83), 0) m83,NVL(MAX(FACT_AMT_84), 0) m84,\\nNVL(MAX(FACT_AMT_85), 0) m85,NVL(MAX(FACT_AMT_86), 0) m86,NVL(MAX(FACT_AMT_87), 0) m87,NVL(MAX(FACT_AMT_88), 0) m88,NVL(MAX(FACT_AMT_89), 0) m89,\\nNVL(MAX(FACT_AMT_90), 0) m90,NVL(MAX(FACT_AMT_91), 0) m91,NVL(MAX(FACT_AMT_92), 0) m92,NVL(MAX(FACT_AMT_93), 0) m93,NVL(MAX(FACT_AMT_94), 0) m94,\\nNVL(MAX(FACT_AMT_95), 0) m95,NVL(MAX(FACT_AMT_96), 0) m96,NVL(MAX(FACT_AMT_97), 0) m97,NVL(MAX(FACT_AMT_98), 0) m98,NVL(MAX(FACT_AMT_99), 0) m99,\\nNVL(MAX(FACT_AMT_100), 0) m100 FROM tier1_fct_dvm_100_measr\\n) \\n            \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=1) ON 1=1 WHERE m1=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=2) ON 1=1 WHERE m2=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=3) ON 1=1 WHERE m3=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=4) ON 1=1 WHERE m4=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=5) ON 1=1 WHERE m5=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=6) ON 1=1 WHERE m6=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=7) ON 1=1 WHERE m7=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=8) ON 1=1 WHERE m8=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=9) ON 1=1 WHERE m9=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=10) ON 1=1 WHERE m10=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=11) ON 1=1 WHERE m11=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=12) ON 1=1 WHERE m12=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=13) ON 1=1 WHERE m13=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=14) ON 1=1 WHERE m14=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=15) ON 1=1 WHERE m15=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=16) ON 1=1 WHERE m16=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=17) ON 1=1 WHERE m17=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=18) ON 1=1 WHERE m18=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=19) ON 1=1 WHERE m19=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=20) ON 1=1 WHERE m20=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\n         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=21) ON 1=1 WHERE m21=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=22) ON 1=1 WHERE m22=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=23) ON 1=1 WHERE m23=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=24) ON 1=1 WHERE m24=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=25) ON 1=1 WHERE m25=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=26) ON 1=1 WHERE m26=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=27) ON 1=1 WHERE m27=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=28) ON 1=1 WHERE m28=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=29) ON 1=1 WHERE m29=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=30) ON 1=1 WHERE m30=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=31) ON 1=1 WHERE m31=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=32) ON 1=1 WHERE m32=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=33) ON 1=1 WHERE m33=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=34) ON 1=1 WHERE m34=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=35) ON 1=1 WHERE m35=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=36) ON 1=1 WHERE m36=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=37) ON 1=1 WHERE m37=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=38) ON 1=1 WHERE m38=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=39) ON 1=1 WHERE m39=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=40) ON 1=1 WHERE m40=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=41) ON 1=1 WHERE m41=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=42) ON 1=1 WHERE m42=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=43) ON 1=1 WHERE m43=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=44) ON 1=1 WHERE m44=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=45) ON 1=1 WHERE m45=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=46) ON 1=1 WHERE m46=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=47) ON 1=1 WHERE m47=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=48) ON 1=1 WHERE m48=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=49) ON 1=1 WHERE m49=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=50) ON 1=1 WHERE m50=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=51) ON 1=1 WHERE m51=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=52) ON 1=1 WHERE m52=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=53) ON 1=1 WHERE m53=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=54) ON 1=1 WHERE m54=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=55) ON 1=1 WHERE m55=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=56) ON 1=1 WHERE m56=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=57) ON 1=1 WHERE m57=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=58) ON 1=1 WHERE m58=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=59) ON 1=1 WHERE m59=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=60) ON 1=1 WHERE m60=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=61) ON 1=1 WHERE m61=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=62) ON 1=1 WHERE m62=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=63) ON 1=1 WHERE m63=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=64) ON 1=1 WHERE m64=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=65) ON 1=1 WHERE m65=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=66) ON 1=1 WHERE m66=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=67) ON 1=1 WHERE m67=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=68) ON 1=1 WHERE m68=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=69) ON 1=1 WHERE m69=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=70) ON 1=1 WHERE m70=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=71) ON 1=1 WHERE m71=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=72) ON 1=1 WHERE m72=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=73) ON 1=1 WHERE m73=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=74) ON 1=1 WHERE m74=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=75) ON 1=1 WHERE m75=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=76) ON 1=1 WHERE m76=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=77) ON 1=1 WHERE m77=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=78) ON 1=1 WHERE m78=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=79) ON 1=1 WHERE m79=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=80) ON 1=1 WHERE m80=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=81) ON 1=1 WHERE m81=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=82) ON 1=1 WHERE m82=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=83) ON 1=1 WHERE m83=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=84) ON 1=1 WHERE m84=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=85) ON 1=1 WHERE m85=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=86) ON 1=1 WHERE m86=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=87) ON 1=1 WHERE m87=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=88) ON 1=1 WHERE m88=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=89) ON 1=1 WHERE m89=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=90) ON 1=1 WHERE m90=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=91) ON 1=1 WHERE m91=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=92) ON 1=1 WHERE m92=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=93) ON 1=1 WHERE m93=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=94) ON 1=1 WHERE m94=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=95) ON 1=1 WHERE m95=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=96) ON 1=1 WHERE m96=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=97) ON 1=1 WHERE m97=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=98) ON 1=1 WHERE m98=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=99) ON 1=1 WHERE m99=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=100) ON 1=1 WHERE m100=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\n)\\nWHERE limit 500 \\n\\\"\\\"\\\"\\ndf_no_data_measr = spark.sql(query3)\\n\\n# 4. Unknown attribute value for product\\n\\nquery4 = f\\\"\\\"\\\"SELECT (4) as DQ, LINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME, \\nATTR_CODE_LIST ATTR_CODE_LIST, \\nLVL LVL, \\nUNKNOWN UNKNOWN \\nFROM (WITH err AS (\\n    SELECT * FROM tier1_prod_gav\\n    WHERE (ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL) \\n    OR (ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL)\\n    OR (ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL)\\n    OR (ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL)\\n    OR (ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL)\\n    OR (ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL)\\n    OR (ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL)\\n    OR (ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL)\\n  --  OR (ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL) <GC> During develeopment, I dont see this column in sample dataframe. It should be corrected at Turbine Graph to populate this column\\n\\t)\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_1 AS LVL, ATTR_CODE_1 AS UNKNOWN FROM err WHERE ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_2 AS LVL, ATTR_CODE_2 AS UNKNOWN FROM err WHERE ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_3 AS LVL, ATTR_CODE_3 AS UNKNOWN FROM err WHERE ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_4 AS LVL, ATTR_CODE_4 AS UNKNOWN FROM err WHERE ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_5 AS LVL, ATTR_CODE_5 AS UNKNOWN FROM err WHERE ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_6 AS LVL, ATTR_CODE_6 AS UNKNOWN FROM err WHERE ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_7 AS LVL, ATTR_CODE_7 AS UNKNOWN FROM err WHERE ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_8 AS LVL, ATTR_CODE_8 AS UNKNOWN FROM err WHERE ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL\\n --   UNION ALL\\n\\t--SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_9 AS LVL, ATTR_CODE_9 AS UNKNOWN FROM err WHERE ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL\\n    )\\t\\n\\tWHERE limit 100\\n--\\tORDER BY LINE_NUM \\\"\\\"\\\" \\nprod_attr_unk = spark.sql(query4).orderBy('LINE_NUM')\\n\\n# 5. The same brand placed under two companies\\n\\nquery5 = f\\\"\\\"\\\"SELECT \\n(5) as DQ,\\nLINE_NUM LINE_NUM, PROD_SKID PROD_SKID, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_PROD_NAME 5EXTRN_PROD_NAME, \\nbrand_name brand_name, company_name company_name,\\nEXTRN_PROD_ATTR_VAL_LIST EXTRN_PROD_ATTR_VAL_LIST \\nFROM (\\n             SELECT DISTINCT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, brand_name, company_name,EXTRN_PROD_ATTR_VAL_LIST FROM (\\n     WITH TB AS (SELECT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, EXTRN_PROD_ATTR_VAL_LIST,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_BRAND_TXT' THEN attr_code_1  \\n      WHEN attr_phys_name_2 = 'PG_BRAND_TXT' THEN attr_code_2\\n      WHEN attr_phys_name_3 = 'PG_BRAND_TXT' THEN attr_code_3\\n      WHEN attr_phys_name_4 = 'PG_BRAND_TXT' THEN attr_code_4\\n      WHEN attr_phys_name_5 = 'PG_BRAND_TXT' THEN attr_code_5\\n      WHEN attr_phys_name_6 = 'PG_BRAND_TXT' THEN attr_code_6\\n      WHEN attr_phys_name_7 = 'PG_BRAND_TXT' THEN attr_code_7\\n      WHEN attr_phys_name_8 = 'PG_BRAND_TXT' THEN attr_code_8\\n    --  WHEN attr_phys_name_9 = 'PG_BRAND_TXT' THEN attr_code_9\\n     END brand,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_BRAND_TXT' THEN attr_val_1  \\n      WHEN attr_phys_name_2 = 'PG_BRAND_TXT' THEN attr_val_2\\n      WHEN attr_phys_name_3 = 'PG_BRAND_TXT' THEN attr_val_3\\n      WHEN attr_phys_name_4 = 'PG_BRAND_TXT' THEN attr_val_4\\n      WHEN attr_phys_name_5 = 'PG_BRAND_TXT' THEN attr_val_5\\n      WHEN attr_phys_name_6 = 'PG_BRAND_TXT' THEN attr_val_6\\n      WHEN attr_phys_name_7 = 'PG_BRAND_TXT' THEN attr_val_7\\n      WHEN attr_phys_name_8 = 'PG_BRAND_TXT' THEN attr_val_8\\n    --  WHEN attr_phys_name_9 = 'PG_BRAND_TXT' THEN attr_val_9\\n     END brand_name,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_MFGR_TXT' THEN attr_code_1  \\n      WHEN attr_phys_name_2 = 'PG_MFGR_TXT' THEN attr_code_2\\n      WHEN attr_phys_name_3 = 'PG_MFGR_TXT' THEN attr_code_3\\n      WHEN attr_phys_name_4 = 'PG_MFGR_TXT' THEN attr_code_4\\n      WHEN attr_phys_name_5 = 'PG_MFGR_TXT' THEN attr_code_5\\n      WHEN attr_phys_name_6 = 'PG_MFGR_TXT' THEN attr_code_6\\n      WHEN attr_phys_name_7 = 'PG_MFGR_TXT' THEN attr_code_7\\n      WHEN attr_phys_name_8 = 'PG_MFGR_TXT' THEN attr_code_8\\n    --  WHEN attr_phys_name_9 = 'PG_MFGR_TXT' THEN attr_code_9\\n     END company,\\n\\t CASE \\n      WHEN attr_phys_name_1 = 'PG_MFGR_TXT' THEN attr_val_1  \\n      WHEN attr_phys_name_2 = 'PG_MFGR_TXT' THEN attr_val_2\\n      WHEN attr_phys_name_3 = 'PG_MFGR_TXT' THEN attr_val_3\\n      WHEN attr_phys_name_4 = 'PG_MFGR_TXT' THEN attr_val_4\\n      WHEN attr_phys_name_5 = 'PG_MFGR_TXT' THEN attr_val_5\\n      WHEN attr_phys_name_6 = 'PG_MFGR_TXT' THEN attr_val_6\\n      WHEN attr_phys_name_7 = 'PG_MFGR_TXT' THEN attr_val_7\\n      WHEN attr_phys_name_8 = 'PG_MFGR_TXT' THEN attr_val_8\\n    --  WHEN attr_phys_name_9 = 'PG_MFGR_TXT' THEN attr_val_9\\n     END company_name\\n      FROM tier1_prod_gav WHERE PROD_LVL_NAME ='BRAND')\\n\\t SELECT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, brand, company, brand_name, company_name, EXTRN_PROD_ATTR_VAL_LIST, approx_count_distinct(company) OVER (PARTITION BY brand) NR\\n     FROM TB\\n     ) WHERE NR>1 AND brand IS NOT NULL AND company IS NOT NULL\\n\\t )\\nWHERE limit 100 \\n--ORDER BY brand_name\\\"\\\"\\\"\\n\\nprod_attr_brand_mlt = spark.sql(query5).orderBy('brand_name')\\n\\n# 6. No data: N/A or zero in every input row, for time period\\n\\nquery6 = f\\\"\\\"\\\"SELECT \\n(6) as DQ,\\nLINE_NUM dLINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT TIME_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY TIME_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_time_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.TIME_EXTRN_CODE \\nWHERE B.TIME_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\nWHERE limit 500\\\"\\\"\\\"\\n\\nfact_time_perd_miss = spark.sql(query6)\\n\\n# 7. No data: N/A or zero in every input row, for market\\nquery7 = f\\\"\\\"\\\"SELECT \\n(7) as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT MKT_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY MKT_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_mkt_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.MKT_EXTRN_CODE \\nWHERE B.MKT_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\nWHERE limit 500 \\\"\\\"\\\"\\n\\nfact_mkt_miss = spark.sql(query7)\\n\\n# Create view mm_time_perd_assoc_tier1_vw\\n\\nquery = f\\\"\\\"\\\"with CAL_TYPE_2 as (\\nSELECT   2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_b,\\n          tb.time_perd_start_date time_perd_start_date_b,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_a,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          ta.time_perd_end_date time_perd_end_date_a,\\n          ta.time_perd_start_date time_perd_start_date_a\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n     WHERE assoc.CAL_TYPE_ID=2),\\nBIMTH_2_MTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_B TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_A TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          tb.time_perd_end_date time_perd_end_date_A,\\n          tb.time_perd_start_date time_perd_start_date_A\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\nMTH_2_BIMTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A ,\\n          assoc.TIME_PERD_ID_B ,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_A,\\n          ta.time_perd_end_date time_perd_end_date_A,\\n          ta.time_perd_start_date time_perd_start_date_A,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_B,\\n          tb.time_perd_start_date time_perd_start_date_B\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\n\\nBW_2_EB AS (SELECT  2 CAL_TYPE_ID,\\n          ta.EVEN_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.EVEN_BIMTH_TIME_PERD_CLASS_COD TIME_PERD_CLASS_CODE_A,\\n          ta.EVEN_BIMTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.EVEN_BIMTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.EVEN_BIMTH_START_DATE TIME_PERD_START_DATE_A\\n     FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='EB'\\n    ),\\n\\nBW_2_MTH AS (SELECT  2 CAL_TYPE_ID,\\n          ta.ODD_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.MTH_TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.MTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.MTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.MTH_START_DATE TIME_PERD_START_DATE_A\\n               FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='MTH'\\n    )\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM CAL_TYPE_2\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BIMTH_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_EB\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID, CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM MTH_2_BIMTH\\\"\\\"\\\"\\ndf_mm_time_perd_assoc_tier1_vw= spark.sql(query)\\ndf_mm_time_perd_assoc_tier1_vw.createOrReplaceTempView('mm_time_perd_assoc_tier1_vw')\\n\\n##'Time period of weeks not properly generated' \\nsql_time_period_wks_nt_gen=f\\\"\\\"\\\"\\nselect (9) as DQ, * from (WITH wk_mth_assoc AS (SELECT * FROM mm_time_perd_assoc_tier1_vw WHERE time_perd_type_code_B = 'WKMS' AND TIME_PERD_type_CODE_A = 'MH' AND cal_type_id = 2  AND time_perd_assoc_type_id = 1),\\nwk_loaded AS (SELECT tp.time_perd_end_date mm_time_perd_end_date FROM tier1_time_mtrlz_tbl stime  JOIN mm_time_perd_id_lkp\\nON mm_time_perd_id_lkp.EXTRN_TIME_PERD_ID =stime.EXTRN_CODE AND mm_time_perd_id_lkp.VENDR_ID ='{tier1_vendr_id}'\\nJOIN mm_time_perd_fdim tp ON tp.TIME_PERD_ID = mm_time_perd_id_lkp.time_perd_id AND tp.time_perd_class_code = 'WK'),\\nwk_prev_all AS(SELECT time_perd_end_date mm_time_perd_end_date FROM \\n(SELECT DISTINCT tp.time_perd_end_date FROM mm_run_time_perd_plc plc JOIN dpf_all_run_vw run ON \\nrun.run_id = plc.run_id JOIN mm_cntrt_lkp cntrt ON cntrt.prcsg_id = run.run_id\\nJOIN mm_time_perd_fdim tp ON tp.time_perd_id = plc.time_perd_id WHERE cntrt.cntrt_id = '{cntrt_id}'\\nAND run.process_status ='completed' \\nAND run.end_date_time <= current_timestamp())),\\nwk_new AS(SELECT mm_time_perd_end_date, 'new' AS STATUS FROM wk_loaded MINUS SELECT mm_time_perd_end_date,'new' AS STATUS FROM wk_prev_all),\\nwk_redelivered AS (SELECT mm_time_perd_end_date mm_time_perd_end_date, 'redelivered' AS STATUS FROM wk_loaded INTERSECT\\nSELECT mm_time_perd_end_date,'redelivered' AS STATUS FROM wk_prev_all),\\nwk_existing AS(SELECT mm_time_perd_end_date, 'existing' AS STATUS FROM wk_prev_all MINUS SELECT mm_time_perd_end_date,'existing' AS STATUS FROM wk_loaded),\\nwk_all AS (SELECT * FROM wk_new UNION ALL SELECT * FROM wk_redelivered UNION ALL SELECT * FROM wk_existing),\\nmth_loaded AS (SELECT DISTINCT wk_mth_assoc.time_perd_end_date_a as time_perd_end_date,wk_mth_assoc.time_perd_id_a as time_perd_id ,tp.time_perd_name FROM wk_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_end_date_b =wk_loaded.mm_time_perd_end_date JOIN mm_time_perd_fdim tp ON tp.time_perd_id = wk_mth_assoc.time_perd_id_a),\\n tbl AS (SELECT time_perd.time_perd_type_name wk_name, time_perd_end_date TIME_PERD_END,cast((TO_DATE(time_perd_end_date),'DD-MON-YYYY')as string) as TIME_PERD_END_DATE, mth_loaded.time_perd_name mth_name, COUNT(time_perd.time_perd_type_name) OVER (PARTITION BY mth_loaded.time_perd_name) cnt,\\nCASE WHEN wk_all.mm_time_perd_end_date IS NULL THEN 'missing'ELSE STATUS END AS STATUS_ALL FROM mth_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_id_a = mth_loaded.time_perd_id LEFT OUTER JOIN wk_all ON wk_all.mm_time_perd_end_date =wk_mth_assoc.time_perd_end_date_b JOIN mm_time_perd time_perd ON wk_mth_assoc.time_perd_id_b = time_perd.time_perd_id)\\nSELECT *, 'missing','new','recalculated','existing' FROM tbl WHERE  STATUS_ALL = 'missing' and STATUS_ALL = 'new' and STATUS_ALL = 'redelivered' and STATUS_ALL = 'existing'  and MTH_NAME = tbl.MTH_NAME limit 1)where limit 501\\\"\\\"\\\"\\ndf_time_period_wks_nt_gen=spark.sql(sql_time_period_wks_nt_gen)\\n\\n##Duplicated time period after mapping\\nsql_dup_time_period_aftr_mapng=f\\\"\\\"\\\"WITH data AS(SELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id ='{srce_sys_id}'\\nAND xref.cntrt_id = '{cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id ='{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = '{srce_sys_id}'\\nAND xref.cntrt_id = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM  tier1_mkt_mtrlz_tbl src  \\nJOIN mm_mkt_skid_cntrt_lkp_vw lkp\\nON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\nAND lkp.CNTRT_ID = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'TP'),\\nskid AS (SELECT (10) as DQ, MKT_skid as mkt_skid FROM data GROUP BY MKT_skid HAVING COUNT(DISTINCT line_num)>1)\\nselect * from skid limit 1\\\"\\\"\\\"\\ndf_dup_time_period_aftr_mapng=spark.sql(sql_dup_time_period_aftr_mapng)\\n\\n\\n####Missing/delivered areas\\nsql_msng_delv_areas=f\\\"\\\"\\\"\\nwith temp1 as (select (11) as DQ, c.line_num as line_num,a.extrn_mkt_id,a.extrn_mkt_name,cast(b.mkt_skid as integer) as mkt_skid,b.mkt_name,\\nnvl2(b.mkt_skid, 'n', 'y') as missing_ind,nvl2(b.mkt_skid, 'n', 'y') as new_ind ,\\nrlike(d.cntrt_spec, '/ContractSpecification/CountryName') AS total_country\\nfrom mm_mkt_xref a join mm_mkt_dim b on a.srce_sys_id==b.srce_sys_id \\njoin tier1_mkt_mtrlz_tbl c on a.srce_sys_id=c.srce_sys_id\\njoin mm_cntrt_lkp d on a.srce_sys_id=d.srce_sys_id where d.cntrt_id ='{cntrt_id}'\\nlimit 501\\n)\\nselect *,missing_ind as last_run_status ,new_ind as last_period_status from temp1\\\"\\\"\\\"\\ndf_msng_delv_areas=spark.sql(sql_msng_delv_areas)\\n\\n# DQ12 - Unknown time period\\n\\nquery12 = f\\\"\\\"\\\"SELECT\\n(12) as DQ,\\nMM_TIME_PERD_ID as MM_TIME_PERD_ID,    \\nLINE_NUM as LINE_NUM,\\nEXTRN_CODE as EXTRN_CODE,\\nEXTRN_NAME as EXTRN_NAME\\nFROM (\\n        SELECT * FROM tier1_time_mtrlz_tbl src \\n        LEFT JOIN  MM_TIME_PERD_ID_LKP map ON src.EXTRN_CODE = map.EXTRN_TIME_PERD_ID AND map.VENDR_ID = {tier1_vendr_id}\\n        WHERE VENDR_ID IS NULL\\n        )\\n           WHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_time_perd_id_map_unk = spark.sql(query12)\\n\\n# DQ13 - Unknown market\\n\\nquery13 = f\\\"\\\"\\\"SELECT * FROM (SELECT \\n(13) DQ,\\nMN.LINE_NUM LINE_NUM,\\nMN.EXTRN_CODE as EXTRN_CODE,\\nMN.EXTRN_NAME as EXTRN_NAME\\nFROM tier1_mkt_mtrlz_tbl MN\\n    LEFT JOIN MM_MKT_XREF \\n      ON MM_MKT_XREF.EXTRN_MKT_ID = MN.EXTRN_CODE\\n      AND MM_MKT_XREF.CNTRT_ID = {cntrt_id}\\n      AND MM_MKT_XREF.SRCE_SYS_ID = {srce_sys_id}\\n    LEFT JOIN MM_MKT_SKID_CNTRT_LKP_VW  \\n      ON MM_MKT_SKID_CNTRT_LKP_VW.EXTRN_MKT_ID = MN.EXTRN_CODE   \\n      AND MM_MKT_SKID_CNTRT_LKP_VW.CNTRT_ID = {cntrt_id} \\n    WHERE MM_MKT_XREF.MKT_SKID IS NULL AND MM_MKT_SKID_CNTRT_LKP_VW.MKT_SKID IS NULL\\n\\tORDER BY LINE_NUM)\\n\\tWHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_mkt_id_map_unk = spark.sql(query13)\\n\\n#DQ14 - Duplicated market after mapping\\n\\nquery14 = f\\\"\\\"\\\"SELECT \\n(14) as DQ,\\nline_num as line_num, \\nvendor_tag as vendor_tag, \\nMKT_codes_new as MKT_codes_new, \\nvendor_tag_old as vendor_tag_old \\nFROM (\\nWITH data AS (\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM tier1_mkt_mtrlz_tbl src   \\t\\t\\t\\t\\n\\t\\t\\t\\tJOIN MM_MKT_SKID_CNTRT_LKP_VW lkp\\n                ON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\n                AND lkp.CNTRT_ID = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'TP'\\n),\\nskid AS (\\nSELECT MKT_skid FROM data \\nGROUP BY MKT_skid\\nHAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT line_num, extrn_code vendor_tag, EXTRN_MKT_ATTR_VAL_LIST MKT_codes_new, EXTRN_MKT_ID vendor_tag_old FROM data\\nJOIN skid on data.MKT_skid = skid.MKT_skid\\nORDER BY line_num)\\n\\tWHERE LIMIT 500 \\\"\\\"\\\"\\n \\ntier1_mkt_map_dup = spark.sql(query14)\\n\\n\\n# DQ16 - Missing/delivered hierarchies\\n\\nquery16 = f\\\"\\\"\\\"WITH prod_dlvr\\n     AS (SELECT src.EXTRN_PROD_ID,\\n                COALESCE(strct.STRCT_CODE, src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0) AS STRCT_CODE,\\n                strct.STRCT_NAME\\n         FROM   tier1_prod_mtrlz_tbl src\\n                LEFT OUTER JOIN MM_STRCT_LKP strct\\n                  ON src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0 = strct.STRCT_CODE),\\n\\n     prod_hier_dlvr\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   PROD_DLVR\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     miss_prod_hier_fct_dlvr\\n     AS (SELECT /*+ materialize */ STRCT_CODE\\n         FROM (SELECT STRCT_CODE FROM prod_hier_dlvr\\n               MINUS\\n               SELECT DISTINCT prod.STRCT_CODE\\n               FROM   PROD_DLVR prod\\n                      JOIN tier1_fact_mtrlz_tbl fct\\n                        ON prod.EXTRN_PROD_ID = fct.PROD_EXTRN_CODE)),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id} )\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id} )\\n            AND RUN_LATEST=1),\\n\\n     prod_last_run\\n     AS (SELECT plc.EXTRN_PROD_ID,\\n                STRCT_CODE,\\n                STRCT_NAME\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_PROD_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   LAST_RUN)) plc\\n                JOIN MM_PROD_DIM dim\\n                  ON plc.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND plc.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                     AND plc.PROD_SKID = dim.PROD_SKID\\n                     AND dim.CNTRT_ID = {cntrt_id}\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_plc_last_run\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   prod_last_run\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     last_run_prttn\\n     AS (SELECT RUN_ID,\\n                MM_TIME_PERD_END_DATE AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM   MM_RUN_PRTTN_PLC\\n         WHERE  RUN_ID = (SELECT RUN_ID\\n                          FROM   last_run)\\n            AND TIME_PERD_CLASS_CODE = 'MTH'\\n            AND CNTRT_ID = {cntrt_id}),\\n\\n     fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_run_prttn tp\\n                  ON fct.RUN_ID = tp.RUN_ID\\n                     AND fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   FCT_LAST_RUN fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_last_run\\n     AS (SELECT *\\n         FROM   prod_hier_plc_last_run\\n         UNION ALL\\n         SELECT *\\n         FROM   prod_hier_fct_last_run\\n         WHERE  (SELECT COUNT(*)\\n                 FROM   prod_hier_plc_last_run) = 0),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WK%' THEN\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = 'MTH'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_period_prttn tp\\n                  ON fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   fct_last_period fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_dlvr_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_last_run.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_last_run.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_last_run.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_last_run\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_last_run.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_fct_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_fct_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_fct_last_period\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr_vs_last_run.STRCT_CODE, prod_hier_dlvr_vs_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr_vs_last_run.STRCT_NAME, prod_hier_dlvr_vs_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   prod_hier_dlvr_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   prod_hier_dlvr_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   prod_hier_dlvr_vs_last_run\\n                FULL OUTER JOIN prod_hier_dlvr_vs_last_period\\n                             ON prod_hier_dlvr_vs_last_run.STRCT_CODE = prod_hier_dlvr_vs_last_period.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_run\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_run.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_run\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_run.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_period\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_period\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     ret\\n     AS (SELECT tmp.STRCT_CODE,\\n                tmp.STRCT_NAME,\\n                CASE\\n                  WHEN LAST_RUN_MISS_VAL = 'Y'\\n                       AND LAST_RUN_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_RUN_STATUS\\n                END\\n                AS LAST_RUN_STATUS,\\n                CASE\\n                  WHEN LAST_PERIOD_MISS_VAL = 'Y'\\n                       AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_PERIOD_STATUS\\n                END\\n                AS LAST_PERIOD_STATUS,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.STRCT_CODE)\\n                AS RANK_NUMBER\\n         FROM   (SELECT COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_dlvr_vs_all_cases.STRCT_CODE)\\n                        AS STRCT_CODE,\\n                        COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_dlvr_vs_all_cases.STRCT_NAME)\\n                        AS STRCT_NAME,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS,\\n                        miss_prod_hier_vs_last_run.MISSING_IND AS LAST_RUN_MISS_VAL,\\n                        miss_prod_hier_vs_last_period.MISSING_IND AS LAST_PERIOD_MISS_VAL\\n                 FROM   prod_hier_dlvr\\n                        FULL OUTER JOIN prod_hier_dlvr_vs_all_cases\\n                                     ON prod_hier_dlvr.STRCT_CODE = prod_hier_dlvr_vs_all_cases.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_run\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_run.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_period\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_period.STRCT_CODE) tmp)\\n\\nSELECT --ROWNUM AS LINE_NUMBER,\\n       (16) as DQ,\\n       STRCT_CODE STRCT_CODE,\\n       STRCT_NAME STRCT_NAME,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT STRCT_CODE,\\n               STRCT_NAME,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  STRCT_CODE,\\n                  RANK_NUMBER)\\\"\\\"\\\"\\n\\ntier1_miss_dlvrd_hier = spark.sql(query16)\\n\\n\\n# DQ17 - Missing/delivered measures\\n\\nquery17 = f\\\"\\\"\\\"WITH measr_delivery\\n     AS (SELECT src.EXTRN_CODE AS EXTRN_MEASR_ID,\\n                src.EXTRN_NAME AS EXTRN_MEASR_NAME,\\n                ml.MEASR_ID,\\n                ml.MEASR_NAME,\\n                COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   tier1_measr_map src\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON src.MEASR_ID = ml.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id})\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id})\\n            AND RUN_LATEST=1),\\n\\n     measr_last_run\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   last_run)\\n                 AND    CALC_IND = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WK%' THEN\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = 'MTH'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     last_period_runs\\n     AS (SELECT DISTINCT RUN_ID\\n         FROM   MM_RUN_PRTTN_PLC plc\\n                JOIN LAST_PERIOD_PRTTN prttn\\n                  ON plc.CNTRT_ID = prttn.CNTRT_ID\\n                     AND plc.SRCE_SYS_ID = prttn.SRCE_SYS_ID\\n                     AND plc.MM_TIME_PERD_END_DATE = prttn.TIME_PERD_END_DATE\\n                     AND plc.FACT_TYPE_CODE = prttn.FACT_TYPE_CODE\\n                     AND plc.PROD_PRTTN_CODE = prttn.PROD_PRTTN_CODE),\\n\\n     measr_last_period\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  RUN_ID in (SELECT RUN_ID\\n                                  FROM   last_period_runs)\\n                 AND    CALC_IND = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                     AND ml.USE_IND = 'Y'\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     measr_delivery_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_run.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_run.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_run.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_run.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_run.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_run.EXTRN_MEASR_ID, 'N', NVL2(measr_last_run.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_run\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_run.EXTRN_MEASR_ID\\n                                OR (measr_last_run.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_run.MEASR_ID)),\\n\\n     measr_delivery_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_period.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_period.EXTRN_MEASR_ID, 'N', NVL2(measr_last_period.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_period\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_period.EXTRN_MEASR_ID\\n                                OR (measr_last_period.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_period.MEASR_ID)),\\n\\n     measr_delivery_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_ID, measr_delivery_vs_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_NAME, measr_delivery_vs_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_ID, measr_delivery_vs_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_NAME, measr_delivery_vs_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.FACTR, measr_delivery_vs_last_period.FACTR) AS FACTR,\\n                                   measr_delivery_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   measr_delivery_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   measr_delivery_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   measr_delivery_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   measr_delivery_vs_last_run\\n                FULL OUTER JOIN measr_delivery_vs_last_period\\n                             ON measr_delivery_vs_last_run.EXTRN_MEASR_ID = measr_delivery_vs_last_period.EXTRN_MEASR_ID),\\n\\n     ret\\n     AS (SELECT tmp.MEASR_ID,\\n                tmp.MEASR_NAME,\\n                tmp.EXTRN_MEASR_ID,\\n                tmp.EXTRN_MEASR_NAME,\\n                LAST_RUN_STATUS,\\n                LAST_PERIOD_STATUS,\\n                MULTIPLICATOR,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.EXTRN_MEASR_NAME)\\n                AS RANK_NUMBER\\n         FROM   (SELECT\\n                        --COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_delivery_vs_all_cases.EXTRN_MEASR_ID)\\n                        COALESCE(measr_delivery_vs_all_cases.EXTRN_MEASR_ID, measr_delivery.EXTRN_MEASR_ID) -- LGrigorovicius (20210723) : order changed so previously processed measures tags would be visible in validation report\\n\\n                        AS EXTRN_MEASR_ID,\\n                        COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_delivery_vs_all_cases.EXTRN_MEASR_NAME)\\n\\n                        AS EXTRN_MEASR_NAME,\\n                        COALESCE(measr_delivery.MEASR_ID, measr_delivery_vs_all_cases.MEASR_ID)\\n\\n                        AS MEASR_ID,\\n                        COALESCE(measr_delivery.MEASR_NAME, measr_delivery_vs_all_cases.MEASR_NAME)\\n\\n                        AS MEASR_NAME,\\n                        COALESCE(measr_delivery.FACTR, measr_delivery_vs_all_cases.FACTR)\\n\\n                        AS MULTIPLICATOR,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS\\n                 FROM   measr_delivery\\n                        FULL OUTER JOIN measr_delivery_vs_all_cases\\n                                     ON measr_delivery.MEASR_ID = measr_delivery_vs_all_cases.MEASR_ID) tmp)\\n\\nSELECT -- ROWNUM AS LINE_NUMBER,\\n(17) as DQ,\\n       MEASR_ID MEASR_ID,\\n       MEASR_NAME MEASR_NAME,\\n       EXTRN_MEASR_ID EXTRN_MEASR_ID,\\n       EXTRN_MEASR_NAME EXTRN_MEASR_NAME,\\n       MULTIPLICATOR MULTIPLICATOR,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT MEASR_ID,\\n               MEASR_NAME,\\n               EXTRN_MEASR_ID,\\n               EXTRN_MEASR_NAME,\\n               MULTIPLICATOR,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  CASE\\n                    WHEN LAST_RUN_STATUS = 'MISSING' OR LAST_PERIOD_STATUS = 'MISSING' THEN 1\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 2\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'NEW' THEN 3\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 4\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 5\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 6\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'NEW' THEN 7\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 8\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'NEW' THEN 9\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 10\\n                    ELSE 11\\n                  END,\\n                  RANK_NUMBER)\\n\\\"\\\"\\\"\\ntier1_miss_dlvrd_measr = spark.sql(query17)\\n\\n# Combine\\nfrom pyspark.sql.functions import lit, row_number, monotonically_increasing_id, col, when\\nfrom pyspark.sql.window import Window\\nfrom pyspark.sql.types import *\\n\\ncolumns = StructType([StructField('row_id', IntegerType(), True)])\\ndf_empty = spark.createDataFrame(data=[], schema=columns)\\n\\ndq1 = df_unk_msr\\ndq2 = df_dup_msr_af_map\\ndq3 = df_no_data_measr\\ndq4 = prod_attr_unk\\ndq5 = prod_attr_brand_mlt\\ndq6 = fact_time_perd_miss\\ndq7 = fact_mkt_miss\\ndq9 = df_time_period_wks_nt_gen\\ndq10 = df_dup_time_period_aftr_mapng\\ndq11 = df_msng_delv_areas\\ndq12 = tier1_time_perd_id_map_unk\\ndq13 = tier1_mkt_id_map_unk\\ndq14 = tier1_mkt_map_dup\\ndq16 = tier1_miss_dlvrd_hier\\ndq17 = tier1_miss_dlvrd_measr\\n\\ndf_combine = dq1.unionByName(dq2, True).unionByName(dq3, True).unionByName(dq4, True).unionByName(dq5, True).unionByName(dq6, True).unionByName(dq7, True).unionByName(dq9, True).unionByName(dq10, True).unionByName(dq11, True).unionByName(dq12, True).unionByName(dq13, True).unionByName(dq14, True).unionByName(dq16, True).unionByName(dq17, True)\\n\\ndata = []\\n\\ndq1_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 1\\\", '', 'false', 'Unknown measure', 100 )\\ndata.append(dq1_val)\\ndq2_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 2\\\", '', 'false', 'Duplicated measure after mapping', 100 )\\ndata.append(dq2_val)\\ndq3_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 3\\\", '', 'false', 'No data- NA or zero in every input row, for measure', 100 )\\ndata.append(dq3_val)\\ndq4_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 4\\\", '', 'false', 'Unknown attribute value for product', 100 )\\ndata.append(dq4_val)\\ndq5_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 5\\\", '', 'false', 'The same brand placed under two companies', 100 )\\ndata.append(dq5_val)\\ndq6_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 6\\\", '', 'false', 'No data: N/A or zero in every input row, for time period', 100 )\\ndata.append(dq6_val)\\ndq7_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 7\\\", '', 'false', 'No data: N/A or zero in every input row, for market', 100 )\\ndata.append(dq7_val)\\n\\ndq9_val=('DQ','SQL Validation KPI', \\\"DQ <> 9\\\", '', 'false', 'Time period of weeks not properly generated' , 100 )\\ndata.append(dq9_val)\\ndq10_val=('DQ','SQL Validation KPI', \\\"DQ <> 10\\\", '', 'false', 'Duplicated time period after mapping', 100 )\\ndata.append(dq10_val)\\ndq11_val=('DQ','SQL Validation KPI', \\\"DQ <> 11\\\", '', 'false', 'Missing/delivered areas', 100 )\\ndata.append(dq11_val)\\ndq12_val=('DQ','SQL Validation KPI', \\\"DQ <> 12\\\", '', 'false', 'Unknown time period', 100 )\\ndata.append(dq12_val)\\ndq13_val=('DQ','SQL Validation KPI', \\\"DQ <> 13\\\", '', 'false', 'Unknown market', 100 )\\ndata.append(dq13_val)\\ndq14_val=('DQ','SQL Validation KPI', \\\"DQ <> 14\\\", '', 'false', 'Duplicated market after mapping', 100 )\\ndata.append(dq14_val)\\ndq16_val=('DQ','SQL Validation KPI', \\\"DQ <> 16\\\", '', 'false', 'Missing/delivered hierarchies', 100 )\\ndata.append(dq16_val)\\ndq17_val=('DQ','SQL Validation KPI', \\\"DQ <> 17\\\", '', 'false', 'Missing/delivered measures', 100 )\\ndata.append(dq17_val)\\n\\n#Prepare KPI\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\nschema_for_kpi = StructType([ \\n    StructField(\\\"column\\\",StringType(),True),\\n    StructField(\\\"kpi_type\\\",StringType(),True),\\n    StructField(\\\"param_1\\\",StringType(),True),\\n    StructField(\\\"param_2\\\",StringType(),True),\\n    StructField(\\\"fail_on_error\\\",StringType(),True),\\n    StructField(\\\"check_description\\\",StringType(),True),\\n    StructField(\\\"target\\\",StringType(),True)\\n  ])\\n\\ndf_ref = spark.createDataFrame(data, schema_for_kpi)\\n\\n\\ndict_all_dfs['df_ref'] = {\\\"df_object\\\" :df_ref}\\ndf_output_dict['df_ref'] = df_ref\\n\\ndict_all_dfs['df_combine_ref'] = {\\\"df_object\\\" :df_combine}\\ndf_output_dict['df_combine_ref'] = df_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"tier1_measr_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_dvm_100_measr\"\n    },\n    {\n      \"name\": \"tier1_prod_gav\"\n    },\n    {\n      \"name\": \"tier1_time_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_conv\"\n    },\n    {\n      \"name\": \"tier1_mkt_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_measr_map_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fact_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl2\"\n    },\n    {\n      \"name\": \"tier1_prod_mtrlz_tbl\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_ref\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_combine_ref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Reference Data - Validations - v1",
      "predecessorName": "Reference Data - Validations",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n#Variables\\n\\ntier1_vendr_id = <<VENDOR_ID>>\\ntier1_fact_type_code = 'TP'\\ncntrt_id = <<CNTRT_ID>>\\ntier1_cntrt_id = cntrt_id\\ncntry_id = '<<ISO_CNTRY_CODE>>'\\ntier1_cntry_id = cntry_id\\ntier1_run_id = <<PROCESS_RUN_KEY>>\\nsrce_sys_id = <<SRCE_SYS_ID>>\\nrun_id = tier1_run_id\\n\\npath = '<@@PATH1@@>'\\n\\n\\n# Dataframes from Prior Steps\\n\\ntier1_measr_mtrlz_tbl = dict_all_dfs['tier1_measr_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_measr_mtrlz_tbl.createOrReplaceTempView('tier1_measr_mtrlz_tbl')\\n\\ntier1_fct_dvm_100_measr = dict_all_dfs['tier1_fct_dvm_100_measr'][\\\"df_object\\\"]\\ntier1_fct_dvm_100_measr.createOrReplaceTempView('tier1_fct_dvm_100_measr')\\n\\ntier1_prod_gav = dict_all_dfs['tier1_prod_gav'][\\\"df_object\\\"]\\ntier1_prod_gav.createOrReplaceTempView('tier1_prod_gav')\\n\\ntier1_time_mtrlz_tbl = dict_all_dfs['tier1_time_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_time_mtrlz_tbl.createOrReplaceTempView('tier1_time_mtrlz_tbl')\\n\\ntier1_fct_conv = dict_all_dfs['tier1_fct_conv'][\\\"df_object\\\"]\\n# Need to get the correct dataframe here.\\ntier1_fct_conv.createOrReplaceTempView('tier1_fct_conv')\\n\\ntier1_mkt_mtrlz_tbl = dict_all_dfs['tier1_mkt_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_mkt_mtrlz_tbl.createOrReplaceTempView('tier1_mkt_mtrlz_tbl')\\n\\ntier1_measr_map_tbl = dict_all_dfs['tier1_measr_map_tbl'][\\\"df_object\\\"]\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map_tbl')\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map')\\n\\ntier1_fct_mtrlz_tbl = dict_all_dfs['tier1_fct_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl.createOrReplaceTempView('tier1_fct_mtrlz_tbl')\\n\\ntier1_fact_mtrlz_tbl = dict_all_dfs['tier1_fact_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fact_mtrlz_tbl.createOrReplaceTempView('tier1_fact_mtrlz_tbl')\\n\\nmm_time_perd_fdim = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_FDIM_VW/')\\nmm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\nmm_time_perd_assoc_type = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_TYPE_VW/')\\nmm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\nmm_time_perd_assoc = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_VW/')\\nmm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\ndf_mm_run_time_perd_plc=spark.read.format('parquet').load(f'/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\n\\ntier1_fct_mtrlz_tbl2 = dict_all_dfs['tier1_fct_mtrlz_tbl2'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl2.createOrReplaceTempView('tier1_fct_mtrlz_tbl2')\\n\\nmm_mkt_xref = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_XREF/')\\nmm_mkt_xref.createOrReplaceTempView('mm_mkt_xref')\\n\\nmm_mkt_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_DIM_VW/')\\nmm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\ndf_mm_run_time_perd_plc=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc_v1')\\n\\nsql_fmt=\\\"\\\"\\\"select  cast(run_id as double) as run_id, time_perd_id,extrn_time_perd_id,rcd_orign_code from mm_run_time_perd_plc_v1\\\"\\\"\\\"\\nmm_run_time_perd_plc_v1=spark.sql(sql_fmt)\\nmm_run_time_perd_plc_v1.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\ndf_time_perd_sdads=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/TIME_PERD_SDADS/')\\ndf_time_perd_sdads.createOrReplaceTempView('mm_time_perd')\\n\\ndf_mm_mkt_skid_cntrt_lkp_vw=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_SKID_LKP/')\\ndf_mm_mkt_skid_cntrt_lkp_vw.createOrReplaceTempView('mm_mkt_skid_cntrt_lkp_vw')\\n\\nmm_run_prod_plc = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PROD_PLC/')\\nmm_run_prod_plc.createOrReplaceTempView('mm_run_prod_plc')\\n\\nmm_prod_sdim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_SDIM_VW/')\\nmm_prod_sdim.createOrReplaceTempView('mm_prod_sdim')\\n\\nmm_prod_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_DIM_VW/')\\nmm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\ntier1_prod_mtrlz_tbl = dict_all_dfs['tier1_prod_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_prod_mtrlz_tbl.createOrReplaceTempView('tier1_prod_mtrlz_tbl')\\n\\nMM_RUN_PRTTN_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PRTTN_PLC/')\\nMM_RUN_PRTTN_PLC.createOrReplaceTempView('MM_RUN_PRTTN_PLC')\\n\\nMM_RUN_MEASR_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_MEASR_PLC/')\\nMM_RUN_MEASR_PLC.createOrReplaceTempView('MM_RUN_MEASR_PLC')\\n\\n# tables from Postgres\\n\\n\\n\\n# mm_measr_id_lkp\\nmm_measr_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_id_lkp\\\")\\nmm_measr_id_lkp.createOrReplaceTempView('mm_measr_id_lkp')\\n\\n# mm_measr_lkp\\nmm_measr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_lkp\\\")\\nmm_measr_lkp.createOrReplaceTempView('mm_measr_lkp')\\n\\n# mm_cntrt_lkp\\nmm_cntrt_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_cntrt_lkp\\\")\\nmm_cntrt_lkp.createOrReplaceTempView('mm_cntrt_lkp')\\n\\n# mm_time_perd_id_lkp\\ndf_mm_time_perd_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_time_perd_id_lkp\\\")\\ndf_mm_time_perd_id_lkp.createOrReplaceTempView('mm_time_perd_id_lkp')\\n\\n# dpf_all_run_vw\\ndpf_all_run_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_process_run_lkp_vw\\\")\\ndpf_all_run_vw.createOrReplaceTempView('dpf_all_run_vw')\\n\\n# mm_categ_strct_attr_assoc_vw\\nmm_categ_strct_attr_assoc_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_categ_strct_attr_assoc_vw\\\")\\nmm_categ_strct_attr_assoc_vw.createOrReplaceTempView('mm_categ_strct_attr_assoc_vw')\\n\\n# MM_PROD_ATTR_VAL_LKP\\nMM_PROD_ATTR_VAL_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_PROD_ATTR_VAL_LKP\\\")\\nMM_PROD_ATTR_VAL_LKP.createOrReplaceTempView('MM_PROD_ATTR_VAL_LKP')\\n\\n# mm_strct_lvl_lkp\\nmm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_strct_lvl_lkp\\\")\\nmm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\n# MM_CNTRT_TIME_PERD_TYPE_ASSOC\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_CNTRT_TIME_PERD_TYPE_ASSOC\\\")\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC.createOrReplaceTempView('MM_CNTRT_TIME_PERD_TYPE_ASSOC')\\n\\n# MM_STRCT_LKP\\nMM_STRCT_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_STRCT_LKP\\\")\\nMM_STRCT_LKP.createOrReplaceTempView('MM_STRCT_LKP')\\n\\n# MM_MEASR_VENDR_FACTR_LKP\\nMM_MEASR_VENDR_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_VENDR_FACTR_LKP\\\")\\nMM_MEASR_VENDR_FACTR_LKP.createOrReplaceTempView('MM_MEASR_VENDR_FACTR_LKP')\\n\\n# MM_MEASR_CNTRT_FACTR_LKP\\nMM_MEASR_CNTRT_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_CNTRT_FACTR_LKP\\\")\\nMM_MEASR_CNTRT_FACTR_LKP.createOrReplaceTempView('MM_MEASR_CNTRT_FACTR_LKP')\\n\\n# WORK\\n\\n# 1.Unknown measure\\n\\nquery1 = f\\\"\\\"\\\" SELECT \\n('Unknown measure') as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (\\n            SELECT tier1_measr_mtrlz_tbl.LINE_NUM, tier1_measr_mtrlz_tbl.EXTRN_CODE, tier1_measr_mtrlz_tbl.EXTRN_NAME\\n            FROM tier1_measr_mtrlz_tbl\\n            LEFT JOIN mm_measr_id_lkp ON EXTRN_MEASR_ID = EXTRN_CODE AND MM_MEASR_ID_LKP.VENDR_ID = {tier1_vendr_id}\\n\\t\\t\\tand (fact_type_code = '{tier1_fact_type_code}' OR fact_type_code = '[U]')\\n            WHERE mm_measr_id_lkp.EXTRN_MEASR_ID IS NULL \\t\\t\\t\\n\\t\\t    ORDER BY tier1_measr_mtrlz_tbl.LINE_NUM)\\n\\t\\t    WHERE limit 500 \\\"\\\"\\\"\\ndf_unk_msr = spark.sql(query1)\\n\\n# 2.Duplicated measure after mapping\\n\\nquery2 = f\\\"\\\"\\\"SELECT ('Duplicated measure after mapping') as DQ, line_num line_num, \\nvendor_tag vendor_tag, \\nextrn_name extrn_name, \\nvendor_tag_old vendor_tag_old, \\nMEASR_DESC MEASR_DESC \\nFROM (\\nWITH data_init AS (\\n    SELECT src.line_num, src.extrn_code, src.extrn_name, lkp.EXTRN_MEASR_ID, lkp.MEASR_ID, mlkp.MEASR_DESC, \\n    RANK() over (\\n            partition by lkp.extrn_measr_id\\n            order by lkp.EXTRN_MEASR_ID, cntrt_id nulls last, cntry_id nulls last) as mapng_rank\\n    FROM tier1_measr_mtrlz_tbl src\\n    JOIN mm_measr_id_lkp lkp\\n        ON lkp.EXTRN_MEASR_ID = src.EXTRN_CODE\\n        AND NVL(lkp.CNTRT_ID, {cntrt_id}) = {cntrt_id}\\n        AND NVL(lkp.CNTRY_ID, '{cntry_id}') = '{cntry_id}'\\n    JOIN mm_measr_lkp mlkp\\n        ON lkp.MEASR_ID=mlkp.MEASR_ID AND lkp.fact_type_code=mlkp.fact_type_code\\n        AND VENDR_ID = {tier1_vendr_id}\\n        AND lkp.FACT_TYPE_CODE = '{tier1_fact_type_code}'\\n        AND mlkp.use_ind='Y'\\n),\\ndata_filtr as (\\n    select line_num, extrn_code, extrn_name, extrn_measr_id, measr_id, measr_desc\\n    from data_init\\n    where mapng_rank = 1\\n),\\nmid AS (\\n  SELECT MEASR_id FROM data_filtr\\n  GROUP BY MEASR_id\\n  HAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT ('Duplicated measure after mapping') as DQ, line_num, extrn_code vendor_tag, extrn_name, EXTRN_MEASR_ID vendor_tag_old, MEASR_DESC FROM data_filtr\\n JOIN mid on data_filtr.MEASR_id = mid.MEASR_id\\n ORDER BY line_num\\n)\\nWHERE limit 500 \\\"\\\"\\\"\\n\\ndf_dup_msr_af_map = spark.sql(query2)\\n\\n# 3.No data: N/A or zero in every input row, for measure\\n\\nquery3 = f\\\"\\\"\\\"SELECT m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19,m20,\\nm21,m22,m23,m24,m25,m26,m27,m28,m29,m30,m31,m32,m33,m34,m35,m36,m37,m38,m39,m40,\\nm41,m42,m43,m44,m45,m46,m47,m48,m49,m50,m51,m52,m53,m54,m55,m56,m57,m58,m59,m60,\\nm61,m62,m63,m64,m65,m66,m67,m68,m69,m70,m71,m72,m73,m74,m75,m76,m77,m78,m79,m80,\\nm81,m82,m83,m84,m85,m86,m87,m88,m89,m90,m91,m92,m93,m94,m95,m96,m97,m98,m99,m100,\\n('No data- NA or zero in every input row, for measure') as DQ,\\nline_num line_num,\\nextrn_code extrn_code,\\nextrn_name extrn_name,\\nuse_ind use_ind \\nFROM (\\n   WITH ordm AS (\\n   SELECT msr.*, mlkp.USE_IND AS USE_IND, ROW_NUMBER() OVER (ORDER BY LINE_NUM) rnm FROM tier1_measr_mtrlz_tbl msr\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id} AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt\\n   ON msr.EXTRN_CODE = MEASR_DEFLT.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '[U]' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt_u\\n   ON msr.EXTRN_CODE = MEASR_DEFLT_U.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID = '{cntry_id}') measr_cntry /* lookup limited to contract related country */\\n   ON msr.EXTRN_CODE = MEASR_CNTRY.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRT_ID = '{cntry_id}') measr_cntrt /* lookup limited to processed contract */\\n   ON msr.EXTRN_CODE = MEASR_CNTRT.EXTRN_MEASR_ID       \\n   JOIN MM_MEASR_LKP mlkp on COALESCE(MEASR_CNTRT.MEASR_ID, MEASR_CNTRY.MEASR_ID, MEASR_DEFLT.MEASR_ID, MEASR_DEFLT_U.MEASR_ID) = mlkp.measr_id\\n   AND mlkp.fact_type_code in ('{tier1_fact_type_code}','[U]')\\n   ),\\n    err AS (\\nSELECT\\n   NVL(MAX(FACT_AMT_1), 0) m1,NVL(MAX(FACT_AMT_2), 0) m2,NVL(MAX(FACT_AMT_3), 0) m3,NVL(MAX(FACT_AMT_4), 0) m4,\\nNVL(MAX(FACT_AMT_5), 0) m5,NVL(MAX(FACT_AMT_6), 0) m6,NVL(MAX(FACT_AMT_7), 0) m7,NVL(MAX(FACT_AMT_8), 0) m8,NVL(MAX(FACT_AMT_9), 0) m9,\\nNVL(MAX(FACT_AMT_10), 0) m10,NVL(MAX(FACT_AMT_11), 0) m11,NVL(MAX(FACT_AMT_12), 0) m12,NVL(MAX(FACT_AMT_13), 0) m13,NVL(MAX(FACT_AMT_14), 0) m14,\\nNVL(MAX(FACT_AMT_15), 0) m15,NVL(MAX(FACT_AMT_16), 0) m16,NVL(MAX(FACT_AMT_17), 0) m17,NVL(MAX(FACT_AMT_18), 0) m18,NVL(MAX(FACT_AMT_19), 0) m19,\\nNVL(MAX(FACT_AMT_20), 0) m20,NVL(MAX(FACT_AMT_21), 0) m21,NVL(MAX(FACT_AMT_22), 0) m22,NVL(MAX(FACT_AMT_23), 0) m23,NVL(MAX(FACT_AMT_24), 0) m24,\\nNVL(MAX(FACT_AMT_25), 0) m25,NVL(MAX(FACT_AMT_26), 0) m26,NVL(MAX(FACT_AMT_27), 0) m27,NVL(MAX(FACT_AMT_28), 0) m28,NVL(MAX(FACT_AMT_29), 0) m29,\\nNVL(MAX(FACT_AMT_30), 0) m30,NVL(MAX(FACT_AMT_31), 0) m31,NVL(MAX(FACT_AMT_32), 0) m32,NVL(MAX(FACT_AMT_33), 0) m33,NVL(MAX(FACT_AMT_34), 0) m34,\\nNVL(MAX(FACT_AMT_35), 0) m35,NVL(MAX(FACT_AMT_36), 0) m36,NVL(MAX(FACT_AMT_37), 0) m37,NVL(MAX(FACT_AMT_38), 0) m38,NVL(MAX(FACT_AMT_39), 0) m39,\\nNVL(MAX(FACT_AMT_40), 0) m40,NVL(MAX(FACT_AMT_41), 0) m41,NVL(MAX(FACT_AMT_42), 0) m42,NVL(MAX(FACT_AMT_43), 0) m43,NVL(MAX(FACT_AMT_44), 0) m44,\\nNVL(MAX(FACT_AMT_45), 0) m45,NVL(MAX(FACT_AMT_46), 0) m46,NVL(MAX(FACT_AMT_47), 0) m47,NVL(MAX(FACT_AMT_48), 0) m48,NVL(MAX(FACT_AMT_49), 0) m49,\\nNVL(MAX(FACT_AMT_50), 0) m50,NVL(MAX(FACT_AMT_51), 0) m51,NVL(MAX(FACT_AMT_52), 0) m52,NVL(MAX(FACT_AMT_53), 0) m53,NVL(MAX(FACT_AMT_54), 0) m54,\\nNVL(MAX(FACT_AMT_55), 0) m55,NVL(MAX(FACT_AMT_56), 0) m56,NVL(MAX(FACT_AMT_57), 0) m57,NVL(MAX(FACT_AMT_58), 0) m58,NVL(MAX(FACT_AMT_59), 0) m59,\\nNVL(MAX(FACT_AMT_60), 0) m60,NVL(MAX(FACT_AMT_61), 0) m61,NVL(MAX(FACT_AMT_62), 0) m62,NVL(MAX(FACT_AMT_63), 0) m63,NVL(MAX(FACT_AMT_64), 0) m64,\\nNVL(MAX(FACT_AMT_65), 0) m65,NVL(MAX(FACT_AMT_66), 0) m66,NVL(MAX(FACT_AMT_67), 0) m67,NVL(MAX(FACT_AMT_68), 0) m68,NVL(MAX(FACT_AMT_69), 0) m69,\\nNVL(MAX(FACT_AMT_70), 0) m70,NVL(MAX(FACT_AMT_71), 0) m71,NVL(MAX(FACT_AMT_72), 0) m72,NVL(MAX(FACT_AMT_73), 0) m73,NVL(MAX(FACT_AMT_74), 0) m74,\\nNVL(MAX(FACT_AMT_75), 0) m75,NVL(MAX(FACT_AMT_76), 0) m76,NVL(MAX(FACT_AMT_77), 0) m77,NVL(MAX(FACT_AMT_78), 0) m78,NVL(MAX(FACT_AMT_79), 0) m79,\\nNVL(MAX(FACT_AMT_80), 0) m80,NVL(MAX(FACT_AMT_81), 0) m81,NVL(MAX(FACT_AMT_82), 0) m82,NVL(MAX(FACT_AMT_83), 0) m83,NVL(MAX(FACT_AMT_84), 0) m84,\\nNVL(MAX(FACT_AMT_85), 0) m85,NVL(MAX(FACT_AMT_86), 0) m86,NVL(MAX(FACT_AMT_87), 0) m87,NVL(MAX(FACT_AMT_88), 0) m88,NVL(MAX(FACT_AMT_89), 0) m89,\\nNVL(MAX(FACT_AMT_90), 0) m90,NVL(MAX(FACT_AMT_91), 0) m91,NVL(MAX(FACT_AMT_92), 0) m92,NVL(MAX(FACT_AMT_93), 0) m93,NVL(MAX(FACT_AMT_94), 0) m94,\\nNVL(MAX(FACT_AMT_95), 0) m95,NVL(MAX(FACT_AMT_96), 0) m96,NVL(MAX(FACT_AMT_97), 0) m97,NVL(MAX(FACT_AMT_98), 0) m98,NVL(MAX(FACT_AMT_99), 0) m99,\\nNVL(MAX(FACT_AMT_100), 0) m100 FROM tier1_fct_dvm_100_measr\\n) \\n            \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=1) ON 1=1 WHERE m1=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=2) ON 1=1 WHERE m2=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=3) ON 1=1 WHERE m3=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=4) ON 1=1 WHERE m4=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=5) ON 1=1 WHERE m5=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=6) ON 1=1 WHERE m6=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=7) ON 1=1 WHERE m7=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=8) ON 1=1 WHERE m8=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=9) ON 1=1 WHERE m9=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=10) ON 1=1 WHERE m10=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=11) ON 1=1 WHERE m11=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=12) ON 1=1 WHERE m12=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=13) ON 1=1 WHERE m13=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=14) ON 1=1 WHERE m14=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=15) ON 1=1 WHERE m15=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=16) ON 1=1 WHERE m16=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=17) ON 1=1 WHERE m17=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=18) ON 1=1 WHERE m18=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=19) ON 1=1 WHERE m19=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=20) ON 1=1 WHERE m20=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\n         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=21) ON 1=1 WHERE m21=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=22) ON 1=1 WHERE m22=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=23) ON 1=1 WHERE m23=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=24) ON 1=1 WHERE m24=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=25) ON 1=1 WHERE m25=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=26) ON 1=1 WHERE m26=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=27) ON 1=1 WHERE m27=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=28) ON 1=1 WHERE m28=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=29) ON 1=1 WHERE m29=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=30) ON 1=1 WHERE m30=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=31) ON 1=1 WHERE m31=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=32) ON 1=1 WHERE m32=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=33) ON 1=1 WHERE m33=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=34) ON 1=1 WHERE m34=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=35) ON 1=1 WHERE m35=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=36) ON 1=1 WHERE m36=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=37) ON 1=1 WHERE m37=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=38) ON 1=1 WHERE m38=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=39) ON 1=1 WHERE m39=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=40) ON 1=1 WHERE m40=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=41) ON 1=1 WHERE m41=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=42) ON 1=1 WHERE m42=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=43) ON 1=1 WHERE m43=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=44) ON 1=1 WHERE m44=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=45) ON 1=1 WHERE m45=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=46) ON 1=1 WHERE m46=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=47) ON 1=1 WHERE m47=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=48) ON 1=1 WHERE m48=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=49) ON 1=1 WHERE m49=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=50) ON 1=1 WHERE m50=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=51) ON 1=1 WHERE m51=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=52) ON 1=1 WHERE m52=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=53) ON 1=1 WHERE m53=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=54) ON 1=1 WHERE m54=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=55) ON 1=1 WHERE m55=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=56) ON 1=1 WHERE m56=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=57) ON 1=1 WHERE m57=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=58) ON 1=1 WHERE m58=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=59) ON 1=1 WHERE m59=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=60) ON 1=1 WHERE m60=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=61) ON 1=1 WHERE m61=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=62) ON 1=1 WHERE m62=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=63) ON 1=1 WHERE m63=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=64) ON 1=1 WHERE m64=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=65) ON 1=1 WHERE m65=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=66) ON 1=1 WHERE m66=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=67) ON 1=1 WHERE m67=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=68) ON 1=1 WHERE m68=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=69) ON 1=1 WHERE m69=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=70) ON 1=1 WHERE m70=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=71) ON 1=1 WHERE m71=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=72) ON 1=1 WHERE m72=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=73) ON 1=1 WHERE m73=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=74) ON 1=1 WHERE m74=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=75) ON 1=1 WHERE m75=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=76) ON 1=1 WHERE m76=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=77) ON 1=1 WHERE m77=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=78) ON 1=1 WHERE m78=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=79) ON 1=1 WHERE m79=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=80) ON 1=1 WHERE m80=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=81) ON 1=1 WHERE m81=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=82) ON 1=1 WHERE m82=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=83) ON 1=1 WHERE m83=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=84) ON 1=1 WHERE m84=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=85) ON 1=1 WHERE m85=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=86) ON 1=1 WHERE m86=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=87) ON 1=1 WHERE m87=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=88) ON 1=1 WHERE m88=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=89) ON 1=1 WHERE m89=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=90) ON 1=1 WHERE m90=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=91) ON 1=1 WHERE m91=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=92) ON 1=1 WHERE m92=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=93) ON 1=1 WHERE m93=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=94) ON 1=1 WHERE m94=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=95) ON 1=1 WHERE m95=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=96) ON 1=1 WHERE m96=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=97) ON 1=1 WHERE m97=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=98) ON 1=1 WHERE m98=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=99) ON 1=1 WHERE m99=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=100) ON 1=1 WHERE m100=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\n)\\nWHERE limit 500 \\n\\\"\\\"\\\"\\ndf_no_data_measr = spark.sql(query3)\\n\\n# 4. Unknown attribute value for product\\n\\nquery4 = f\\\"\\\"\\\"SELECT ('Unknown attribute value for product') as DQ, LINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME, \\nATTR_CODE_LIST ATTR_CODE_LIST, \\nLVL LVL, \\nUNKNOWN UNKNOWN \\nFROM (WITH err AS (\\n    SELECT * FROM tier1_prod_gav\\n    WHERE (ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL) \\n    OR (ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL)\\n    OR (ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL)\\n    OR (ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL)\\n    OR (ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL)\\n    OR (ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL)\\n    OR (ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL)\\n    OR (ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL)\\n  --  OR (ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL) <GC> During develeopment, I dont see this column in sample dataframe. It should be corrected at Turbine Graph to populate this column\\n\\t)\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_1 AS LVL, ATTR_CODE_1 AS UNKNOWN FROM err WHERE ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_2 AS LVL, ATTR_CODE_2 AS UNKNOWN FROM err WHERE ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_3 AS LVL, ATTR_CODE_3 AS UNKNOWN FROM err WHERE ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_4 AS LVL, ATTR_CODE_4 AS UNKNOWN FROM err WHERE ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_5 AS LVL, ATTR_CODE_5 AS UNKNOWN FROM err WHERE ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_6 AS LVL, ATTR_CODE_6 AS UNKNOWN FROM err WHERE ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_7 AS LVL, ATTR_CODE_7 AS UNKNOWN FROM err WHERE ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_8 AS LVL, ATTR_CODE_8 AS UNKNOWN FROM err WHERE ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL\\n --   UNION ALL\\n\\t--SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_9 AS LVL, ATTR_CODE_9 AS UNKNOWN FROM err WHERE ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL\\n    )\\t\\n\\tWHERE limit 100\\n--\\tORDER BY LINE_NUM \\\"\\\"\\\" \\nprod_attr_unk = spark.sql(query4).orderBy('LINE_NUM')\\n\\n# 5. The same brand placed under two companies\\n\\nquery5 = f\\\"\\\"\\\"SELECT \\n('The same brand placed under two companies') as DQ,\\nLINE_NUM LINE_NUM, PROD_SKID PROD_SKID, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_PROD_NAME 5EXTRN_PROD_NAME, \\nbrand_name brand_name, company_name company_name,\\nEXTRN_PROD_ATTR_VAL_LIST EXTRN_PROD_ATTR_VAL_LIST \\nFROM (\\n             SELECT DISTINCT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, brand_name, company_name,EXTRN_PROD_ATTR_VAL_LIST FROM (\\n     WITH TB AS (SELECT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, EXTRN_PROD_ATTR_VAL_LIST,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_BRAND_TXT' THEN attr_code_1  \\n      WHEN attr_phys_name_2 = 'PG_BRAND_TXT' THEN attr_code_2\\n      WHEN attr_phys_name_3 = 'PG_BRAND_TXT' THEN attr_code_3\\n      WHEN attr_phys_name_4 = 'PG_BRAND_TXT' THEN attr_code_4\\n      WHEN attr_phys_name_5 = 'PG_BRAND_TXT' THEN attr_code_5\\n      WHEN attr_phys_name_6 = 'PG_BRAND_TXT' THEN attr_code_6\\n      WHEN attr_phys_name_7 = 'PG_BRAND_TXT' THEN attr_code_7\\n      WHEN attr_phys_name_8 = 'PG_BRAND_TXT' THEN attr_code_8\\n    --  WHEN attr_phys_name_9 = 'PG_BRAND_TXT' THEN attr_code_9\\n     END brand,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_BRAND_TXT' THEN attr_val_1  \\n      WHEN attr_phys_name_2 = 'PG_BRAND_TXT' THEN attr_val_2\\n      WHEN attr_phys_name_3 = 'PG_BRAND_TXT' THEN attr_val_3\\n      WHEN attr_phys_name_4 = 'PG_BRAND_TXT' THEN attr_val_4\\n      WHEN attr_phys_name_5 = 'PG_BRAND_TXT' THEN attr_val_5\\n      WHEN attr_phys_name_6 = 'PG_BRAND_TXT' THEN attr_val_6\\n      WHEN attr_phys_name_7 = 'PG_BRAND_TXT' THEN attr_val_7\\n      WHEN attr_phys_name_8 = 'PG_BRAND_TXT' THEN attr_val_8\\n    --  WHEN attr_phys_name_9 = 'PG_BRAND_TXT' THEN attr_val_9\\n     END brand_name,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_MFGR_TXT' THEN attr_code_1  \\n      WHEN attr_phys_name_2 = 'PG_MFGR_TXT' THEN attr_code_2\\n      WHEN attr_phys_name_3 = 'PG_MFGR_TXT' THEN attr_code_3\\n      WHEN attr_phys_name_4 = 'PG_MFGR_TXT' THEN attr_code_4\\n      WHEN attr_phys_name_5 = 'PG_MFGR_TXT' THEN attr_code_5\\n      WHEN attr_phys_name_6 = 'PG_MFGR_TXT' THEN attr_code_6\\n      WHEN attr_phys_name_7 = 'PG_MFGR_TXT' THEN attr_code_7\\n      WHEN attr_phys_name_8 = 'PG_MFGR_TXT' THEN attr_code_8\\n    --  WHEN attr_phys_name_9 = 'PG_MFGR_TXT' THEN attr_code_9\\n     END company,\\n\\t CASE \\n      WHEN attr_phys_name_1 = 'PG_MFGR_TXT' THEN attr_val_1  \\n      WHEN attr_phys_name_2 = 'PG_MFGR_TXT' THEN attr_val_2\\n      WHEN attr_phys_name_3 = 'PG_MFGR_TXT' THEN attr_val_3\\n      WHEN attr_phys_name_4 = 'PG_MFGR_TXT' THEN attr_val_4\\n      WHEN attr_phys_name_5 = 'PG_MFGR_TXT' THEN attr_val_5\\n      WHEN attr_phys_name_6 = 'PG_MFGR_TXT' THEN attr_val_6\\n      WHEN attr_phys_name_7 = 'PG_MFGR_TXT' THEN attr_val_7\\n      WHEN attr_phys_name_8 = 'PG_MFGR_TXT' THEN attr_val_8\\n    --  WHEN attr_phys_name_9 = 'PG_MFGR_TXT' THEN attr_val_9\\n     END company_name\\n      FROM tier1_prod_gav WHERE PROD_LVL_NAME ='BRAND')\\n\\t SELECT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, brand, company, brand_name, company_name, EXTRN_PROD_ATTR_VAL_LIST, approx_count_distinct(company) OVER (PARTITION BY brand) NR\\n     FROM TB\\n     ) WHERE NR>1 AND brand IS NOT NULL AND company IS NOT NULL\\n\\t )\\nWHERE limit 100 \\n--ORDER BY brand_name\\\"\\\"\\\"\\n\\nprod_attr_brand_mlt = spark.sql(query5).orderBy('brand_name')\\n\\n# 6. No data: N/A or zero in every input row, for time period\\n\\nquery6 = f\\\"\\\"\\\"SELECT \\n('No data: N/A or zero in every input row, for time period') as DQ,\\nLINE_NUM dLINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT TIME_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY TIME_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_time_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.TIME_EXTRN_CODE \\nWHERE B.TIME_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\nWHERE limit 500\\\"\\\"\\\"\\n\\nfact_time_perd_miss = spark.sql(query6)\\n\\n# 7. No data: N/A or zero in every input row, for market\\nquery7 = f\\\"\\\"\\\"SELECT \\n('No data: N/A or zero in every input row, for market') as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT MKT_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY MKT_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_mkt_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.MKT_EXTRN_CODE \\nWHERE B.MKT_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\nWHERE limit 500 \\\"\\\"\\\"\\n\\nfact_mkt_miss = spark.sql(query7)\\n\\n# Create view mm_time_perd_assoc_tier1_vw\\n\\nquery = f\\\"\\\"\\\"with CAL_TYPE_2 as (\\nSELECT   2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_b,\\n          tb.time_perd_start_date time_perd_start_date_b,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_a,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          ta.time_perd_end_date time_perd_end_date_a,\\n          ta.time_perd_start_date time_perd_start_date_a\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n     WHERE assoc.CAL_TYPE_ID=2),\\nBIMTH_2_MTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_B TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_A TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          tb.time_perd_end_date time_perd_end_date_A,\\n          tb.time_perd_start_date time_perd_start_date_A\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\nMTH_2_BIMTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A ,\\n          assoc.TIME_PERD_ID_B ,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_A,\\n          ta.time_perd_end_date time_perd_end_date_A,\\n          ta.time_perd_start_date time_perd_start_date_A,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_B,\\n          tb.time_perd_start_date time_perd_start_date_B\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\n\\nBW_2_EB AS (SELECT  2 CAL_TYPE_ID,\\n          ta.EVEN_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.EVEN_BIMTH_TIME_PERD_CLASS_COD TIME_PERD_CLASS_CODE_A,\\n          ta.EVEN_BIMTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.EVEN_BIMTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.EVEN_BIMTH_START_DATE TIME_PERD_START_DATE_A\\n     FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='EB'\\n    ),\\n\\nBW_2_MTH AS (SELECT  2 CAL_TYPE_ID,\\n          ta.ODD_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.MTH_TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.MTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.MTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.MTH_START_DATE TIME_PERD_START_DATE_A\\n               FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='MTH'\\n    )\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM CAL_TYPE_2\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BIMTH_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_EB\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID, CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM MTH_2_BIMTH\\\"\\\"\\\"\\ndf_mm_time_perd_assoc_tier1_vw= spark.sql(query)\\ndf_mm_time_perd_assoc_tier1_vw.createOrReplaceTempView('mm_time_perd_assoc_tier1_vw')\\n\\n##'Time period of weeks not properly generated' \\nsql_time_period_wks_nt_gen=f\\\"\\\"\\\"\\nselect ('Time period of weeks not properly generated') as DQ, * from (WITH wk_mth_assoc AS (SELECT * FROM mm_time_perd_assoc_tier1_vw WHERE time_perd_type_code_B = 'WKMS' AND TIME_PERD_type_CODE_A = 'MH' AND cal_type_id = 2  AND time_perd_assoc_type_id = 1),\\nwk_loaded AS (SELECT tp.time_perd_end_date mm_time_perd_end_date FROM tier1_time_mtrlz_tbl stime  JOIN mm_time_perd_id_lkp\\nON mm_time_perd_id_lkp.EXTRN_TIME_PERD_ID =stime.EXTRN_CODE AND mm_time_perd_id_lkp.VENDR_ID ='{tier1_vendr_id}'\\nJOIN mm_time_perd_fdim tp ON tp.TIME_PERD_ID = mm_time_perd_id_lkp.time_perd_id AND tp.time_perd_class_code = 'WK'),\\nwk_prev_all AS(SELECT time_perd_end_date mm_time_perd_end_date FROM \\n(SELECT DISTINCT tp.time_perd_end_date FROM mm_run_time_perd_plc plc JOIN dpf_all_run_vw run ON \\nrun.run_id = plc.run_id JOIN mm_cntrt_lkp cntrt ON cntrt.prcsg_id = run.run_id\\nJOIN mm_time_perd_fdim tp ON tp.time_perd_id = plc.time_perd_id WHERE cntrt.cntrt_id = '{cntrt_id}'\\nAND run.process_status ='completed' \\nAND run.end_date_time <= current_timestamp())),\\nwk_new AS(SELECT mm_time_perd_end_date, 'new' AS STATUS FROM wk_loaded MINUS SELECT mm_time_perd_end_date,'new' AS STATUS FROM wk_prev_all),\\nwk_redelivered AS (SELECT mm_time_perd_end_date mm_time_perd_end_date, 'redelivered' AS STATUS FROM wk_loaded INTERSECT\\nSELECT mm_time_perd_end_date,'redelivered' AS STATUS FROM wk_prev_all),\\nwk_existing AS(SELECT mm_time_perd_end_date, 'existing' AS STATUS FROM wk_prev_all MINUS SELECT mm_time_perd_end_date,'existing' AS STATUS FROM wk_loaded),\\nwk_all AS (SELECT * FROM wk_new UNION ALL SELECT * FROM wk_redelivered UNION ALL SELECT * FROM wk_existing),\\nmth_loaded AS (SELECT DISTINCT wk_mth_assoc.time_perd_end_date_a as time_perd_end_date,wk_mth_assoc.time_perd_id_a as time_perd_id ,tp.time_perd_name FROM wk_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_end_date_b =wk_loaded.mm_time_perd_end_date JOIN mm_time_perd_fdim tp ON tp.time_perd_id = wk_mth_assoc.time_perd_id_a),\\n tbl AS (SELECT time_perd.time_perd_type_name wk_name, time_perd_end_date TIME_PERD_END,cast((TO_DATE(time_perd_end_date),'DD-MON-YYYY')as string) as TIME_PERD_END_DATE, mth_loaded.time_perd_name mth_name, COUNT(time_perd.time_perd_type_name) OVER (PARTITION BY mth_loaded.time_perd_name) cnt,\\nCASE WHEN wk_all.mm_time_perd_end_date IS NULL THEN 'missing'ELSE STATUS END AS STATUS_ALL FROM mth_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_id_a = mth_loaded.time_perd_id LEFT OUTER JOIN wk_all ON wk_all.mm_time_perd_end_date =wk_mth_assoc.time_perd_end_date_b JOIN mm_time_perd time_perd ON wk_mth_assoc.time_perd_id_b = time_perd.time_perd_id)\\nSELECT *, 'missing','new','recalculated','existing' FROM tbl WHERE  STATUS_ALL = 'missing' and STATUS_ALL = 'new' and STATUS_ALL = 'redelivered' and STATUS_ALL = 'existing'  and MTH_NAME = tbl.MTH_NAME limit 1)where limit 501\\\"\\\"\\\"\\ndf_time_period_wks_nt_gen=spark.sql(sql_time_period_wks_nt_gen)\\n\\n##Duplicated time period after mapping\\nsql_dup_time_period_aftr_mapng=f\\\"\\\"\\\"WITH data AS(SELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id ='{srce_sys_id}'\\nAND xref.cntrt_id = '{cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id ='{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = '{srce_sys_id}'\\nAND xref.cntrt_id = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM  tier1_mkt_mtrlz_tbl src  \\nJOIN mm_mkt_skid_cntrt_lkp_vw lkp\\nON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\nAND lkp.CNTRT_ID = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'TP'),\\nskid AS (SELECT ('Duplicated time period after mapping') as DQ, MKT_skid as mkt_skid FROM data GROUP BY MKT_skid HAVING COUNT(DISTINCT line_num)>1)\\nselect * from skid limit 1\\\"\\\"\\\"\\ndf_dup_time_period_aftr_mapng=spark.sql(sql_dup_time_period_aftr_mapng)\\n\\n\\n####Missing/delivered areas\\nsql_msng_delv_areas=f\\\"\\\"\\\"\\nwith temp1 as (select ('Missing/delivered areas') as DQ, c.line_num as line_num,a.extrn_mkt_id,a.extrn_mkt_name,cast(b.mkt_skid as integer) as mkt_skid,b.mkt_name,\\nnvl2(b.mkt_skid, 'n', 'y') as missing_ind,nvl2(b.mkt_skid, 'n', 'y') as new_ind ,\\nrlike(d.cntrt_spec, '/ContractSpecification/CountryName') AS total_country\\nfrom mm_mkt_xref a join mm_mkt_dim b on a.srce_sys_id==b.srce_sys_id \\njoin tier1_mkt_mtrlz_tbl c on a.srce_sys_id=c.srce_sys_id\\njoin mm_cntrt_lkp d on d.cntrt_id ='{cntrt_id}'\\nlimit 501\\n)\\nselect *,missing_ind as last_run_status ,new_ind as last_period_status from temp1\\\"\\\"\\\"\\ndf_msng_delv_areas=spark.sql(sql_msng_delv_areas)\\n\\n# DQ12 - Unknown time period\\n\\nquery12 = f\\\"\\\"\\\"SELECT\\n('Unknown time period') as DQ,\\nMM_TIME_PERD_ID as MM_TIME_PERD_ID,    \\nLINE_NUM as LINE_NUM,\\nEXTRN_CODE as EXTRN_CODE,\\nEXTRN_NAME as EXTRN_NAME\\nFROM (\\n        SELECT * FROM tier1_time_mtrlz_tbl src \\n        LEFT JOIN  MM_TIME_PERD_ID_LKP map ON src.EXTRN_CODE = map.EXTRN_TIME_PERD_ID AND map.VENDR_ID = {tier1_vendr_id}\\n        WHERE VENDR_ID IS NULL\\n        )\\n           WHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_time_perd_id_map_unk = spark.sql(query12)\\n\\n# DQ13 - Unknown market\\n\\nquery13 = f\\\"\\\"\\\"SELECT * FROM (SELECT \\n('Unknown market') DQ,\\nMN.LINE_NUM LINE_NUM,\\nMN.EXTRN_CODE as EXTRN_CODE,\\nMN.EXTRN_NAME as EXTRN_NAME\\nFROM tier1_mkt_mtrlz_tbl MN\\n    LEFT JOIN MM_MKT_XREF \\n      ON MM_MKT_XREF.EXTRN_MKT_ID = MN.EXTRN_CODE\\n      AND MM_MKT_XREF.CNTRT_ID = {cntrt_id}\\n      AND MM_MKT_XREF.SRCE_SYS_ID = {srce_sys_id}\\n    LEFT JOIN MM_MKT_SKID_CNTRT_LKP_VW  \\n      ON MM_MKT_SKID_CNTRT_LKP_VW.EXTRN_MKT_ID = MN.EXTRN_CODE   \\n      AND MM_MKT_SKID_CNTRT_LKP_VW.CNTRT_ID = {cntrt_id} \\n    WHERE MM_MKT_XREF.MKT_SKID IS NULL AND MM_MKT_SKID_CNTRT_LKP_VW.MKT_SKID IS NULL\\n\\tORDER BY LINE_NUM)\\n\\tWHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_mkt_id_map_unk = spark.sql(query13)\\n\\n#DQ14 - Duplicated market after mapping\\n\\nquery14 = f\\\"\\\"\\\"SELECT \\n('Duplicated market after mapping') as DQ,\\nline_num as line_num, \\nvendor_tag as vendor_tag, \\nMKT_codes_new as MKT_codes_new, \\nvendor_tag_old as vendor_tag_old \\nFROM (\\nWITH data AS (\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM tier1_mkt_mtrlz_tbl src   \\t\\t\\t\\t\\n\\t\\t\\t\\tJOIN MM_MKT_SKID_CNTRT_LKP_VW lkp\\n                ON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\n                AND lkp.CNTRT_ID = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'TP'\\n),\\nskid AS (\\nSELECT MKT_skid FROM data \\nGROUP BY MKT_skid\\nHAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT line_num, extrn_code vendor_tag, EXTRN_MKT_ATTR_VAL_LIST MKT_codes_new, EXTRN_MKT_ID vendor_tag_old FROM data\\nJOIN skid on data.MKT_skid = skid.MKT_skid\\nORDER BY line_num)\\n\\tWHERE LIMIT 500 \\\"\\\"\\\"\\n \\ntier1_mkt_map_dup = spark.sql(query14)\\n\\n\\n# DQ16 - Missing/delivered hierarchies\\n\\nquery16 = f\\\"\\\"\\\"WITH prod_dlvr\\n     AS (SELECT src.EXTRN_PROD_ID,\\n                COALESCE(strct.STRCT_CODE, src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0) AS STRCT_CODE,\\n                strct.STRCT_NAME\\n         FROM   tier1_prod_mtrlz_tbl src\\n                LEFT OUTER JOIN MM_STRCT_LKP strct\\n                  ON src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0 = strct.STRCT_CODE),\\n\\n     prod_hier_dlvr\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   PROD_DLVR\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     miss_prod_hier_fct_dlvr\\n     AS (SELECT /*+ materialize */ STRCT_CODE\\n         FROM (SELECT STRCT_CODE FROM prod_hier_dlvr\\n               MINUS\\n               SELECT DISTINCT prod.STRCT_CODE\\n               FROM   PROD_DLVR prod\\n                      JOIN tier1_fact_mtrlz_tbl fct\\n                        ON prod.EXTRN_PROD_ID = fct.PROD_EXTRN_CODE)),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id} )\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id} )\\n            AND RUN_LATEST=1),\\n\\n     prod_last_run\\n     AS (SELECT plc.EXTRN_PROD_ID,\\n                STRCT_CODE,\\n                STRCT_NAME\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_PROD_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   LAST_RUN)) plc\\n                JOIN MM_PROD_DIM dim\\n                  ON plc.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND plc.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                     AND plc.PROD_SKID = dim.PROD_SKID\\n                     AND dim.CNTRT_ID = {cntrt_id}\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_plc_last_run\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   prod_last_run\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     last_run_prttn\\n     AS (SELECT RUN_ID,\\n                MM_TIME_PERD_END_DATE AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM   MM_RUN_PRTTN_PLC\\n         WHERE  RUN_ID = (SELECT RUN_ID\\n                          FROM   last_run)\\n            AND TIME_PERD_CLASS_CODE = 'MTH'\\n            AND CNTRT_ID = {cntrt_id}),\\n\\n     fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_run_prttn tp\\n                  ON fct.RUN_ID = tp.RUN_ID\\n                     AND fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   FCT_LAST_RUN fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_last_run\\n     AS (SELECT *\\n         FROM   prod_hier_plc_last_run\\n         UNION ALL\\n         SELECT *\\n         FROM   prod_hier_fct_last_run\\n         WHERE  (SELECT COUNT(*)\\n                 FROM   prod_hier_plc_last_run) = 0),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WK%' THEN\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = 'MTH'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_period_prttn tp\\n                  ON fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   fct_last_period fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_dlvr_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_last_run.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_last_run.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_last_run.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_last_run\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_last_run.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_fct_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_fct_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_fct_last_period\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr_vs_last_run.STRCT_CODE, prod_hier_dlvr_vs_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr_vs_last_run.STRCT_NAME, prod_hier_dlvr_vs_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   prod_hier_dlvr_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   prod_hier_dlvr_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   prod_hier_dlvr_vs_last_run\\n                FULL OUTER JOIN prod_hier_dlvr_vs_last_period\\n                             ON prod_hier_dlvr_vs_last_run.STRCT_CODE = prod_hier_dlvr_vs_last_period.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_run\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_run.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_run\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_run.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_period\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_period\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     ret\\n     AS (SELECT tmp.STRCT_CODE,\\n                tmp.STRCT_NAME,\\n                CASE\\n                  WHEN LAST_RUN_MISS_VAL = 'Y'\\n                       AND LAST_RUN_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_RUN_STATUS\\n                END\\n                AS LAST_RUN_STATUS,\\n                CASE\\n                  WHEN LAST_PERIOD_MISS_VAL = 'Y'\\n                       AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_PERIOD_STATUS\\n                END\\n                AS LAST_PERIOD_STATUS,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.STRCT_CODE)\\n                AS RANK_NUMBER\\n         FROM   (SELECT COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_dlvr_vs_all_cases.STRCT_CODE)\\n                        AS STRCT_CODE,\\n                        COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_dlvr_vs_all_cases.STRCT_NAME)\\n                        AS STRCT_NAME,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS,\\n                        miss_prod_hier_vs_last_run.MISSING_IND AS LAST_RUN_MISS_VAL,\\n                        miss_prod_hier_vs_last_period.MISSING_IND AS LAST_PERIOD_MISS_VAL\\n                 FROM   prod_hier_dlvr\\n                        FULL OUTER JOIN prod_hier_dlvr_vs_all_cases\\n                                     ON prod_hier_dlvr.STRCT_CODE = prod_hier_dlvr_vs_all_cases.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_run\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_run.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_period\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_period.STRCT_CODE) tmp)\\n\\nSELECT --ROWNUM AS LINE_NUMBER,\\n       ('Missing/delivered hierarchies') as DQ,\\n       STRCT_CODE STRCT_CODE,\\n       STRCT_NAME STRCT_NAME,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT STRCT_CODE,\\n               STRCT_NAME,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  STRCT_CODE,\\n                  RANK_NUMBER)\\\"\\\"\\\"\\n\\ntier1_miss_dlvrd_hier = spark.sql(query16)\\n\\n\\n# DQ17 - Missing/delivered measures\\n\\nquery17 = f\\\"\\\"\\\"WITH measr_delivery\\n     AS (SELECT src.EXTRN_CODE AS EXTRN_MEASR_ID,\\n                src.EXTRN_NAME AS EXTRN_MEASR_NAME,\\n                ml.MEASR_ID,\\n                ml.MEASR_NAME,\\n                COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   tier1_measr_map src\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON src.MEASR_ID = ml.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id})\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id})\\n            AND RUN_LATEST=1),\\n\\n     measr_last_run\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   last_run)\\n                 AND    CALC_IND = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WK%' THEN\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = 'MTH'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     last_period_runs\\n     AS (SELECT DISTINCT RUN_ID\\n         FROM   MM_RUN_PRTTN_PLC plc\\n                JOIN LAST_PERIOD_PRTTN prttn\\n                  ON plc.CNTRT_ID = prttn.CNTRT_ID\\n                     AND plc.SRCE_SYS_ID = prttn.SRCE_SYS_ID\\n                     AND plc.MM_TIME_PERD_END_DATE = prttn.TIME_PERD_END_DATE\\n                     AND plc.FACT_TYPE_CODE = prttn.FACT_TYPE_CODE\\n                     AND plc.PROD_PRTTN_CODE = prttn.PROD_PRTTN_CODE),\\n\\n     measr_last_period\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  RUN_ID in (SELECT RUN_ID\\n                                  FROM   last_period_runs)\\n                 AND    CALC_IND = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                     AND ml.USE_IND = 'Y'\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     measr_delivery_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_run.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_run.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_run.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_run.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_run.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_run.EXTRN_MEASR_ID, 'N', NVL2(measr_last_run.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_run\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_run.EXTRN_MEASR_ID\\n                                OR (measr_last_run.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_run.MEASR_ID)),\\n\\n     measr_delivery_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_period.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_period.EXTRN_MEASR_ID, 'N', NVL2(measr_last_period.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_period\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_period.EXTRN_MEASR_ID\\n                                OR (measr_last_period.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_period.MEASR_ID)),\\n\\n     measr_delivery_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_ID, measr_delivery_vs_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_NAME, measr_delivery_vs_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_ID, measr_delivery_vs_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_NAME, measr_delivery_vs_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.FACTR, measr_delivery_vs_last_period.FACTR) AS FACTR,\\n                                   measr_delivery_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   measr_delivery_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   measr_delivery_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   measr_delivery_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   measr_delivery_vs_last_run\\n                FULL OUTER JOIN measr_delivery_vs_last_period\\n                             ON measr_delivery_vs_last_run.EXTRN_MEASR_ID = measr_delivery_vs_last_period.EXTRN_MEASR_ID),\\n\\n     ret\\n     AS (SELECT tmp.MEASR_ID,\\n                tmp.MEASR_NAME,\\n                tmp.EXTRN_MEASR_ID,\\n                tmp.EXTRN_MEASR_NAME,\\n                LAST_RUN_STATUS,\\n                LAST_PERIOD_STATUS,\\n                MULTIPLICATOR,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.EXTRN_MEASR_NAME)\\n                AS RANK_NUMBER\\n         FROM   (SELECT\\n                        --COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_delivery_vs_all_cases.EXTRN_MEASR_ID)\\n                        COALESCE(measr_delivery_vs_all_cases.EXTRN_MEASR_ID, measr_delivery.EXTRN_MEASR_ID) -- LGrigorovicius (20210723) : order changed so previously processed measures tags would be visible in validation report\\n\\n                        AS EXTRN_MEASR_ID,\\n                        COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_delivery_vs_all_cases.EXTRN_MEASR_NAME)\\n\\n                        AS EXTRN_MEASR_NAME,\\n                        COALESCE(measr_delivery.MEASR_ID, measr_delivery_vs_all_cases.MEASR_ID)\\n\\n                        AS MEASR_ID,\\n                        COALESCE(measr_delivery.MEASR_NAME, measr_delivery_vs_all_cases.MEASR_NAME)\\n\\n                        AS MEASR_NAME,\\n                        COALESCE(measr_delivery.FACTR, measr_delivery_vs_all_cases.FACTR)\\n\\n                        AS MULTIPLICATOR,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS\\n                 FROM   measr_delivery\\n                        FULL OUTER JOIN measr_delivery_vs_all_cases\\n                                     ON measr_delivery.MEASR_ID = measr_delivery_vs_all_cases.MEASR_ID) tmp)\\n\\nSELECT -- ROWNUM AS LINE_NUMBER,\\n('Missing/delivered measures') as DQ,\\n       MEASR_ID MEASR_ID,\\n       MEASR_NAME MEASR_NAME,\\n       EXTRN_MEASR_ID EXTRN_MEASR_ID,\\n       EXTRN_MEASR_NAME EXTRN_MEASR_NAME,\\n       MULTIPLICATOR MULTIPLICATOR,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT MEASR_ID,\\n               MEASR_NAME,\\n               EXTRN_MEASR_ID,\\n               EXTRN_MEASR_NAME,\\n               MULTIPLICATOR,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  CASE\\n                    WHEN LAST_RUN_STATUS = 'MISSING' OR LAST_PERIOD_STATUS = 'MISSING' THEN 1\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 2\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'NEW' THEN 3\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 4\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 5\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 6\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'NEW' THEN 7\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 8\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'NEW' THEN 9\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 10\\n                    ELSE 11\\n                  END,\\n                  RANK_NUMBER)\\n\\\"\\\"\\\"\\ntier1_miss_dlvrd_measr = spark.sql(query17)\\n\\n# Combine\\nfrom pyspark.sql.functions import lit, row_number, monotonically_increasing_id, col, when\\nfrom pyspark.sql.window import Window\\nfrom pyspark.sql.types import *\\n\\ncolumns = StructType([StructField('row_id', IntegerType(), True)])\\ndf_empty = spark.createDataFrame(data=[], schema=columns)\\n\\ndq1 = df_unk_msr\\ndq2 = df_dup_msr_af_map\\ndq3 = df_no_data_measr\\ndq4 = prod_attr_unk\\ndq5 = prod_attr_brand_mlt\\ndq6 = fact_time_perd_miss\\ndq7 = fact_mkt_miss\\ndq9 = df_time_period_wks_nt_gen\\ndq10 = df_dup_time_period_aftr_mapng\\ndq11 = df_msng_delv_areas\\ndq12 = tier1_time_perd_id_map_unk\\ndq13 = tier1_mkt_id_map_unk\\ndq14 = tier1_mkt_map_dup\\ndq16 = tier1_miss_dlvrd_hier\\ndq17 = tier1_miss_dlvrd_measr\\n\\ndf_combine = dq1.unionByName(dq2, True).unionByName(dq3, True).unionByName(dq4, True).unionByName(dq5, True).unionByName(dq6, True).unionByName(dq7, True).unionByName(dq9, True).unionByName(dq10, True).unionByName(dq11, True).unionByName(dq12, True).unionByName(dq13, True).unionByName(dq14, True).unionByName(dq16, True).unionByName(dq17, True)\\n\\ndata = []\\n\\ndq1_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Unknown measure' \\\", '', 'false', 'Unknown measure', 100 )\\ndata.append(dq1_val)\\ndq2_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Duplicated measure after mapping' \\\", '', 'false', 'Duplicated measure after mapping', 100 )\\ndata.append(dq2_val)\\ndq3_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'No data- NA or zero in every input row, for measure' \\\", '', 'false', 'No data- NA or zero in every input row, for measure', 100 )\\ndata.append(dq3_val)\\ndq4_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Unknown attribute value for product' \\\", '', 'false', 'Unknown attribute value for product', 100 )\\ndata.append(dq4_val)\\ndq5_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'The same brand placed under two companies' \\\", '', 'false', 'The same brand placed under two companies', 100 )\\ndata.append(dq5_val)\\ndq6_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'No data: N/A or zero in every input row, for time period' \\\", '', 'false', 'No data: N/A or zero in every input row, for time period', 100 )\\ndata.append(dq6_val)\\ndq7_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'No data: N/A or zero in every input row, for market' \\\", '', 'false', 'No data: N/A or zero in every input row, for market', 100 )\\ndata.append(dq7_val)\\ndq8_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Invalid combination of attributes for product' \\\", '', 'false', 'Invalid combination of attributes for product' , 100 ) # Need to check\\ndata.append(dq8_val)\\ndq9_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Time period of weeks not properly generated' \\\", '', 'false', 'Time period of weeks not properly generated' , 100 )\\ndata.append(dq9_val)\\ndq10_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Duplicated time period after mapping' \\\", '', 'false', 'Duplicated time period after mapping', 100 )\\ndata.append(dq10_val)\\ndq11_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Missing/delivered areas' \\\", '', 'false', 'Missing/delivered areas', 100 )\\ndata.append(dq11_val)\\ndq12_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Unknown time period' \\\", '', 'false', 'Unknown time period', 100 )\\ndata.append(dq12_val)\\ndq13_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Unknown market' \\\", '', 'false', 'Unknown market', 100 )\\ndata.append(dq13_val)\\ndq14_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Duplicated market after mapping' \\\", '', 'false', 'Duplicated market after mapping', 100 )\\ndata.append(dq14_val)\\ndq15_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Modified product attributes' \\\", '', 'false', 'Modified product attributes', 100 ) # Need to check\\ndata.append(dq15_val)\\ndq16_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Missing/delivered hierarchies' \\\", '', 'false', 'Missing/delivered hierarchies', 100 )\\ndata.append(dq16_val)\\ndq17_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Missing/delivered measures' \\\", '', 'false', 'Missing/delivered measures', 100 )\\ndata.append(dq17_val)\\n\\n#Prepare KPI\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\nschema_for_kpi = StructType([ \\n    StructField(\\\"column\\\",StringType(),True),\\n    StructField(\\\"kpi_type\\\",StringType(),True),\\n    StructField(\\\"param_1\\\",StringType(),True),\\n    StructField(\\\"param_2\\\",StringType(),True),\\n    StructField(\\\"fail_on_error\\\",StringType(),True),\\n    StructField(\\\"check_description\\\",StringType(),True),\\n    StructField(\\\"target\\\",StringType(),True)\\n  ])\\n\\ndf_ref = spark.createDataFrame(data, schema_for_kpi)\\n\\n\\ndict_all_dfs['df_ref'] = {\\\"df_object\\\" :df_ref}\\ndf_output_dict['df_ref'] = df_ref\\n\\ndict_all_dfs['df_combine_ref'] = {\\\"df_object\\\" :df_combine}\\ndf_output_dict['df_combine_ref'] = df_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"tier1_measr_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_dvm_100_measr\"\n    },\n    {\n      \"name\": \"tier1_prod_gav\"\n    },\n    {\n      \"name\": \"tier1_time_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_conv\"\n    },\n    {\n      \"name\": \"tier1_mkt_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_measr_map_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fact_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl2\"\n    },\n    {\n      \"name\": \"tier1_prod_mtrlz_tbl\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_ref\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_combine_ref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Reference Data - Validations - v1 -1.1",
      "predecessorName": "Reference Data - Validations - v1",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n#Variables\\n\\ntier1_vendr_id = <<VENDOR_ID>>\\ntier1_fact_type_code = 'TP'\\ncntrt_id = <<CNTRT_ID>>\\ntier1_cntrt_id = cntrt_id\\ncntry_id = '<<ISO_CNTRY_CODE>>'\\ntier1_cntry_id = cntry_id\\ntier1_run_id = <<PROCESS_RUN_KEY>>\\nsrce_sys_id = <<SRCE_SYS_ID>>\\nrun_id = tier1_run_id\\n\\npath = '<@@PATH1@@>'\\n\\n\\n# Dataframes from Prior Steps\\n\\ntier1_measr_mtrlz_tbl = dict_all_dfs['tier1_measr_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_measr_mtrlz_tbl.createOrReplaceTempView('tier1_measr_mtrlz_tbl')\\n\\ntier1_fct_dvm_100_measr = dict_all_dfs['tier1_fct_dvm_100_measr'][\\\"df_object\\\"]\\ntier1_fct_dvm_100_measr.createOrReplaceTempView('tier1_fct_dvm_100_measr')\\n\\ntier1_prod_gav = dict_all_dfs['tier1_prod_gav'][\\\"df_object\\\"]\\ntier1_prod_gav.createOrReplaceTempView('tier1_prod_gav')\\n\\ntier1_time_mtrlz_tbl = dict_all_dfs['tier1_time_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_time_mtrlz_tbl.createOrReplaceTempView('tier1_time_mtrlz_tbl')\\n\\ntier1_fct_conv = dict_all_dfs['tier1_fct_conv'][\\\"df_object\\\"]\\n# Need to get the correct dataframe here.\\ntier1_fct_conv.createOrReplaceTempView('tier1_fct_conv')\\n\\ntier1_mkt_mtrlz_tbl = dict_all_dfs['tier1_mkt_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_mkt_mtrlz_tbl.createOrReplaceTempView('tier1_mkt_mtrlz_tbl')\\n\\ntier1_measr_map_tbl = dict_all_dfs['tier1_measr_map_tbl'][\\\"df_object\\\"]\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map_tbl')\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map')\\n\\ntier1_fct_mtrlz_tbl = dict_all_dfs['tier1_fct_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl.createOrReplaceTempView('tier1_fct_mtrlz_tbl')\\n\\ntier1_fact_mtrlz_tbl = dict_all_dfs['tier1_fact_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fact_mtrlz_tbl.createOrReplaceTempView('tier1_fact_mtrlz_tbl')\\n\\nmm_time_perd_fdim = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_FDIM_VW/')\\nmm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\nmm_time_perd_assoc_type = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_TYPE_VW/')\\nmm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\nmm_time_perd_assoc = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_VW/')\\nmm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\ndf_mm_run_time_perd_plc=spark.read.format('parquet').load(f'/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\n\\ntier1_fct_mtrlz_tbl2 = dict_all_dfs['tier1_fct_mtrlz_tbl2'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl2.createOrReplaceTempView('tier1_fct_mtrlz_tbl2')\\n\\nmm_mkt_xref = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_XREF/')\\nmm_mkt_xref.createOrReplaceTempView('mm_mkt_xref')\\n\\nmm_mkt_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_DIM_VW/')\\nmm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\ndf_mm_run_time_perd_plc=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc_v1')\\n\\nsql_fmt=\\\"\\\"\\\"select  cast(run_id as double) as run_id, time_perd_id,extrn_time_perd_id,rcd_orign_code from mm_run_time_perd_plc_v1\\\"\\\"\\\"\\nmm_run_time_perd_plc_v1=spark.sql(sql_fmt)\\nmm_run_time_perd_plc_v1.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\ndf_time_perd_sdads=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/TIME_PERD_SDADS/')\\ndf_time_perd_sdads.createOrReplaceTempView('mm_time_perd')\\n\\ndf_mm_mkt_skid_cntrt_lkp_vw=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_SKID_LKP/')\\ndf_mm_mkt_skid_cntrt_lkp_vw.createOrReplaceTempView('mm_mkt_skid_cntrt_lkp_vw')\\n\\nmm_run_prod_plc = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PROD_PLC/')\\nmm_run_prod_plc.createOrReplaceTempView('mm_run_prod_plc')\\n\\nmm_prod_sdim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_SDIM_VW/')\\nmm_prod_sdim.createOrReplaceTempView('mm_prod_sdim')\\n\\nmm_prod_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_DIM_VW/')\\nmm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\ntier1_prod_mtrlz_tbl = dict_all_dfs['tier1_prod_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_prod_mtrlz_tbl.createOrReplaceTempView('tier1_prod_mtrlz_tbl')\\n\\nMM_RUN_PRTTN_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PRTTN_PLC/')\\nMM_RUN_PRTTN_PLC.createOrReplaceTempView('MM_RUN_PRTTN_PLC')\\n\\nMM_RUN_MEASR_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_MEASR_PLC/')\\nMM_RUN_MEASR_PLC.createOrReplaceTempView('MM_RUN_MEASR_PLC')\\n\\n# tables from Postgres\\n\\n\\n\\n# mm_measr_id_lkp\\nmm_measr_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_id_lkp\\\")\\nmm_measr_id_lkp.createOrReplaceTempView('mm_measr_id_lkp')\\n\\n# mm_measr_lkp\\nmm_measr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_lkp\\\")\\nmm_measr_lkp.createOrReplaceTempView('mm_measr_lkp')\\n\\n# mm_cntrt_lkp\\nmm_cntrt_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_cntrt_lkp\\\")\\nmm_cntrt_lkp.createOrReplaceTempView('mm_cntrt_lkp')\\n\\n# mm_time_perd_id_lkp\\ndf_mm_time_perd_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_time_perd_id_lkp\\\")\\ndf_mm_time_perd_id_lkp.createOrReplaceTempView('mm_time_perd_id_lkp')\\n\\n# dpf_all_run_vw\\ndpf_all_run_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_process_run_lkp_vw\\\")\\ndpf_all_run_vw.createOrReplaceTempView('dpf_all_run_vw')\\n\\n# mm_categ_strct_attr_assoc_vw\\nmm_categ_strct_attr_assoc_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_categ_strct_attr_assoc_vw\\\")\\nmm_categ_strct_attr_assoc_vw.createOrReplaceTempView('mm_categ_strct_attr_assoc_vw')\\n\\n# MM_PROD_ATTR_VAL_LKP\\nMM_PROD_ATTR_VAL_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_PROD_ATTR_VAL_LKP\\\")\\nMM_PROD_ATTR_VAL_LKP.createOrReplaceTempView('MM_PROD_ATTR_VAL_LKP')\\n\\n# mm_strct_lvl_lkp\\nmm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_strct_lvl_lkp\\\")\\nmm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\n# MM_CNTRT_TIME_PERD_TYPE_ASSOC\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_CNTRT_TIME_PERD_TYPE_ASSOC\\\")\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC.createOrReplaceTempView('MM_CNTRT_TIME_PERD_TYPE_ASSOC')\\n\\n# MM_STRCT_LKP\\nMM_STRCT_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_STRCT_LKP\\\")\\nMM_STRCT_LKP.createOrReplaceTempView('MM_STRCT_LKP')\\n\\n# MM_MEASR_VENDR_FACTR_LKP\\nMM_MEASR_VENDR_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_VENDR_FACTR_LKP\\\")\\nMM_MEASR_VENDR_FACTR_LKP.createOrReplaceTempView('MM_MEASR_VENDR_FACTR_LKP')\\n\\n# MM_MEASR_CNTRT_FACTR_LKP\\nMM_MEASR_CNTRT_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_CNTRT_FACTR_LKP\\\")\\nMM_MEASR_CNTRT_FACTR_LKP.createOrReplaceTempView('MM_MEASR_CNTRT_FACTR_LKP')\\n\\n# WORK\\n\\n# 1.Unknown measure\\n\\nquery1 = f\\\"\\\"\\\" SELECT \\n('Unknown measure') as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (\\n            SELECT tier1_measr_mtrlz_tbl.LINE_NUM, tier1_measr_mtrlz_tbl.EXTRN_CODE, tier1_measr_mtrlz_tbl.EXTRN_NAME\\n            FROM tier1_measr_mtrlz_tbl\\n            LEFT JOIN mm_measr_id_lkp ON EXTRN_MEASR_ID = EXTRN_CODE AND MM_MEASR_ID_LKP.VENDR_ID = {tier1_vendr_id}\\n\\t\\t\\tand (fact_type_code = '{tier1_fact_type_code}' OR fact_type_code = '[U]')\\n            WHERE mm_measr_id_lkp.EXTRN_MEASR_ID IS NULL \\t\\t\\t\\n\\t\\t    ORDER BY tier1_measr_mtrlz_tbl.LINE_NUM)\\n\\t\\t    --WHERE limit 500 \\\"\\\"\\\"\\ndf_unk_msr = spark.sql(query1)\\n\\n# 2.Duplicated measure after mapping\\n\\nquery2 = f\\\"\\\"\\\"SELECT ('Duplicated measure after mapping') as DQ, line_num line_num, \\nvendor_tag vendor_tag, \\nextrn_name extrn_name, \\nvendor_tag_old vendor_tag_old, \\nMEASR_DESC MEASR_DESC \\nFROM (\\nWITH data_init AS (\\n    SELECT src.line_num, src.extrn_code, src.extrn_name, lkp.EXTRN_MEASR_ID, lkp.MEASR_ID, mlkp.MEASR_DESC, \\n    RANK() over (\\n            partition by lkp.extrn_measr_id\\n            order by lkp.EXTRN_MEASR_ID, cntrt_id nulls last, cntry_id nulls last) as mapng_rank\\n    FROM tier1_measr_mtrlz_tbl src\\n    JOIN mm_measr_id_lkp lkp\\n        ON lkp.EXTRN_MEASR_ID = src.EXTRN_CODE\\n        AND NVL(lkp.CNTRT_ID, {cntrt_id}) = {cntrt_id}\\n        AND NVL(lkp.CNTRY_ID, '{cntry_id}') = '{cntry_id}'\\n    JOIN mm_measr_lkp mlkp\\n        ON lkp.MEASR_ID=mlkp.MEASR_ID AND lkp.fact_type_code=mlkp.fact_type_code\\n        AND VENDR_ID = {tier1_vendr_id}\\n        AND lkp.FACT_TYPE_CODE = '{tier1_fact_type_code}'\\n        AND mlkp.use_ind='Y'\\n),\\ndata_filtr as (\\n    select line_num, extrn_code, extrn_name, extrn_measr_id, measr_id, measr_desc\\n    from data_init\\n    where mapng_rank = 1\\n),\\nmid AS (\\n  SELECT MEASR_id FROM data_filtr\\n  GROUP BY MEASR_id\\n  HAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT ('Duplicated measure after mapping') as DQ, line_num, extrn_code vendor_tag, extrn_name, EXTRN_MEASR_ID vendor_tag_old, MEASR_DESC FROM data_filtr\\n JOIN mid on data_filtr.MEASR_id = mid.MEASR_id\\n ORDER BY line_num\\n)\\n--WHERE limit 500 \\\"\\\"\\\"\\n\\ndf_dup_msr_af_map = spark.sql(query2)\\n\\n# 3.No data: N/A or zero in every input row, for measure\\n\\nquery3 = f\\\"\\\"\\\"SELECT m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19,m20,\\nm21,m22,m23,m24,m25,m26,m27,m28,m29,m30,m31,m32,m33,m34,m35,m36,m37,m38,m39,m40,\\nm41,m42,m43,m44,m45,m46,m47,m48,m49,m50,m51,m52,m53,m54,m55,m56,m57,m58,m59,m60,\\nm61,m62,m63,m64,m65,m66,m67,m68,m69,m70,m71,m72,m73,m74,m75,m76,m77,m78,m79,m80,\\nm81,m82,m83,m84,m85,m86,m87,m88,m89,m90,m91,m92,m93,m94,m95,m96,m97,m98,m99,m100,\\n('No data- NA or zero in every input row, for measure') as DQ,\\nline_num line_num,\\nextrn_code extrn_code,\\nextrn_name extrn_name,\\nuse_ind use_ind \\nFROM (\\n   WITH ordm AS (\\n   SELECT msr.*, mlkp.USE_IND AS USE_IND, ROW_NUMBER() OVER (ORDER BY LINE_NUM) rnm FROM tier1_measr_mtrlz_tbl msr\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id} AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt\\n   ON msr.EXTRN_CODE = MEASR_DEFLT.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '[U]' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt_u\\n   ON msr.EXTRN_CODE = MEASR_DEFLT_U.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID = '{cntry_id}') measr_cntry /* lookup limited to contract related country */\\n   ON msr.EXTRN_CODE = MEASR_CNTRY.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRT_ID = '{cntry_id}') measr_cntrt /* lookup limited to processed contract */\\n   ON msr.EXTRN_CODE = MEASR_CNTRT.EXTRN_MEASR_ID       \\n   JOIN MM_MEASR_LKP mlkp on COALESCE(MEASR_CNTRT.MEASR_ID, MEASR_CNTRY.MEASR_ID, MEASR_DEFLT.MEASR_ID, MEASR_DEFLT_U.MEASR_ID) = mlkp.measr_id\\n   AND mlkp.fact_type_code in ('{tier1_fact_type_code}','[U]')\\n   ),\\n    err AS (\\nSELECT\\n   NVL(MAX(FACT_AMT_1), 0) m1,NVL(MAX(FACT_AMT_2), 0) m2,NVL(MAX(FACT_AMT_3), 0) m3,NVL(MAX(FACT_AMT_4), 0) m4,\\nNVL(MAX(FACT_AMT_5), 0) m5,NVL(MAX(FACT_AMT_6), 0) m6,NVL(MAX(FACT_AMT_7), 0) m7,NVL(MAX(FACT_AMT_8), 0) m8,NVL(MAX(FACT_AMT_9), 0) m9,\\nNVL(MAX(FACT_AMT_10), 0) m10,NVL(MAX(FACT_AMT_11), 0) m11,NVL(MAX(FACT_AMT_12), 0) m12,NVL(MAX(FACT_AMT_13), 0) m13,NVL(MAX(FACT_AMT_14), 0) m14,\\nNVL(MAX(FACT_AMT_15), 0) m15,NVL(MAX(FACT_AMT_16), 0) m16,NVL(MAX(FACT_AMT_17), 0) m17,NVL(MAX(FACT_AMT_18), 0) m18,NVL(MAX(FACT_AMT_19), 0) m19,\\nNVL(MAX(FACT_AMT_20), 0) m20,NVL(MAX(FACT_AMT_21), 0) m21,NVL(MAX(FACT_AMT_22), 0) m22,NVL(MAX(FACT_AMT_23), 0) m23,NVL(MAX(FACT_AMT_24), 0) m24,\\nNVL(MAX(FACT_AMT_25), 0) m25,NVL(MAX(FACT_AMT_26), 0) m26,NVL(MAX(FACT_AMT_27), 0) m27,NVL(MAX(FACT_AMT_28), 0) m28,NVL(MAX(FACT_AMT_29), 0) m29,\\nNVL(MAX(FACT_AMT_30), 0) m30,NVL(MAX(FACT_AMT_31), 0) m31,NVL(MAX(FACT_AMT_32), 0) m32,NVL(MAX(FACT_AMT_33), 0) m33,NVL(MAX(FACT_AMT_34), 0) m34,\\nNVL(MAX(FACT_AMT_35), 0) m35,NVL(MAX(FACT_AMT_36), 0) m36,NVL(MAX(FACT_AMT_37), 0) m37,NVL(MAX(FACT_AMT_38), 0) m38,NVL(MAX(FACT_AMT_39), 0) m39,\\nNVL(MAX(FACT_AMT_40), 0) m40,NVL(MAX(FACT_AMT_41), 0) m41,NVL(MAX(FACT_AMT_42), 0) m42,NVL(MAX(FACT_AMT_43), 0) m43,NVL(MAX(FACT_AMT_44), 0) m44,\\nNVL(MAX(FACT_AMT_45), 0) m45,NVL(MAX(FACT_AMT_46), 0) m46,NVL(MAX(FACT_AMT_47), 0) m47,NVL(MAX(FACT_AMT_48), 0) m48,NVL(MAX(FACT_AMT_49), 0) m49,\\nNVL(MAX(FACT_AMT_50), 0) m50,NVL(MAX(FACT_AMT_51), 0) m51,NVL(MAX(FACT_AMT_52), 0) m52,NVL(MAX(FACT_AMT_53), 0) m53,NVL(MAX(FACT_AMT_54), 0) m54,\\nNVL(MAX(FACT_AMT_55), 0) m55,NVL(MAX(FACT_AMT_56), 0) m56,NVL(MAX(FACT_AMT_57), 0) m57,NVL(MAX(FACT_AMT_58), 0) m58,NVL(MAX(FACT_AMT_59), 0) m59,\\nNVL(MAX(FACT_AMT_60), 0) m60,NVL(MAX(FACT_AMT_61), 0) m61,NVL(MAX(FACT_AMT_62), 0) m62,NVL(MAX(FACT_AMT_63), 0) m63,NVL(MAX(FACT_AMT_64), 0) m64,\\nNVL(MAX(FACT_AMT_65), 0) m65,NVL(MAX(FACT_AMT_66), 0) m66,NVL(MAX(FACT_AMT_67), 0) m67,NVL(MAX(FACT_AMT_68), 0) m68,NVL(MAX(FACT_AMT_69), 0) m69,\\nNVL(MAX(FACT_AMT_70), 0) m70,NVL(MAX(FACT_AMT_71), 0) m71,NVL(MAX(FACT_AMT_72), 0) m72,NVL(MAX(FACT_AMT_73), 0) m73,NVL(MAX(FACT_AMT_74), 0) m74,\\nNVL(MAX(FACT_AMT_75), 0) m75,NVL(MAX(FACT_AMT_76), 0) m76,NVL(MAX(FACT_AMT_77), 0) m77,NVL(MAX(FACT_AMT_78), 0) m78,NVL(MAX(FACT_AMT_79), 0) m79,\\nNVL(MAX(FACT_AMT_80), 0) m80,NVL(MAX(FACT_AMT_81), 0) m81,NVL(MAX(FACT_AMT_82), 0) m82,NVL(MAX(FACT_AMT_83), 0) m83,NVL(MAX(FACT_AMT_84), 0) m84,\\nNVL(MAX(FACT_AMT_85), 0) m85,NVL(MAX(FACT_AMT_86), 0) m86,NVL(MAX(FACT_AMT_87), 0) m87,NVL(MAX(FACT_AMT_88), 0) m88,NVL(MAX(FACT_AMT_89), 0) m89,\\nNVL(MAX(FACT_AMT_90), 0) m90,NVL(MAX(FACT_AMT_91), 0) m91,NVL(MAX(FACT_AMT_92), 0) m92,NVL(MAX(FACT_AMT_93), 0) m93,NVL(MAX(FACT_AMT_94), 0) m94,\\nNVL(MAX(FACT_AMT_95), 0) m95,NVL(MAX(FACT_AMT_96), 0) m96,NVL(MAX(FACT_AMT_97), 0) m97,NVL(MAX(FACT_AMT_98), 0) m98,NVL(MAX(FACT_AMT_99), 0) m99,\\nNVL(MAX(FACT_AMT_100), 0) m100 FROM tier1_fct_dvm_100_measr\\n) \\n            \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=1) ON 1=1 WHERE m1=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=2) ON 1=1 WHERE m2=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=3) ON 1=1 WHERE m3=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=4) ON 1=1 WHERE m4=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=5) ON 1=1 WHERE m5=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=6) ON 1=1 WHERE m6=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=7) ON 1=1 WHERE m7=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=8) ON 1=1 WHERE m8=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=9) ON 1=1 WHERE m9=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=10) ON 1=1 WHERE m10=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=11) ON 1=1 WHERE m11=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=12) ON 1=1 WHERE m12=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=13) ON 1=1 WHERE m13=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=14) ON 1=1 WHERE m14=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=15) ON 1=1 WHERE m15=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=16) ON 1=1 WHERE m16=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=17) ON 1=1 WHERE m17=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=18) ON 1=1 WHERE m18=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=19) ON 1=1 WHERE m19=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=20) ON 1=1 WHERE m20=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\n         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=21) ON 1=1 WHERE m21=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=22) ON 1=1 WHERE m22=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=23) ON 1=1 WHERE m23=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=24) ON 1=1 WHERE m24=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=25) ON 1=1 WHERE m25=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=26) ON 1=1 WHERE m26=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=27) ON 1=1 WHERE m27=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=28) ON 1=1 WHERE m28=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=29) ON 1=1 WHERE m29=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=30) ON 1=1 WHERE m30=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=31) ON 1=1 WHERE m31=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=32) ON 1=1 WHERE m32=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=33) ON 1=1 WHERE m33=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=34) ON 1=1 WHERE m34=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=35) ON 1=1 WHERE m35=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=36) ON 1=1 WHERE m36=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=37) ON 1=1 WHERE m37=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=38) ON 1=1 WHERE m38=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=39) ON 1=1 WHERE m39=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=40) ON 1=1 WHERE m40=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=41) ON 1=1 WHERE m41=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=42) ON 1=1 WHERE m42=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=43) ON 1=1 WHERE m43=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=44) ON 1=1 WHERE m44=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=45) ON 1=1 WHERE m45=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=46) ON 1=1 WHERE m46=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=47) ON 1=1 WHERE m47=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=48) ON 1=1 WHERE m48=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=49) ON 1=1 WHERE m49=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=50) ON 1=1 WHERE m50=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=51) ON 1=1 WHERE m51=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=52) ON 1=1 WHERE m52=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=53) ON 1=1 WHERE m53=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=54) ON 1=1 WHERE m54=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=55) ON 1=1 WHERE m55=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=56) ON 1=1 WHERE m56=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=57) ON 1=1 WHERE m57=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=58) ON 1=1 WHERE m58=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=59) ON 1=1 WHERE m59=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=60) ON 1=1 WHERE m60=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=61) ON 1=1 WHERE m61=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=62) ON 1=1 WHERE m62=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=63) ON 1=1 WHERE m63=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=64) ON 1=1 WHERE m64=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=65) ON 1=1 WHERE m65=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=66) ON 1=1 WHERE m66=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=67) ON 1=1 WHERE m67=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=68) ON 1=1 WHERE m68=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=69) ON 1=1 WHERE m69=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=70) ON 1=1 WHERE m70=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=71) ON 1=1 WHERE m71=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=72) ON 1=1 WHERE m72=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=73) ON 1=1 WHERE m73=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=74) ON 1=1 WHERE m74=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=75) ON 1=1 WHERE m75=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=76) ON 1=1 WHERE m76=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=77) ON 1=1 WHERE m77=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=78) ON 1=1 WHERE m78=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=79) ON 1=1 WHERE m79=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=80) ON 1=1 WHERE m80=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=81) ON 1=1 WHERE m81=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=82) ON 1=1 WHERE m82=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=83) ON 1=1 WHERE m83=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=84) ON 1=1 WHERE m84=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=85) ON 1=1 WHERE m85=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=86) ON 1=1 WHERE m86=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=87) ON 1=1 WHERE m87=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=88) ON 1=1 WHERE m88=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=89) ON 1=1 WHERE m89=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=90) ON 1=1 WHERE m90=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=91) ON 1=1 WHERE m91=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=92) ON 1=1 WHERE m92=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=93) ON 1=1 WHERE m93=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=94) ON 1=1 WHERE m94=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=95) ON 1=1 WHERE m95=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=96) ON 1=1 WHERE m96=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=97) ON 1=1 WHERE m97=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=98) ON 1=1 WHERE m98=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=99) ON 1=1 WHERE m99=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=100) ON 1=1 WHERE m100=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\n)\\n--WHERE limit 500 \\n\\\"\\\"\\\"\\ndf_no_data_measr = spark.sql(query3)\\n\\n# 4. Unknown attribute value for product\\n\\nquery4 = f\\\"\\\"\\\"SELECT ('Unknown attribute value for product') as DQ, LINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME, \\nATTR_CODE_LIST ATTR_CODE_LIST, \\nLVL LVL, \\nUNKNOWN UNKNOWN \\nFROM (WITH err AS (\\n    SELECT * FROM tier1_prod_gav\\n    WHERE (ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL) \\n    OR (ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL)\\n    OR (ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL)\\n    OR (ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL)\\n    OR (ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL)\\n    OR (ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL)\\n    OR (ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL)\\n    OR (ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL)\\n  --  OR (ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL) <GC> During develeopment, I dont see this column in sample dataframe. It should be corrected at Turbine Graph to populate this column\\n\\t)\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_1 AS LVL, ATTR_CODE_1 AS UNKNOWN FROM err WHERE ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_2 AS LVL, ATTR_CODE_2 AS UNKNOWN FROM err WHERE ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_3 AS LVL, ATTR_CODE_3 AS UNKNOWN FROM err WHERE ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_4 AS LVL, ATTR_CODE_4 AS UNKNOWN FROM err WHERE ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_5 AS LVL, ATTR_CODE_5 AS UNKNOWN FROM err WHERE ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_6 AS LVL, ATTR_CODE_6 AS UNKNOWN FROM err WHERE ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_7 AS LVL, ATTR_CODE_7 AS UNKNOWN FROM err WHERE ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_8 AS LVL, ATTR_CODE_8 AS UNKNOWN FROM err WHERE ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL\\n --   UNION ALL\\n\\t--SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_9 AS LVL, ATTR_CODE_9 AS UNKNOWN FROM err WHERE ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL\\n    )\\t\\n--\\tWHERE limit 100\\n--\\tORDER BY LINE_NUM \\\"\\\"\\\" \\nprod_attr_unk = spark.sql(query4).orderBy('LINE_NUM')\\n\\n# 5. The same brand placed under two companies\\n\\nquery5 = f\\\"\\\"\\\"SELECT \\n('The same brand placed under two companies') as DQ,\\nLINE_NUM LINE_NUM, PROD_SKID PROD_SKID, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_PROD_NAME 5EXTRN_PROD_NAME, \\nbrand_name brand_name, company_name company_name,\\nEXTRN_PROD_ATTR_VAL_LIST EXTRN_PROD_ATTR_VAL_LIST \\nFROM (\\n             SELECT DISTINCT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, brand_name, company_name,EXTRN_PROD_ATTR_VAL_LIST FROM (\\n     WITH TB AS (SELECT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, EXTRN_PROD_ATTR_VAL_LIST,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_BRAND_TXT' THEN attr_code_1  \\n      WHEN attr_phys_name_2 = 'PG_BRAND_TXT' THEN attr_code_2\\n      WHEN attr_phys_name_3 = 'PG_BRAND_TXT' THEN attr_code_3\\n      WHEN attr_phys_name_4 = 'PG_BRAND_TXT' THEN attr_code_4\\n      WHEN attr_phys_name_5 = 'PG_BRAND_TXT' THEN attr_code_5\\n      WHEN attr_phys_name_6 = 'PG_BRAND_TXT' THEN attr_code_6\\n      WHEN attr_phys_name_7 = 'PG_BRAND_TXT' THEN attr_code_7\\n      WHEN attr_phys_name_8 = 'PG_BRAND_TXT' THEN attr_code_8\\n    --  WHEN attr_phys_name_9 = 'PG_BRAND_TXT' THEN attr_code_9\\n     END brand,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_BRAND_TXT' THEN attr_val_1  \\n      WHEN attr_phys_name_2 = 'PG_BRAND_TXT' THEN attr_val_2\\n      WHEN attr_phys_name_3 = 'PG_BRAND_TXT' THEN attr_val_3\\n      WHEN attr_phys_name_4 = 'PG_BRAND_TXT' THEN attr_val_4\\n      WHEN attr_phys_name_5 = 'PG_BRAND_TXT' THEN attr_val_5\\n      WHEN attr_phys_name_6 = 'PG_BRAND_TXT' THEN attr_val_6\\n      WHEN attr_phys_name_7 = 'PG_BRAND_TXT' THEN attr_val_7\\n      WHEN attr_phys_name_8 = 'PG_BRAND_TXT' THEN attr_val_8\\n    --  WHEN attr_phys_name_9 = 'PG_BRAND_TXT' THEN attr_val_9\\n     END brand_name,\\n     CASE \\n      WHEN attr_phys_name_1 = 'PG_MFGR_TXT' THEN attr_code_1  \\n      WHEN attr_phys_name_2 = 'PG_MFGR_TXT' THEN attr_code_2\\n      WHEN attr_phys_name_3 = 'PG_MFGR_TXT' THEN attr_code_3\\n      WHEN attr_phys_name_4 = 'PG_MFGR_TXT' THEN attr_code_4\\n      WHEN attr_phys_name_5 = 'PG_MFGR_TXT' THEN attr_code_5\\n      WHEN attr_phys_name_6 = 'PG_MFGR_TXT' THEN attr_code_6\\n      WHEN attr_phys_name_7 = 'PG_MFGR_TXT' THEN attr_code_7\\n      WHEN attr_phys_name_8 = 'PG_MFGR_TXT' THEN attr_code_8\\n    --  WHEN attr_phys_name_9 = 'PG_MFGR_TXT' THEN attr_code_9\\n     END company,\\n\\t CASE \\n      WHEN attr_phys_name_1 = 'PG_MFGR_TXT' THEN attr_val_1  \\n      WHEN attr_phys_name_2 = 'PG_MFGR_TXT' THEN attr_val_2\\n      WHEN attr_phys_name_3 = 'PG_MFGR_TXT' THEN attr_val_3\\n      WHEN attr_phys_name_4 = 'PG_MFGR_TXT' THEN attr_val_4\\n      WHEN attr_phys_name_5 = 'PG_MFGR_TXT' THEN attr_val_5\\n      WHEN attr_phys_name_6 = 'PG_MFGR_TXT' THEN attr_val_6\\n      WHEN attr_phys_name_7 = 'PG_MFGR_TXT' THEN attr_val_7\\n      WHEN attr_phys_name_8 = 'PG_MFGR_TXT' THEN attr_val_8\\n    --  WHEN attr_phys_name_9 = 'PG_MFGR_TXT' THEN attr_val_9\\n     END company_name\\n      FROM tier1_prod_gav WHERE PROD_LVL_NAME ='BRAND')\\n\\t SELECT LINE_NUM, PROD_SKID, EXTRN_CODE, EXTRN_PROD_NAME, brand, company, brand_name, company_name, EXTRN_PROD_ATTR_VAL_LIST, approx_count_distinct(company) OVER (PARTITION BY brand) NR\\n     FROM TB\\n     ) WHERE NR>1 AND brand IS NOT NULL AND company IS NOT NULL\\n\\t )\\n--WHERE limit 100 \\n--ORDER BY brand_name\\\"\\\"\\\"\\n\\nprod_attr_brand_mlt = spark.sql(query5).orderBy('brand_name')\\n\\n# 6. No data: N/A or zero in every input row, for time period\\n\\nquery6 = f\\\"\\\"\\\"SELECT \\n('No data: N/A or zero in every input row, for time period') as DQ,\\nLINE_NUM dLINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT TIME_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY TIME_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_time_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.TIME_EXTRN_CODE \\nWHERE B.TIME_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\n--WHERE limit 500\\\"\\\"\\\"\\n\\nfact_time_perd_miss = spark.sql(query6)\\n\\n# 7. No data: N/A or zero in every input row, for market\\nquery7 = f\\\"\\\"\\\"SELECT \\n('No data: N/A or zero in every input row, for market') as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT MKT_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY MKT_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_mkt_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.MKT_EXTRN_CODE \\nWHERE B.MKT_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\n--WHERE limit 500 \\\"\\\"\\\"\\n\\nfact_mkt_miss = spark.sql(query7)\\n\\n# Create view mm_time_perd_assoc_tier1_vw\\n\\nquery = f\\\"\\\"\\\"with CAL_TYPE_2 as (\\nSELECT   2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_b,\\n          tb.time_perd_start_date time_perd_start_date_b,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_a,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          ta.time_perd_end_date time_perd_end_date_a,\\n          ta.time_perd_start_date time_perd_start_date_a\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n     WHERE assoc.CAL_TYPE_ID=2),\\nBIMTH_2_MTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_B TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_A TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          tb.time_perd_end_date time_perd_end_date_A,\\n          tb.time_perd_start_date time_perd_start_date_A\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\nMTH_2_BIMTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A ,\\n          assoc.TIME_PERD_ID_B ,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_A,\\n          ta.time_perd_end_date time_perd_end_date_A,\\n          ta.time_perd_start_date time_perd_start_date_A,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_B,\\n          tb.time_perd_start_date time_perd_start_date_B\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\n\\nBW_2_EB AS (SELECT  2 CAL_TYPE_ID,\\n          ta.EVEN_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.EVEN_BIMTH_TIME_PERD_CLASS_COD TIME_PERD_CLASS_CODE_A,\\n          ta.EVEN_BIMTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.EVEN_BIMTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.EVEN_BIMTH_START_DATE TIME_PERD_START_DATE_A\\n     FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='EB'\\n    ),\\n\\nBW_2_MTH AS (SELECT  2 CAL_TYPE_ID,\\n          ta.ODD_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.MTH_TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.MTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.MTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.MTH_START_DATE TIME_PERD_START_DATE_A\\n               FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='MTH'\\n    )\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM CAL_TYPE_2\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BIMTH_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_EB\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID, CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM MTH_2_BIMTH\\\"\\\"\\\"\\ndf_mm_time_perd_assoc_tier1_vw= spark.sql(query)\\ndf_mm_time_perd_assoc_tier1_vw.createOrReplaceTempView('mm_time_perd_assoc_tier1_vw')\\n\\n##'Time period of weeks not properly generated' \\nsql_time_period_wks_nt_gen=f\\\"\\\"\\\"\\nselect ('Time period of weeks not properly generated') as DQ, * from (WITH wk_mth_assoc AS (SELECT * FROM mm_time_perd_assoc_tier1_vw WHERE time_perd_type_code_B = 'WKMS' AND TIME_PERD_type_CODE_A = 'MH' AND cal_type_id = 2  AND time_perd_assoc_type_id = 1),\\nwk_loaded AS (SELECT tp.time_perd_end_date mm_time_perd_end_date FROM tier1_time_mtrlz_tbl stime  JOIN mm_time_perd_id_lkp\\nON mm_time_perd_id_lkp.EXTRN_TIME_PERD_ID =stime.EXTRN_CODE AND mm_time_perd_id_lkp.VENDR_ID ='{tier1_vendr_id}'\\nJOIN mm_time_perd_fdim tp ON tp.TIME_PERD_ID = mm_time_perd_id_lkp.time_perd_id AND tp.time_perd_class_code = 'WK'),\\nwk_prev_all AS(SELECT time_perd_end_date mm_time_perd_end_date FROM \\n(SELECT DISTINCT tp.time_perd_end_date FROM mm_run_time_perd_plc plc JOIN dpf_all_run_vw run ON \\nrun.run_id = plc.run_id JOIN mm_cntrt_lkp cntrt ON cntrt.prcsg_id = run.run_id\\nJOIN mm_time_perd_fdim tp ON tp.time_perd_id = plc.time_perd_id WHERE cntrt.cntrt_id = '{cntrt_id}'\\nAND run.process_status ='completed' \\nAND run.end_date_time <= current_timestamp())),\\nwk_new AS(SELECT mm_time_perd_end_date, 'new' AS STATUS FROM wk_loaded MINUS SELECT mm_time_perd_end_date,'new' AS STATUS FROM wk_prev_all),\\nwk_redelivered AS (SELECT mm_time_perd_end_date mm_time_perd_end_date, 'redelivered' AS STATUS FROM wk_loaded INTERSECT\\nSELECT mm_time_perd_end_date,'redelivered' AS STATUS FROM wk_prev_all),\\nwk_existing AS(SELECT mm_time_perd_end_date, 'existing' AS STATUS FROM wk_prev_all MINUS SELECT mm_time_perd_end_date,'existing' AS STATUS FROM wk_loaded),\\nwk_all AS (SELECT * FROM wk_new UNION ALL SELECT * FROM wk_redelivered UNION ALL SELECT * FROM wk_existing),\\nmth_loaded AS (SELECT DISTINCT wk_mth_assoc.time_perd_end_date_a as time_perd_end_date,wk_mth_assoc.time_perd_id_a as time_perd_id ,tp.time_perd_name FROM wk_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_end_date_b =wk_loaded.mm_time_perd_end_date JOIN mm_time_perd_fdim tp ON tp.time_perd_id = wk_mth_assoc.time_perd_id_a),\\n tbl AS (SELECT time_perd.time_perd_type_name wk_name, time_perd_end_date TIME_PERD_END,cast((TO_DATE(time_perd_end_date),'DD-MON-YYYY')as string) as TIME_PERD_END_DATE, mth_loaded.time_perd_name mth_name, COUNT(time_perd.time_perd_type_name) OVER (PARTITION BY mth_loaded.time_perd_name) cnt,\\nCASE WHEN wk_all.mm_time_perd_end_date IS NULL THEN 'missing'ELSE STATUS END AS STATUS_ALL FROM mth_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_id_a = mth_loaded.time_perd_id LEFT OUTER JOIN wk_all ON wk_all.mm_time_perd_end_date =wk_mth_assoc.time_perd_end_date_b JOIN mm_time_perd time_perd ON wk_mth_assoc.time_perd_id_b = time_perd.time_perd_id)\\nSELECT *, 'missing','new','recalculated','existing' FROM tbl WHERE  STATUS_ALL = 'missing' and STATUS_ALL = 'new' and STATUS_ALL = 'redelivered' and STATUS_ALL = 'existing'  and MTH_NAME = tbl.MTH_NAME limit 1)where limit 501\\\"\\\"\\\"\\ndf_time_period_wks_nt_gen=spark.sql(sql_time_period_wks_nt_gen)\\n\\n##Duplicated time period after mapping\\nsql_dup_time_period_aftr_mapng=f\\\"\\\"\\\"WITH data AS(SELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id ='{srce_sys_id}'\\nAND xref.cntrt_id = '{cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id ='{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = '{srce_sys_id}'\\nAND xref.cntrt_id = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM  tier1_mkt_mtrlz_tbl src  \\nJOIN mm_mkt_skid_cntrt_lkp_vw lkp\\nON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\nAND lkp.CNTRT_ID = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'TP'),\\nskid AS (SELECT ('Duplicated time period after mapping') as DQ, MKT_skid as mkt_skid FROM data GROUP BY MKT_skid HAVING COUNT(DISTINCT line_num)>1)\\nselect * from skid limit 1\\\"\\\"\\\"\\ndf_dup_time_period_aftr_mapng=spark.sql(sql_dup_time_period_aftr_mapng)\\n\\n\\n####Missing/delivered areas\\nsql_msng_delv_areas=f\\\"\\\"\\\"\\nwith temp1 as (select ('Missing/delivered areas') as DQ, c.line_num as line_num,a.extrn_mkt_id,a.extrn_mkt_name,cast(b.mkt_skid as integer) as mkt_skid,b.mkt_name,\\nnvl2(b.mkt_skid, 'n', 'y') as missing_ind,nvl2(b.mkt_skid, 'n', 'y') as new_ind ,\\nrlike(d.cntrt_spec, '/ContractSpecification/CountryName') AS total_country\\nfrom mm_mkt_xref a join mm_mkt_dim b on a.srce_sys_id==b.srce_sys_id \\njoin tier1_mkt_mtrlz_tbl c on a.srce_sys_id=c.srce_sys_id\\njoin mm_cntrt_lkp d on d.cntrt_id ='{cntrt_id}'\\n--limit 501\\n)\\nselect *,missing_ind as last_run_status ,new_ind as last_period_status from temp1\\\"\\\"\\\"\\ndf_msng_delv_areas=spark.sql(sql_msng_delv_areas)\\n\\n# DQ12 - Unknown time period\\n\\nquery12 = f\\\"\\\"\\\"SELECT\\n('Unknown time period') as DQ,\\nMM_TIME_PERD_ID as MM_TIME_PERD_ID,    \\nLINE_NUM as LINE_NUM,\\nEXTRN_CODE as EXTRN_CODE,\\nEXTRN_NAME as EXTRN_NAME\\nFROM (\\n        SELECT * FROM tier1_time_mtrlz_tbl src \\n        LEFT JOIN  MM_TIME_PERD_ID_LKP map ON src.EXTRN_CODE = map.EXTRN_TIME_PERD_ID AND map.VENDR_ID = {tier1_vendr_id}\\n        WHERE VENDR_ID IS NULL\\n        )\\n--           WHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_time_perd_id_map_unk = spark.sql(query12)\\n\\n# DQ13 - Unknown market\\n\\nquery13 = f\\\"\\\"\\\"SELECT * FROM (SELECT \\n('Unknown market') DQ,\\nMN.LINE_NUM LINE_NUM,\\nMN.EXTRN_CODE as EXTRN_CODE,\\nMN.EXTRN_NAME as EXTRN_NAME\\nFROM tier1_mkt_mtrlz_tbl MN\\n    LEFT JOIN MM_MKT_XREF \\n      ON MM_MKT_XREF.EXTRN_MKT_ID = MN.EXTRN_CODE\\n      AND MM_MKT_XREF.CNTRT_ID = {cntrt_id}\\n      AND MM_MKT_XREF.SRCE_SYS_ID = {srce_sys_id}\\n    LEFT JOIN MM_MKT_SKID_CNTRT_LKP_VW  \\n      ON MM_MKT_SKID_CNTRT_LKP_VW.EXTRN_MKT_ID = MN.EXTRN_CODE   \\n      AND MM_MKT_SKID_CNTRT_LKP_VW.CNTRT_ID = {cntrt_id} \\n    WHERE MM_MKT_XREF.MKT_SKID IS NULL AND MM_MKT_SKID_CNTRT_LKP_VW.MKT_SKID IS NULL\\n\\tORDER BY LINE_NUM)\\n--\\tWHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_mkt_id_map_unk = spark.sql(query13)\\n\\n#DQ14 - Duplicated market after mapping\\n\\nquery14 = f\\\"\\\"\\\"SELECT \\n('Duplicated market after mapping') as DQ,\\nline_num as line_num, \\nvendor_tag as vendor_tag, \\nMKT_codes_new as MKT_codes_new, \\nvendor_tag_old as vendor_tag_old \\nFROM (\\nWITH data AS (\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM tier1_mkt_mtrlz_tbl src   \\t\\t\\t\\t\\n\\t\\t\\t\\tJOIN MM_MKT_SKID_CNTRT_LKP_VW lkp\\n                ON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\n                AND lkp.CNTRT_ID = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'TP'\\n),\\nskid AS (\\nSELECT MKT_skid FROM data \\nGROUP BY MKT_skid\\nHAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT line_num, extrn_code vendor_tag, EXTRN_MKT_ATTR_VAL_LIST MKT_codes_new, EXTRN_MKT_ID vendor_tag_old FROM data\\nJOIN skid on data.MKT_skid = skid.MKT_skid\\nORDER BY line_num)\\n--\\tWHERE LIMIT 500 \\\"\\\"\\\"\\n \\ntier1_mkt_map_dup = spark.sql(query14)\\n\\n\\n# DQ16 - Missing/delivered hierarchies\\n\\nquery16 = f\\\"\\\"\\\"WITH prod_dlvr\\n     AS (SELECT src.EXTRN_PROD_ID,\\n                COALESCE(strct.STRCT_CODE, src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0) AS STRCT_CODE,\\n                strct.STRCT_NAME\\n         FROM   tier1_prod_mtrlz_tbl src\\n                LEFT OUTER JOIN MM_STRCT_LKP strct\\n                  ON src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0 = strct.STRCT_CODE),\\n\\n     prod_hier_dlvr\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   PROD_DLVR\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     miss_prod_hier_fct_dlvr\\n     AS (SELECT /*+ materialize */ STRCT_CODE\\n         FROM (SELECT STRCT_CODE FROM prod_hier_dlvr\\n               MINUS\\n               SELECT DISTINCT prod.STRCT_CODE\\n               FROM   PROD_DLVR prod\\n                      JOIN tier1_fact_mtrlz_tbl fct\\n                        ON prod.EXTRN_PROD_ID = fct.PROD_EXTRN_CODE)),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id} )\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id} )\\n            AND RUN_LATEST=1),\\n\\n     prod_last_run\\n     AS (SELECT plc.EXTRN_PROD_ID,\\n                STRCT_CODE,\\n                STRCT_NAME\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_PROD_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   LAST_RUN)) plc\\n                JOIN MM_PROD_DIM dim\\n                  ON plc.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND plc.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                     AND plc.PROD_SKID = dim.PROD_SKID\\n                     AND dim.CNTRT_ID = {cntrt_id}\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_plc_last_run\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   prod_last_run\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     last_run_prttn\\n     AS (SELECT RUN_ID,\\n                MM_TIME_PERD_END_DATE AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM   MM_RUN_PRTTN_PLC\\n         WHERE  RUN_ID = (SELECT RUN_ID\\n                          FROM   last_run)\\n            AND TIME_PERD_CLASS_CODE = 'MTH'\\n            AND CNTRT_ID = {cntrt_id}),\\n\\n     fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_run_prttn tp\\n                  ON fct.RUN_ID = tp.RUN_ID\\n                     AND fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   FCT_LAST_RUN fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_last_run\\n     AS (SELECT *\\n         FROM   prod_hier_plc_last_run\\n         UNION ALL\\n         SELECT *\\n         FROM   prod_hier_fct_last_run\\n         WHERE  (SELECT COUNT(*)\\n                 FROM   prod_hier_plc_last_run) = 0),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WK%' THEN\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = 'MTH'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_period_prttn tp\\n                  ON fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   fct_last_period fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_dlvr_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_last_run.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_last_run.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_last_run.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_last_run\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_last_run.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_fct_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_fct_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_fct_last_period\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr_vs_last_run.STRCT_CODE, prod_hier_dlvr_vs_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr_vs_last_run.STRCT_NAME, prod_hier_dlvr_vs_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   prod_hier_dlvr_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   prod_hier_dlvr_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   prod_hier_dlvr_vs_last_run\\n                FULL OUTER JOIN prod_hier_dlvr_vs_last_period\\n                             ON prod_hier_dlvr_vs_last_run.STRCT_CODE = prod_hier_dlvr_vs_last_period.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_run\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_run.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_run\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_run.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_period\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_period\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     ret\\n     AS (SELECT tmp.STRCT_CODE,\\n                tmp.STRCT_NAME,\\n                CASE\\n                  WHEN LAST_RUN_MISS_VAL = 'Y'\\n                       AND LAST_RUN_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_RUN_STATUS\\n                END\\n                AS LAST_RUN_STATUS,\\n                CASE\\n                  WHEN LAST_PERIOD_MISS_VAL = 'Y'\\n                       AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_PERIOD_STATUS\\n                END\\n                AS LAST_PERIOD_STATUS,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.STRCT_CODE)\\n                AS RANK_NUMBER\\n         FROM   (SELECT COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_dlvr_vs_all_cases.STRCT_CODE)\\n                        AS STRCT_CODE,\\n                        COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_dlvr_vs_all_cases.STRCT_NAME)\\n                        AS STRCT_NAME,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS,\\n                        miss_prod_hier_vs_last_run.MISSING_IND AS LAST_RUN_MISS_VAL,\\n                        miss_prod_hier_vs_last_period.MISSING_IND AS LAST_PERIOD_MISS_VAL\\n                 FROM   prod_hier_dlvr\\n                        FULL OUTER JOIN prod_hier_dlvr_vs_all_cases\\n                                     ON prod_hier_dlvr.STRCT_CODE = prod_hier_dlvr_vs_all_cases.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_run\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_run.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_period\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_period.STRCT_CODE) tmp)\\n\\nSELECT --ROWNUM AS LINE_NUMBER,\\n       ('Missing/delivered hierarchies') as DQ,\\n       STRCT_CODE STRCT_CODE,\\n       STRCT_NAME STRCT_NAME,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT STRCT_CODE,\\n               STRCT_NAME,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  STRCT_CODE,\\n                  RANK_NUMBER)\\\"\\\"\\\"\\n\\ntier1_miss_dlvrd_hier = spark.sql(query16)\\n\\n\\n# DQ17 - Missing/delivered measures\\n\\nquery17 = f\\\"\\\"\\\"WITH measr_delivery\\n     AS (SELECT src.EXTRN_CODE AS EXTRN_MEASR_ID,\\n                src.EXTRN_NAME AS EXTRN_MEASR_NAME,\\n                ml.MEASR_ID,\\n                ml.MEASR_NAME,\\n                COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   tier1_measr_map src\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON src.MEASR_ID = ml.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id})\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id})\\n            AND RUN_LATEST=1),\\n\\n     measr_last_run\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   last_run)\\n                 AND    CALC_IND = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WK%' THEN\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = 'MTH'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     last_period_runs\\n     AS (SELECT DISTINCT RUN_ID\\n         FROM   MM_RUN_PRTTN_PLC plc\\n                JOIN LAST_PERIOD_PRTTN prttn\\n                  ON plc.CNTRT_ID = prttn.CNTRT_ID\\n                     AND plc.SRCE_SYS_ID = prttn.SRCE_SYS_ID\\n                     AND plc.MM_TIME_PERD_END_DATE = prttn.TIME_PERD_END_DATE\\n                     AND plc.FACT_TYPE_CODE = prttn.FACT_TYPE_CODE\\n                     AND plc.PROD_PRTTN_CODE = prttn.PROD_PRTTN_CODE),\\n\\n     measr_last_period\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  RUN_ID in (SELECT RUN_ID\\n                                  FROM   last_period_runs)\\n                 AND    CALC_IND = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                     AND ml.USE_IND = 'Y'\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  ml.USE_IND = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     measr_delivery_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_run.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_run.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_run.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_run.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_run.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_run.EXTRN_MEASR_ID, 'N', NVL2(measr_last_run.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_run\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_run.EXTRN_MEASR_ID\\n                                OR (measr_last_run.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_run.MEASR_ID)),\\n\\n     measr_delivery_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_period.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_period.EXTRN_MEASR_ID, 'N', NVL2(measr_last_period.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_period\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_period.EXTRN_MEASR_ID\\n                                OR (measr_last_period.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_period.MEASR_ID)),\\n\\n     measr_delivery_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_ID, measr_delivery_vs_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_NAME, measr_delivery_vs_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_ID, measr_delivery_vs_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_NAME, measr_delivery_vs_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.FACTR, measr_delivery_vs_last_period.FACTR) AS FACTR,\\n                                   measr_delivery_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   measr_delivery_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   measr_delivery_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   measr_delivery_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   measr_delivery_vs_last_run\\n                FULL OUTER JOIN measr_delivery_vs_last_period\\n                             ON measr_delivery_vs_last_run.EXTRN_MEASR_ID = measr_delivery_vs_last_period.EXTRN_MEASR_ID),\\n\\n     ret\\n     AS (SELECT tmp.MEASR_ID,\\n                tmp.MEASR_NAME,\\n                tmp.EXTRN_MEASR_ID,\\n                tmp.EXTRN_MEASR_NAME,\\n                LAST_RUN_STATUS,\\n                LAST_PERIOD_STATUS,\\n                MULTIPLICATOR,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.EXTRN_MEASR_NAME)\\n                AS RANK_NUMBER\\n         FROM   (SELECT\\n                        --COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_delivery_vs_all_cases.EXTRN_MEASR_ID)\\n                        COALESCE(measr_delivery_vs_all_cases.EXTRN_MEASR_ID, measr_delivery.EXTRN_MEASR_ID) -- LGrigorovicius (20210723) : order changed so previously processed measures tags would be visible in validation report\\n\\n                        AS EXTRN_MEASR_ID,\\n                        COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_delivery_vs_all_cases.EXTRN_MEASR_NAME)\\n\\n                        AS EXTRN_MEASR_NAME,\\n                        COALESCE(measr_delivery.MEASR_ID, measr_delivery_vs_all_cases.MEASR_ID)\\n\\n                        AS MEASR_ID,\\n                        COALESCE(measr_delivery.MEASR_NAME, measr_delivery_vs_all_cases.MEASR_NAME)\\n\\n                        AS MEASR_NAME,\\n                        COALESCE(measr_delivery.FACTR, measr_delivery_vs_all_cases.FACTR)\\n\\n                        AS MULTIPLICATOR,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS\\n                 FROM   measr_delivery\\n                        FULL OUTER JOIN measr_delivery_vs_all_cases\\n                                     ON measr_delivery.MEASR_ID = measr_delivery_vs_all_cases.MEASR_ID) tmp)\\n\\nSELECT -- ROWNUM AS LINE_NUMBER,\\n('Missing/delivered measures') as DQ,\\n       MEASR_ID MEASR_ID,\\n       MEASR_NAME MEASR_NAME,\\n       EXTRN_MEASR_ID EXTRN_MEASR_ID,\\n       EXTRN_MEASR_NAME EXTRN_MEASR_NAME,\\n       MULTIPLICATOR MULTIPLICATOR,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT MEASR_ID,\\n               MEASR_NAME,\\n               EXTRN_MEASR_ID,\\n               EXTRN_MEASR_NAME,\\n               MULTIPLICATOR,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  CASE\\n                    WHEN LAST_RUN_STATUS = 'MISSING' OR LAST_PERIOD_STATUS = 'MISSING' THEN 1\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 2\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'NEW' THEN 3\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 4\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 5\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 6\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'NEW' THEN 7\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 8\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'NEW' THEN 9\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 10\\n                    ELSE 11\\n                  END,\\n                  RANK_NUMBER)\\n\\\"\\\"\\\"\\ntier1_miss_dlvrd_measr = spark.sql(query17)\\n\\n# Combine\\nfrom pyspark.sql.functions import lit, row_number, monotonically_increasing_id, col, when\\nfrom pyspark.sql.window import Window\\nfrom pyspark.sql.types import *\\n\\ncolumns = StructType([StructField('row_id', IntegerType(), True)])\\ndf_empty = spark.createDataFrame(data=[], schema=columns)\\n\\ndq1 = df_unk_msr\\ndq2 = df_dup_msr_af_map\\ndq3 = df_no_data_measr\\ndq4 = prod_attr_unk\\ndq5 = prod_attr_brand_mlt\\ndq6 = fact_time_perd_miss\\ndq7 = fact_mkt_miss\\ndq9 = df_time_period_wks_nt_gen\\ndq10 = df_dup_time_period_aftr_mapng\\ndq11 = df_msng_delv_areas\\ndq12 = tier1_time_perd_id_map_unk\\ndq13 = tier1_mkt_id_map_unk\\ndq14 = tier1_mkt_map_dup\\ndq16 = tier1_miss_dlvrd_hier\\ndq17 = tier1_miss_dlvrd_measr\\n\\ndf_combine = dq1.unionByName(dq2, True).unionByName(dq3, True).unionByName(dq4, True).unionByName(dq5, True).unionByName(dq6, True).unionByName(dq7, True).unionByName(dq9, True).unionByName(dq10, True).unionByName(dq11, True).unionByName(dq12, True).unionByName(dq13, True).unionByName(dq14, True).unionByName(dq16, True).unionByName(dq17, True)\\n\\ndata = []\\n\\ndq1_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Unknown measure' \\\", '', 'false', 'Unknown measure', 100 )\\ndata.append(dq1_val)\\ndq2_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Duplicated measure after mapping' \\\", '', 'false', 'Duplicated measure after mapping', 100 )\\ndata.append(dq2_val)\\ndq3_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'No data- NA or zero in every input row, for measure' \\\", '', 'false', 'No data- NA or zero in every input row, for measure', 100 )\\ndata.append(dq3_val)\\ndq4_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Unknown attribute value for product' \\\", '', 'false', 'Unknown attribute value for product', 100 )\\ndata.append(dq4_val)\\ndq5_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'The same brand placed under two companies' \\\", '', 'false', 'The same brand placed under two companies', 100 )\\ndata.append(dq5_val)\\ndq6_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'No data: N/A or zero in every input row, for time period' \\\", '', 'false', 'No data: N/A or zero in every input row, for time period', 100 )\\ndata.append(dq6_val)\\ndq7_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'No data: N/A or zero in every input row, for market' \\\", '', 'false', 'No data: N/A or zero in every input row, for market', 100 )\\ndata.append(dq7_val)\\ndq8_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Invalid combination of attributes for product' \\\", '', 'false', 'Invalid combination of attributes for product' , 100 ) # Need to check\\ndata.append(dq8_val)\\ndq9_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Time period of weeks not properly generated' \\\", '', 'false', 'Time period of weeks not properly generated' , 100 )\\ndata.append(dq9_val)\\ndq10_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Duplicated time period after mapping' \\\", '', 'false', 'Duplicated time period after mapping', 100 )\\ndata.append(dq10_val)\\ndq11_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Missing/delivered areas' \\\", '', 'false', 'Missing/delivered areas', 100 )\\ndata.append(dq11_val)\\ndq12_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Unknown time period' \\\", '', 'false', 'Unknown time period', 100 )\\ndata.append(dq12_val)\\ndq13_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Unknown market' \\\", '', 'false', 'Unknown market', 100 )\\ndata.append(dq13_val)\\ndq14_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Duplicated market after mapping' \\\", '', 'false', 'Duplicated market after mapping', 100 )\\ndata.append(dq14_val)\\n#dq15_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Modified product attributes' \\\", '', 'false', 'Modified product attributes', 100 ) # Need to check\\n#data.append(dq15_val)\\ndq16_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Missing/delivered hierarchies' \\\", '', 'false', 'Missing/delivered hierarchies', 100 )\\ndata.append(dq16_val)\\ndq17_val=('DQ','SQL Validation KPI', \\\"DQ <> 'Missing/delivered measures' \\\", '', 'false', 'Missing/delivered measures', 100 )\\ndata.append(dq17_val)\\n\\n#Prepare KPI\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\nschema_for_kpi = StructType([ \\n    StructField(\\\"column\\\",StringType(),True),\\n    StructField(\\\"kpi_type\\\",StringType(),True),\\n    StructField(\\\"param_1\\\",StringType(),True),\\n    StructField(\\\"param_2\\\",StringType(),True),\\n    StructField(\\\"fail_on_error\\\",StringType(),True),\\n    StructField(\\\"check_description\\\",StringType(),True),\\n    StructField(\\\"target\\\",StringType(),True)\\n  ])\\n\\ndf_ref = spark.createDataFrame(data, schema_for_kpi)\\n\\n\\ndict_all_dfs['df_ref'] = {\\\"df_object\\\" :df_ref}\\ndf_output_dict['df_ref'] = df_ref\\n\\ndict_all_dfs['df_combine_ref'] = {\\\"df_object\\\" :df_combine}\\ndf_output_dict['df_combine_ref'] = df_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"tier1_measr_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_dvm_100_measr\"\n    },\n    {\n      \"name\": \"tier1_prod_gav\"\n    },\n    {\n      \"name\": \"tier1_time_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_conv\"\n    },\n    {\n      \"name\": \"tier1_mkt_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_measr_map_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fact_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl2\"\n    },\n    {\n      \"name\": \"tier1_prod_mtrlz_tbl\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_ref\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_combine_ref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] MM_MKT_SKID_LKP",
      "predecessorName": "Reference Data - Validations - v1 -1.1",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_MKT_SKID_LKP/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_skid_cntrt_lkp_vw\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_MKT_SKID_LKP",
      "predecessorName": "[FL] MM_MKT_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_MKT_SKID_LKP/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_TIME_PERD_FDIM_VW",
      "predecessorName": "release MM_MKT_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_TIME_PERD_FDIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_time_perd_fdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_TIME_PERD_FDIM_VW/",
      "predecessorName": "MM_TIME_PERD_FDIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_TIME_PERD_FDIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "df_mm_time_perd_assoc_type",
      "predecessorName": "release MM_TIME_PERD_FDIM_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_TIME_PERD_ASSOC_TYPE_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_time_perd_assoc_type\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_TIME_PERD_ASSOC_TYPE_VW/",
      "predecessorName": "df_mm_time_perd_assoc_type",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_TIME_PERD_ASSOC_TYPE_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_TIME_PERD_ASSOC_VW",
      "predecessorName": "release MM_TIME_PERD_ASSOC_TYPE_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_TIME_PERD_ASSOC_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_time_perd_assoc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_TIME_PERD_ASSOC_VW",
      "predecessorName": "MM_TIME_PERD_ASSOC_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_TIME_PERD_ASSOC_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "load MM_RUN_TIME_PERD_PLC/",
      "predecessorName": "release MM_TIME_PERD_ASSOC_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_run_time_perd_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_RUN_TIME_PERD_PLC/",
      "predecessorName": "load MM_RUN_TIME_PERD_PLC/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_MKT_XREF",
      "predecessorName": "release MM_RUN_TIME_PERD_PLC/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_MKT_XREF/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_MKT_XREF",
      "predecessorName": "MM_MKT_XREF",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_MKT_XREF/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_MKT_DIM_VW",
      "predecessorName": "release MM_MKT_XREF",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_MKT_DIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_MKT_DIM_VW/",
      "predecessorName": "MM_MKT_DIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_MKT_DIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_RUN_TIME_PERD_PLC",
      "predecessorName": "release MM_MKT_DIM_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_run_time_perd_plc1\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release1 MM_RUN_TIME_PERD_PLC/",
      "predecessorName": "MM_RUN_TIME_PERD_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "TIME_PERD_SDADS",
      "predecessorName": "release1 MM_RUN_TIME_PERD_PLC/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>TIME_PERD_SDADS/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd_sdads\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release TIME_PERD_SDADS/",
      "predecessorName": "TIME_PERD_SDADS",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>TIME_PERD_SDADS/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_RUN_PROD_PLC",
      "predecessorName": "release TIME_PERD_SDADS/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_PROD_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_run_prod_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_RUN_PROD_PLC",
      "predecessorName": "MM_RUN_PROD_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_PROD_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "load MM_PROD_SDIM_VW",
      "operationDescription": "18-dec-23 --changed this step to load prod sdim from part_srce_sys_id",
      "predecessorName": "release MM_RUN_PROD_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SDIM_VW/part_srce_sys_id=<<SRCE_SYS_ID>>/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_PROD_SDIM_VW",
      "operationDescription": "18-dec-23 --changed this step to release semaphore prod sdim from part_srce_sys_id",
      "predecessorName": "load MM_PROD_SDIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_SDIM_VW/part_srce_sys_id=<<SRCE_SYS_ID>>/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[cet] add part srce sys id",
      "operationDescription": "18-dec-23 --new step to add part_srce_sys_id partition column",
      "predecessorName": "MM_PROD_SDIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"round(srce_sys_id,0)\",\n      \"columnName\": \"part_srce_sys_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] cc mm_prod_sdim",
      "operationDescription": "18-dec-23 --new step to cc mm_prod_sdim with schema",
      "predecessorName": "[cet] add part srce sys id",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_mm_prod_sdim = dict_all_dfs['df_mm_prod_sdim'][\\\"df_object\\\"]\\ndf_mm_prod_sdim_vw_schema = dict_all_dfs['df_mm_prod_sdim_vw_schema'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_mm_prod_sdim.columns\\nsdim_cols = df_mm_prod_sdim_vw_schema.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_mm_prod_sdim = df_mm_prod_sdim.withColumn(i,lit(None).cast('string'))\\n\\ndf_mm_prod_sdim = df_mm_prod_sdim.select(*sdim_cols)\\ncols = df_mm_prod_sdim.columns\\n\\nfor j in cols:\\n  if dict(df_mm_prod_sdim.dtypes)[j] != dict(df_mm_prod_sdim_vw_schema.dtypes)[j]:\\n    df_mm_prod_sdim = df_mm_prod_sdim.withColumn(j, col(j).cast(dict(df_mm_prod_sdim_vw_schema.dtypes)[j]))\\n\\ndict_all_dfs['df_mm_prod_sdim'] = {\\\"df_object\\\" :df_mm_prod_sdim}\\ndf_output_dict['df_mm_prod_sdim'] = df_mm_prod_sdim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    },\n    {\n      \"name\": \"df_mm_prod_sdim_vw_schema\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_PROD_DIM_VW",
      "predecessorName": "[Gen] cc mm_prod_sdim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_DIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_PROD_DIM_VW/",
      "predecessorName": "MM_PROD_DIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_DIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_RUN_PRTTN_PLC",
      "predecessorName": "release MM_PROD_DIM_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_PRTTN_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_run_prttn_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_RUN_PRTTN_PLC",
      "predecessorName": "MM_RUN_PRTTN_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_PRTTN_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "MM_RUN_MEASR_PLC",
      "predecessorName": "release MM_RUN_PRTTN_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_MEASR_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_run_measr_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_RUN_MEASR_PLC",
      "predecessorName": "MM_RUN_MEASR_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_MEASR_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Load MM_RUN_MKT_PLC",
      "predecessorName": "release MM_RUN_MEASR_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_MKT_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_run_mkt_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "Release",
      "predecessorName": "Load MM_RUN_MKT_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_MKT_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[REMOVE THIS STEP] df_fact materialize",
      "operationDescription": "to materialize df_fact dataframe - by suhail",
      "predecessorName": "Release",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_fact\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_fact\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "Reference Data - Validations and Report Generation",
      "predecessorName": "[REMOVE THIS STEP] df_fact materialize",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n#Variables\\n\\ntier1_vendr_id = <<VENDOR_ID>>\\ntier1_fact_type_code = 'TP'\\ncntrt_id = <<CNTRT_ID>>\\ntier1_cntrt_id = cntrt_id\\ncntry_id = '<<ISO_CNTRY_CODE>>'\\ntier1_cntry_id = cntry_id\\ntier1_run_id = <<PROCESS_RUN_KEY>>\\nsrce_sys_id = <<SRCE_SYS_ID>>\\nrun_id = tier1_run_id\\ntime_perd_class_code = '<<TIME_PERD_CLASS_CODE>>'\\n\\npath = '<@@PATH1@@>'\\n\\n#Summary of Report\\ndf_file_struct_summary = dict_all_dfs['df_file_struct_summary'][\\\"df_object\\\"]\\ndf_ref_vendors_summary = dict_all_dfs['df_ref_vendors_summary'][\\\"df_object\\\"]\\ndf_fyi_summary = dict_all_dfs['df_fyi_summary'][\\\"df_object\\\"]\\n\\n# Dataframes from Prior Steps\\n\\ndf_mm_run_mkt_plc = dict_all_dfs['df_mm_run_mkt_plc'][\\\"df_object\\\"]\\ndf_mm_run_mkt_plc.createOrReplaceTempView('MM_RUN_MKT_PLC')\\n\\nmm_tp_fct = dict_all_dfs['df_fact'][\\\"df_object\\\"]\\nmm_tp_fct.createOrReplaceTempView('MM_TP_MTH_FCT')\\n\\ntier1_measr_mtrlz_tbl = dict_all_dfs['tier1_measr_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_measr_mtrlz_tbl.createOrReplaceTempView('tier1_measr_mtrlz_tbl')\\n\\ntier1_fct_dvm_100_measr = dict_all_dfs['tier1_fct_dvm_100_measr'][\\\"df_object\\\"]\\ntier1_fct_dvm_100_measr.createOrReplaceTempView('tier1_fct_dvm_100_measr')\\n\\ntier1_prod_gav = dict_all_dfs['tier1_prod_gav'][\\\"df_object\\\"]\\ntier1_prod_gav.createOrReplaceTempView('tier1_prod_gav')\\n\\ntier1_time_mtrlz_tbl = dict_all_dfs['tier1_time_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_time_mtrlz_tbl.createOrReplaceTempView('tier1_time_mtrlz_tbl')\\n\\ntier1_fct_conv = dict_all_dfs['tier1_fct_conv'][\\\"df_object\\\"]\\n# Need to get the correct dataframe here.\\ntier1_fct_conv.createOrReplaceTempView('tier1_fct_conv')\\n\\ntier1_mkt_mtrlz_tbl = dict_all_dfs['tier1_mkt_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_mkt_mtrlz_tbl.createOrReplaceTempView('tier1_mkt_mtrlz_tbl')\\n\\ntier1_measr_map_tbl = dict_all_dfs['tier1_measr_map_tbl'][\\\"df_object\\\"]\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map_tbl')\\ntier1_measr_map_tbl.createOrReplaceTempView('tier1_measr_map')\\n\\ntier1_fct_mtrlz_tbl = dict_all_dfs['tier1_fct_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl.createOrReplaceTempView('tier1_fct_mtrlz_tbl')\\n\\ntier1_fact_mtrlz_tbl = dict_all_dfs['tier1_fact_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_fact_mtrlz_tbl.createOrReplaceTempView('tier1_fact_mtrlz_tbl')\\n\\n#mm_time_perd_fdim = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_FDIM_VW/')\\n#mm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\ndf_mm_time_perd_fdim = dict_all_dfs['df_mm_time_perd_fdim'][\\\"df_object\\\"]\\ndf_mm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\n#mm_time_perd_assoc_type = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_TYPE_VW/')\\n#mm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\ndf_mm_time_perd_assoc_type = dict_all_dfs['df_mm_time_perd_assoc_type'][\\\"df_object\\\"]\\ndf_mm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\n#mm_time_perd_assoc = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_VW/')\\n#mm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\ndf_mm_time_perd_assoc = dict_all_dfs['df_mm_time_perd_assoc'][\\\"df_object\\\"]\\ndf_mm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\n#df_mm_run_time_perd_plc=spark.read.format('parquet').load(f'/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\n#df_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\ndf_mm_run_time_perd_plc = dict_all_dfs['df_mm_run_time_perd_plc'][\\\"df_object\\\"]\\ndf_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\n\\ntier1_fct_mtrlz_tbl2 = dict_all_dfs['tier1_fct_mtrlz_tbl2'][\\\"df_object\\\"]\\ntier1_fct_mtrlz_tbl2.createOrReplaceTempView('tier1_fct_mtrlz_tbl2')\\n\\n\\n#mm_mkt_xref = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_XREF/')\\n#mm_mkt_xref.createOrReplaceTempView('mm_mkt_xref')\\n\\ndf_mm_mkt_xref = dict_all_dfs['df_mm_mkt_xref'][\\\"df_object\\\"]\\ndf_mm_mkt_xref.createOrReplaceTempView('mm_mkt_xref')\\n\\n#mm_mkt_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_DIM_VW/')\\n#mm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\ndf_mm_mkt_dim = dict_all_dfs['df_mm_mkt_dim'][\\\"df_object\\\"]\\ndf_mm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\n#df_mm_run_time_perd_plc=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_TIME_PERD_PLC/')\\n#df_mm_run_time_perd_plc.createOrReplaceTempView('mm_run_time_perd_plc_v1')\\n\\ndf_mm_run_time_perd_plc1 = dict_all_dfs['df_mm_run_time_perd_plc1'][\\\"df_object\\\"]\\ndf_mm_run_time_perd_plc1.createOrReplaceTempView('mm_run_time_perd_plc_v1')\\n\\nsql_fmt=\\\"\\\"\\\"select  cast(run_id as double) as run_id, time_perd_id,extrn_time_perd_id,rcd_orign_code from mm_run_time_perd_plc_v1\\\"\\\"\\\"\\nmm_run_time_perd_plc_v1=spark.sql(sql_fmt)\\nmm_run_time_perd_plc_v1.createOrReplaceTempView('mm_run_time_perd_plc')\\n\\n#df_time_perd_sdads=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/TIME_PERD_SDADS/')\\n#df_time_perd_sdads.createOrReplaceTempView('mm_time_perd')\\n\\ndf_time_perd_sdads = dict_all_dfs['df_time_perd_sdads'][\\\"df_object\\\"]\\ndf_time_perd_sdads.createOrReplaceTempView('mm_time_perd')\\n\\n#df_mm_mkt_skid_cntrt_lkp_vw=spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_MKT_SKID_LKP/')\\n#df_mm_mkt_skid_cntrt_lkp_vw.createOrReplaceTempView('mm_mkt_skid_cntrt_lkp_vw')\\n\\n#df_mm_mkt_skid_cntrt_lkp_vw = dict_all_dfs['df_mm_mkt_skid_cntrt_lkp_vw'][\\\"df_object\\\"]\\n#df_mm_mkt_skid_cntrt_lkp_vw.createOrReplaceTempView('mm_mkt_skid_cntrt_lkp_vw')\\n\\n#mm_run_prod_plc = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PROD_PLC/')\\n#mm_run_prod_plc.createOrReplaceTempView('mm_run_prod_plc')\\n\\ndf_mm_run_prod_plc = dict_all_dfs['df_mm_run_prod_plc'][\\\"df_object\\\"]\\ndf_mm_run_prod_plc.createOrReplaceTempView('mm_run_prod_plc')\\n\\ndf_mm_mkt_skid_lkp = dict_all_dfs['df_mm_mkt_skid_cntrt_lkp_vw'][\\\"df_object\\\"]\\ndf_mm_mkt_skid_lkp.createOrReplaceTempView('MM_MKT_SKID_LKP')\\n\\n#mm_prod_sdim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_SDIM_VW/')\\n#mm_prod_sdim.createOrReplaceTempView('mm_prod_sdim')\\n\\ndf_mm_prod_sdim = dict_all_dfs['df_mm_prod_sdim'][\\\"df_object\\\"]\\ndf_mm_prod_sdim.createOrReplaceTempView('mm_prod_sdim')\\n\\n#mm_prod_dim = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_PROD_DIM_VW/')\\n#mm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\ndf_mm_prod_dim = dict_all_dfs['df_mm_prod_dim'][\\\"df_object\\\"]\\ndf_mm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\ntier1_prod_mtrlz_tbl = dict_all_dfs['tier1_prod_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_prod_mtrlz_tbl.createOrReplaceTempView('tier1_prod_mtrlz_tbl')\\n\\n#MM_RUN_PRTTN_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_PRTTN_PLC/')\\n#MM_RUN_PRTTN_PLC.createOrReplaceTempView('MM_RUN_PRTTN_PLC')\\n\\ndf_mm_run_prttn_plc = dict_all_dfs['df_mm_run_prttn_plc'][\\\"df_object\\\"]\\ndf_mm_run_prttn_plc.createOrReplaceTempView('MM_RUN_PRTTN_PLC')\\n\\n#MM_RUN_MEASR_PLC = spark.read.format('parquet').load(f'dbfs:/mnt/{path}/MM_RUN_MEASR_PLC/')\\n#MM_RUN_MEASR_PLC.createOrReplaceTempView('MM_RUN_MEASR_PLC')\\n\\ndf_mm_run_measr_plc = dict_all_dfs['df_mm_run_measr_plc'][\\\"df_object\\\"]\\ndf_mm_run_measr_plc.createOrReplaceTempView('MM_RUN_MEASR_PLC')\\n\\n# tables from Postgres\\n\\n\\n\\n# MM_CNTRT_TIER_EXTND_VW\\nmm_cntrt_tier_extnd_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_CNTRT_TIER_EXTND_VW where cntrt_id = {cntrt_id}\\\")\\nmm_cntrt_tier_extnd_vw.createOrReplaceTempView('mm_cntrt_tier_extnd_vw')\\n\\n# mm_mkt_skid_cntrt_lkp_vw\\ndf_mm_mkt_skid_cntrt_lkp_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_mkt_skid_cntrt_lkp_vw\\\")\\ndf_mm_mkt_skid_cntrt_lkp_vw.createOrReplaceTempView('mm_mkt_skid_cntrt_lkp_vw')\\n\\n# mm_measr_id_lkp\\nmm_measr_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_id_lkp\\\")\\nmm_measr_id_lkp.createOrReplaceTempView('mm_measr_id_lkp')\\n\\n# mm_measr_lkp\\nmm_measr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_measr_lkp\\\")\\nmm_measr_lkp.createOrReplaceTempView('mm_measr_lkp')\\n\\n# mm_cntrt_lkp\\nmm_cntrt_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_cntrt_lkp where cntrt_id ={cntrt_id}\\\")\\nmm_cntrt_lkp.createOrReplaceTempView('mm_cntrt_lkp')\\n\\n# mm_time_perd_id_lkp\\ndf_mm_time_perd_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_time_perd_id_lkp\\\")\\ndf_mm_time_perd_id_lkp.createOrReplaceTempView('mm_time_perd_id_lkp')\\n\\n# dpf_all_run_vw\\ndpf_all_run_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_process_run_lkp_vw where cntrt_id = {cntrt_id}\\\")\\ndpf_all_run_vw.createOrReplaceTempView('dpf_all_run_vw')\\n\\n# mm_categ_strct_attr_assoc_vw\\nmm_categ_strct_attr_assoc_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_categ_strct_attr_assoc_vw\\\")\\nmm_categ_strct_attr_assoc_vw.createOrReplaceTempView('mm_categ_strct_attr_assoc_vw')\\n\\n# MM_PROD_ATTR_VAL_LKP\\nMM_PROD_ATTR_VAL_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_PROD_ATTR_VAL_LKP\\\")\\nMM_PROD_ATTR_VAL_LKP.createOrReplaceTempView('MM_PROD_ATTR_VAL_LKP')\\n\\n# mm_strct_lvl_lkp\\nmm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_strct_lvl_lkp\\\")\\nmm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\n# MM_CNTRT_TIME_PERD_TYPE_ASSOC\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_CNTRT_TIME_PERD_TYPE_ASSOC where cntrt_id = {cntrt_id}\\\")\\nMM_CNTRT_TIME_PERD_TYPE_ASSOC.createOrReplaceTempView('MM_CNTRT_TIME_PERD_TYPE_ASSOC')\\n\\n# MM_STRCT_LKP\\nMM_STRCT_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_STRCT_LKP\\\")\\nMM_STRCT_LKP.createOrReplaceTempView('MM_STRCT_LKP')\\n\\n# MM_MEASR_VENDR_FACTR_LKP\\nMM_MEASR_VENDR_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_VENDR_FACTR_LKP where VENDR_ID = {tier1_vendr_id}\\\")\\nMM_MEASR_VENDR_FACTR_LKP.createOrReplaceTempView('MM_MEASR_VENDR_FACTR_LKP')\\n\\n# MM_MEASR_CNTRT_FACTR_LKP\\nMM_MEASR_CNTRT_FACTR_LKP = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.MM_MEASR_CNTRT_FACTR_LKP where cntrt_id = {cntrt_id}\\\")\\nMM_MEASR_CNTRT_FACTR_LKP.createOrReplaceTempView('MM_MEASR_CNTRT_FACTR_LKP')\\n\\n# WORK\\n\\n# 1.Unknown measure\\n\\nquery1 = f\\\"\\\"\\\" SELECT \\n('Unknown measure') as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (\\n            SELECT tier1_measr_mtrlz_tbl.LINE_NUM, tier1_measr_mtrlz_tbl.EXTRN_CODE, tier1_measr_mtrlz_tbl.EXTRN_NAME\\n            FROM tier1_measr_mtrlz_tbl\\n            LEFT JOIN mm_measr_id_lkp ON EXTRN_MEASR_ID = EXTRN_CODE AND MM_MEASR_ID_LKP.VENDR_ID = {tier1_vendr_id}\\n\\t\\t\\tand (fact_type_code = '{tier1_fact_type_code}' OR fact_type_code = '[U]')\\n            WHERE mm_measr_id_lkp.EXTRN_MEASR_ID IS NULL \\t\\t\\t\\n\\t\\t    ORDER BY tier1_measr_mtrlz_tbl.LINE_NUM)\\n\\t\\t    --WHERE limit 500 \\\"\\\"\\\"\\ndf_unk_msr = spark.sql(query1)\\n\\n# 2.Duplicated measure after mapping\\n\\nquery2 = f\\\"\\\"\\\"SELECT ('Duplicated measure after mapping') as DQ, line_num line_num, \\nvendor_tag vendor_tag, \\nextrn_name extrn_name, \\nvendor_tag_old vendor_tag_old, \\nMEASR_DESC MEASR_DESC \\nFROM (\\nWITH data_init AS (\\n    SELECT src.line_num, src.extrn_code, src.extrn_name, lkp.EXTRN_MEASR_ID, lkp.MEASR_ID, mlkp.MEASR_DESC, \\n    RANK() over (\\n            partition by lkp.extrn_measr_id\\n            order by lkp.EXTRN_MEASR_ID, cntrt_id nulls last, cntry_id nulls last) as mapng_rank\\n    FROM tier1_measr_mtrlz_tbl src\\n    JOIN mm_measr_id_lkp lkp\\n        ON lkp.EXTRN_MEASR_ID = src.EXTRN_CODE\\n        AND NVL(lkp.CNTRT_ID, {cntrt_id}) = {cntrt_id}\\n        AND NVL(lkp.CNTRY_ID, '{cntry_id}') = '{cntry_id}'\\n    JOIN mm_measr_lkp mlkp\\n        ON lkp.MEASR_ID=mlkp.MEASR_ID AND lkp.fact_type_code=mlkp.fact_type_code\\n        AND VENDR_ID = {tier1_vendr_id}\\n        AND lkp.FACT_TYPE_CODE = '{tier1_fact_type_code}'\\n        AND mlkp.use_ind='Y'\\n),\\ndata_filtr as (\\n    select line_num, extrn_code, extrn_name, extrn_measr_id, measr_id, measr_desc\\n    from data_init\\n    where mapng_rank = 1\\n),\\nmid AS (\\n  SELECT MEASR_id FROM data_filtr\\n  GROUP BY MEASR_id\\n  HAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT ('Duplicated measure after mapping') as DQ, line_num, extrn_code vendor_tag, extrn_name, EXTRN_MEASR_ID vendor_tag_old, MEASR_DESC FROM data_filtr\\n JOIN mid on data_filtr.MEASR_id = mid.MEASR_id\\n ORDER BY line_num\\n)\\n--WHERE limit 500 \\\"\\\"\\\"\\n\\ndf_dup_msr_af_map = spark.sql(query2)\\n\\n# 3.No data: N/A or zero in every input row, for measure\\n\\n# For Validation Result\\n\\nquery_3_val = f\\\"\\\"\\\" WITH ref AS (\\nselect value\\nfrom\\n(\\n(\\nselect\\nMAX(FACT_AMT_1) m1,MAX(FACT_AMT_2) m2,MAX(FACT_AMT_3) m3,MAX(FACT_AMT_4) m4,\\nMAX(FACT_AMT_5) m5,MAX(FACT_AMT_6) m6,MAX(FACT_AMT_7) m7,MAX(FACT_AMT_8) m8,MAX(nvl(FACT_AMT_9,0)) m9,\\nMAX(FACT_AMT_10) m10,MAX(FACT_AMT_11) m11,MAX(FACT_AMT_12) m12,MAX(FACT_AMT_13) m13,MAX(FACT_AMT_14) m14,\\nMAX(FACT_AMT_15) m15,MAX(FACT_AMT_16) m16,MAX(FACT_AMT_17) m17,MAX(FACT_AMT_18) m18,MAX(FACT_AMT_19) m19,\\nMAX(FACT_AMT_20) m20,MAX(FACT_AMT_21) m21,MAX(FACT_AMT_22) m22,MAX(FACT_AMT_23) m23,MAX(FACT_AMT_24) m24,\\nMAX(FACT_AMT_25) m25,MAX(FACT_AMT_26) m26,MAX(FACT_AMT_27) m27,MAX(FACT_AMT_28) m28,MAX(FACT_AMT_29) m29,\\nMAX(FACT_AMT_30) m30,MAX(FACT_AMT_31) m31,MAX(FACT_AMT_32) m32,MAX(FACT_AMT_33) m33,MAX(FACT_AMT_34) m34,\\nMAX(FACT_AMT_35) m35,MAX(FACT_AMT_36) m36,MAX(FACT_AMT_37) m37,MAX(FACT_AMT_38) m38,MAX(FACT_AMT_39) m39,\\nMAX(FACT_AMT_40) m40,MAX(FACT_AMT_41) m41,MAX(FACT_AMT_42) m42,MAX(FACT_AMT_43) m43,MAX(FACT_AMT_44) m44,\\nMAX(FACT_AMT_45) m45,MAX(FACT_AMT_46) m46,MAX(FACT_AMT_47) m47,MAX(FACT_AMT_48) m48,MAX(FACT_AMT_49) m49,\\nMAX(FACT_AMT_50) m50,MAX(FACT_AMT_51) m51,MAX(FACT_AMT_52) m52,MAX(FACT_AMT_53) m53,MAX(FACT_AMT_54) m54,\\nMAX(FACT_AMT_55) m55,MAX(FACT_AMT_56) m56,MAX(FACT_AMT_57) m57,MAX(FACT_AMT_58) m58,MAX(FACT_AMT_59) m59,\\nMAX(FACT_AMT_60) m60,MAX(FACT_AMT_61) m61,MAX(FACT_AMT_62) m62,MAX(FACT_AMT_63) m63,MAX(FACT_AMT_64) m64,\\nMAX(FACT_AMT_65) m65,MAX(FACT_AMT_66) m66,MAX(FACT_AMT_67) m67,MAX(FACT_AMT_68) m68,MAX(FACT_AMT_69) m69,\\nMAX(FACT_AMT_70) m70,MAX(FACT_AMT_71) m71,MAX(FACT_AMT_72) m72,MAX(FACT_AMT_73) m73,MAX(FACT_AMT_74) m74,\\nMAX(FACT_AMT_75) m75,MAX(FACT_AMT_76) m76,MAX(FACT_AMT_77) m77,MAX(FACT_AMT_78) m78,MAX(FACT_AMT_79) m79,\\nMAX(FACT_AMT_80) m80,MAX(FACT_AMT_81) m81,MAX(FACT_AMT_82) m82,MAX(FACT_AMT_83) m83,MAX(FACT_AMT_84) m84,\\nMAX(FACT_AMT_85) m85,MAX(FACT_AMT_86) m86,MAX(FACT_AMT_87) m87,MAX(FACT_AMT_88) m88,MAX(FACT_AMT_89) m89,\\nMAX(FACT_AMT_90) m90,MAX(FACT_AMT_91) m91,MAX(FACT_AMT_92) m92,MAX(FACT_AMT_93) m93,MAX(FACT_AMT_94) m94,\\nMAX(FACT_AMT_95) m95,MAX(FACT_AMT_96) m96,MAX(FACT_AMT_97) m97,MAX(FACT_AMT_98) m98,MAX(FACT_AMT_99) m99,\\nMAX(FACT_AMT_100) m100 FROM tier1_fct_dvm_100_measr\\n)\\n    unpivot\\n    (value for value_type in\\n    (m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19,m20,m21,m22,m23,m24,m25,\\n    m26,m27,m28,m29,m30,m31,m32,m33,m34,m35,m36,m37,m38,m39,m40,m41,m42,m43,m44,m45,m46,m47,m48,m49,m50,\\n    m51,m52,m53,m54,m55,m56,m57,m58,m59,m60,m61,m62,m63,m64,m65,m66,m67,m68,m69,m70,m71,m72,m73,m74,m75,\\n    m76,m77,m78,m79,m80,m81,m82,m83,m84,m85,m86,m87,m88,m89,m90,m91,m92,m93,m94,m95,m96,m97,m98,m99,m100)\\n    )\\n) \\n),\\nilkp AS\\n(\\nSELECT * FROM MM_MEASR_ID_LKP WHERE FACT_TYPE_CODE='TP' AND VENDR_ID= {tier1_vendr_id}\\n),\\nret1 AS (\\nSELECT COUNT(*) AS NR FROM \\n(\\nSELECT * FROM tier1_measr_mtrlz_tbl src LEFT OUTER JOIN (select * from ilkp WHERE CNTRY_ID IS NULL AND CNTRT_ID IS NULL) mdef\\nON src.EXTRN_CODE=mdef.EXTRN_MEASR_ID LEFT OUTER JOIN (select * from ilkp WHERE CNTRY_ID='{cntry_id}') mtry\\nON src.EXTRN_CODE=mtry.EXTRN_MEASR_ID LEFT OUTER JOIN (select * from ilkp WHERE CNTRT_ID='{cntry_id}') mtrt\\nON src.EXTRN_CODE=mtrt.EXTRN_MEASR_ID \\nJOIN MM_MEASR_LKP mlkp on COALESCE(mtrt.MEASR_ID,mtry.MEASR_ID,mdef.MEASR_ID)=mlkp.measr_id\\nAND mlkp.fact_type_code in ('TP','[U]')\\nWHERE mlkp.USE_IND='Y'\\n)\\n),\\nret2 AS (\\nSELECT SUM(SIGN(ABS(VALUE))) AS NR FROM ref\\n)\\nSELECT\\n case when ret1.NR <= ret2.NR then 'PASSED' else 'FAILED' end as result\\nfrom ret1, ret2\\\"\\\"\\\"\\n\\ndf_val3_res = spark.sql(query_3_val )\\n\\n\\n\\n# For Report Results\\nquery3 = f\\\"\\\"\\\"SELECT \\n('No data- NA or zero in every input row, for measure') as DQ,\\nline_num line_num,\\nextrn_code extrn_code,\\nextrn_name extrn_name\\n \\nFROM (\\n   WITH ordm AS (\\n   SELECT msr.*, mlkp.USE_IND AS USE_IND, ROW_NUMBER() OVER (ORDER BY LINE_NUM) rnm FROM tier1_measr_mtrlz_tbl msr\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id} AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt\\n   ON msr.EXTRN_CODE = MEASR_DEFLT.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN \\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '[U]' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID IS NULL AND CNTRT_ID IS NULL) measr_deflt_u\\n   ON msr.EXTRN_CODE = MEASR_DEFLT_U.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRY_ID = '{cntry_id}') measr_cntry /* lookup limited to contract related country */\\n   ON msr.EXTRN_CODE = MEASR_CNTRY.EXTRN_MEASR_ID\\n   LEFT OUTER JOIN\\n   (SELECT  * FROM mm_measr_id_lkp \\n   WHERE FACT_TYPE_CODE = '{tier1_fact_type_code}' AND VENDR_ID = {tier1_vendr_id}  AND CNTRT_ID = '{cntry_id}') measr_cntrt /* lookup limited to processed contract */\\n   ON msr.EXTRN_CODE = MEASR_CNTRT.EXTRN_MEASR_ID       \\n   JOIN MM_MEASR_LKP mlkp on COALESCE(MEASR_CNTRT.MEASR_ID, MEASR_CNTRY.MEASR_ID, MEASR_DEFLT.MEASR_ID, MEASR_DEFLT_U.MEASR_ID) = mlkp.measr_id\\n   AND mlkp.fact_type_code in ('{tier1_fact_type_code}','[U]')\\n   ),\\n    err AS (\\nSELECT\\n   NVL(MAX(FACT_AMT_1), 0) m1,NVL(MAX(FACT_AMT_2), 0) m2,NVL(MAX(FACT_AMT_3), 0) m3,NVL(MAX(FACT_AMT_4), 0) m4,\\nNVL(MAX(FACT_AMT_5), 0) m5,NVL(MAX(FACT_AMT_6), 0) m6,NVL(MAX(FACT_AMT_7), 0) m7,NVL(MAX(FACT_AMT_8), 0) m8,NVL(MAX(FACT_AMT_9), 0) m9,\\nNVL(MAX(FACT_AMT_10), 0) m10,NVL(MAX(FACT_AMT_11), 0) m11,NVL(MAX(FACT_AMT_12), 0) m12,NVL(MAX(FACT_AMT_13), 0) m13,NVL(MAX(FACT_AMT_14), 0) m14,\\nNVL(MAX(FACT_AMT_15), 0) m15,NVL(MAX(FACT_AMT_16), 0) m16,NVL(MAX(FACT_AMT_17), 0) m17,NVL(MAX(FACT_AMT_18), 0) m18,NVL(MAX(FACT_AMT_19), 0) m19,\\nNVL(MAX(FACT_AMT_20), 0) m20,NVL(MAX(FACT_AMT_21), 0) m21,NVL(MAX(FACT_AMT_22), 0) m22,NVL(MAX(FACT_AMT_23), 0) m23,NVL(MAX(FACT_AMT_24), 0) m24,\\nNVL(MAX(FACT_AMT_25), 0) m25,NVL(MAX(FACT_AMT_26), 0) m26,NVL(MAX(FACT_AMT_27), 0) m27,NVL(MAX(FACT_AMT_28), 0) m28,NVL(MAX(FACT_AMT_29), 0) m29,\\nNVL(MAX(FACT_AMT_30), 0) m30,NVL(MAX(FACT_AMT_31), 0) m31,NVL(MAX(FACT_AMT_32), 0) m32,NVL(MAX(FACT_AMT_33), 0) m33,NVL(MAX(FACT_AMT_34), 0) m34,\\nNVL(MAX(FACT_AMT_35), 0) m35,NVL(MAX(FACT_AMT_36), 0) m36,NVL(MAX(FACT_AMT_37), 0) m37,NVL(MAX(FACT_AMT_38), 0) m38,NVL(MAX(FACT_AMT_39), 0) m39,\\nNVL(MAX(FACT_AMT_40), 0) m40,NVL(MAX(FACT_AMT_41), 0) m41,NVL(MAX(FACT_AMT_42), 0) m42,NVL(MAX(FACT_AMT_43), 0) m43,NVL(MAX(FACT_AMT_44), 0) m44,\\nNVL(MAX(FACT_AMT_45), 0) m45,NVL(MAX(FACT_AMT_46), 0) m46,NVL(MAX(FACT_AMT_47), 0) m47,NVL(MAX(FACT_AMT_48), 0) m48,NVL(MAX(FACT_AMT_49), 0) m49,\\nNVL(MAX(FACT_AMT_50), 0) m50,NVL(MAX(FACT_AMT_51), 0) m51,NVL(MAX(FACT_AMT_52), 0) m52,NVL(MAX(FACT_AMT_53), 0) m53,NVL(MAX(FACT_AMT_54), 0) m54,\\nNVL(MAX(FACT_AMT_55), 0) m55,NVL(MAX(FACT_AMT_56), 0) m56,NVL(MAX(FACT_AMT_57), 0) m57,NVL(MAX(FACT_AMT_58), 0) m58,NVL(MAX(FACT_AMT_59), 0) m59,\\nNVL(MAX(FACT_AMT_60), 0) m60,NVL(MAX(FACT_AMT_61), 0) m61,NVL(MAX(FACT_AMT_62), 0) m62,NVL(MAX(FACT_AMT_63), 0) m63,NVL(MAX(FACT_AMT_64), 0) m64,\\nNVL(MAX(FACT_AMT_65), 0) m65,NVL(MAX(FACT_AMT_66), 0) m66,NVL(MAX(FACT_AMT_67), 0) m67,NVL(MAX(FACT_AMT_68), 0) m68,NVL(MAX(FACT_AMT_69), 0) m69,\\nNVL(MAX(FACT_AMT_70), 0) m70,NVL(MAX(FACT_AMT_71), 0) m71,NVL(MAX(FACT_AMT_72), 0) m72,NVL(MAX(FACT_AMT_73), 0) m73,NVL(MAX(FACT_AMT_74), 0) m74,\\nNVL(MAX(FACT_AMT_75), 0) m75,NVL(MAX(FACT_AMT_76), 0) m76,NVL(MAX(FACT_AMT_77), 0) m77,NVL(MAX(FACT_AMT_78), 0) m78,NVL(MAX(FACT_AMT_79), 0) m79,\\nNVL(MAX(FACT_AMT_80), 0) m80,NVL(MAX(FACT_AMT_81), 0) m81,NVL(MAX(FACT_AMT_82), 0) m82,NVL(MAX(FACT_AMT_83), 0) m83,NVL(MAX(FACT_AMT_84), 0) m84,\\nNVL(MAX(FACT_AMT_85), 0) m85,NVL(MAX(FACT_AMT_86), 0) m86,NVL(MAX(FACT_AMT_87), 0) m87,NVL(MAX(FACT_AMT_88), 0) m88,NVL(MAX(FACT_AMT_89), 0) m89,\\nNVL(MAX(FACT_AMT_90), 0) m90,NVL(MAX(FACT_AMT_91), 0) m91,NVL(MAX(FACT_AMT_92), 0) m92,NVL(MAX(FACT_AMT_93), 0) m93,NVL(MAX(FACT_AMT_94), 0) m94,\\nNVL(MAX(FACT_AMT_95), 0) m95,NVL(MAX(FACT_AMT_96), 0) m96,NVL(MAX(FACT_AMT_97), 0) m97,NVL(MAX(FACT_AMT_98), 0) m98,NVL(MAX(FACT_AMT_99), 0) m99,\\nNVL(MAX(FACT_AMT_100), 0) m100 FROM tier1_fct_dvm_100_measr\\n) \\n            \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=1) ON 1=1 WHERE m1=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=2) ON 1=1 WHERE m2=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=3) ON 1=1 WHERE m3=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=4) ON 1=1 WHERE m4=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=5) ON 1=1 WHERE m5=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=6) ON 1=1 WHERE m6=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=7) ON 1=1 WHERE m7=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=8) ON 1=1 WHERE m8=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=9) ON 1=1 WHERE m9=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=10) ON 1=1 WHERE m10=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=11) ON 1=1 WHERE m11=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=12) ON 1=1 WHERE m12=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=13) ON 1=1 WHERE m13=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=14) ON 1=1 WHERE m14=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y'\\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=15) ON 1=1 WHERE m15=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=16) ON 1=1 WHERE m16=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=17) ON 1=1 WHERE m17=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=18) ON 1=1 WHERE m18=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=19) ON 1=1 WHERE m19=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=20) ON 1=1 WHERE m20=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\n         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=21) ON 1=1 WHERE m21=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=22) ON 1=1 WHERE m22=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=23) ON 1=1 WHERE m23=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=24) ON 1=1 WHERE m24=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=25) ON 1=1 WHERE m25=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=26) ON 1=1 WHERE m26=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=27) ON 1=1 WHERE m27=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=28) ON 1=1 WHERE m28=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=29) ON 1=1 WHERE m29=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=30) ON 1=1 WHERE m30=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=31) ON 1=1 WHERE m31=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=32) ON 1=1 WHERE m32=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=33) ON 1=1 WHERE m33=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=34) ON 1=1 WHERE m34=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=35) ON 1=1 WHERE m35=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=36) ON 1=1 WHERE m36=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=37) ON 1=1 WHERE m37=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=38) ON 1=1 WHERE m38=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=39) ON 1=1 WHERE m39=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=40) ON 1=1 WHERE m40=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=41) ON 1=1 WHERE m41=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=42) ON 1=1 WHERE m42=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=43) ON 1=1 WHERE m43=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=44) ON 1=1 WHERE m44=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=45) ON 1=1 WHERE m45=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=46) ON 1=1 WHERE m46=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=47) ON 1=1 WHERE m47=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=48) ON 1=1 WHERE m48=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=49) ON 1=1 WHERE m49=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=50) ON 1=1 WHERE m50=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=51) ON 1=1 WHERE m51=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=52) ON 1=1 WHERE m52=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=53) ON 1=1 WHERE m53=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=54) ON 1=1 WHERE m54=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=55) ON 1=1 WHERE m55=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=56) ON 1=1 WHERE m56=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=57) ON 1=1 WHERE m57=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=58) ON 1=1 WHERE m58=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=59) ON 1=1 WHERE m59=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=60) ON 1=1 WHERE m60=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=61) ON 1=1 WHERE m61=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=62) ON 1=1 WHERE m62=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=63) ON 1=1 WHERE m63=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=64) ON 1=1 WHERE m64=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=65) ON 1=1 WHERE m65=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=66) ON 1=1 WHERE m66=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=67) ON 1=1 WHERE m67=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=68) ON 1=1 WHERE m68=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=69) ON 1=1 WHERE m69=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=70) ON 1=1 WHERE m70=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=71) ON 1=1 WHERE m71=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=72) ON 1=1 WHERE m72=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=73) ON 1=1 WHERE m73=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=74) ON 1=1 WHERE m74=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=75) ON 1=1 WHERE m75=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=76) ON 1=1 WHERE m76=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=77) ON 1=1 WHERE m77=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=78) ON 1=1 WHERE m78=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=79) ON 1=1 WHERE m79=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=80) ON 1=1 WHERE m80=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL         \\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=81) ON 1=1 WHERE m81=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=82) ON 1=1 WHERE m82=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=83) ON 1=1 WHERE m83=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=84) ON 1=1 WHERE m84=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=85) ON 1=1 WHERE m85=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=86) ON 1=1 WHERE m86=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=87) ON 1=1 WHERE m87=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=88) ON 1=1 WHERE m88=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=89) ON 1=1 WHERE m89=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=90) ON 1=1 WHERE m90=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=91) ON 1=1 WHERE m91=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=92) ON 1=1 WHERE m92=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=93) ON 1=1 WHERE m93=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=94) ON 1=1 WHERE m94=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=95) ON 1=1 WHERE m95=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=96) ON 1=1 WHERE m96=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=97) ON 1=1 WHERE m97=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=98) ON 1=1 WHERE m98=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=99) ON 1=1 WHERE m99=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\nUNION ALL\\nSELECT * FROM err LEFT JOIN (SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, USE_IND FROM ordm WHERE rnm=100) ON 1=1 WHERE m100=0 AND LINE_NUM IS NOT NULL AND USE_IND = 'Y' \\n)\\n--WHERE limit 500 \\n\\\"\\\"\\\"\\ndf_no_data_measr = spark.sql(query3)\\n\\n# 4. Unknown attribute value for product\\n\\nquery4 = f\\\"\\\"\\\"SELECT ('Unknown attribute value for product') as DQ, LINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME, \\nATTR_CODE_LIST ATTR_CODE_LIST, \\nLVL LVL, \\nUNKNOWN UNKNOWN \\nFROM (WITH err AS (\\n    SELECT * FROM tier1_prod_gav\\n    WHERE (ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL) \\n    OR (ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL)\\n    OR (ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL)\\n    OR (ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL)\\n    OR (ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL)\\n    OR (ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL)\\n    OR (ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL)\\n    OR (ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL)\\n  --  OR (ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL) <GC> During develeopment, I dont see this column in sample dataframe. It should be corrected at Turbine Graph to populate this column\\n\\t)\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_1 AS LVL, ATTR_CODE_1 AS UNKNOWN FROM err WHERE ATTR_CODE_1 IS NOT NULL AND ATTR_VAL_1 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_2 AS LVL, ATTR_CODE_2 AS UNKNOWN FROM err WHERE ATTR_CODE_2 IS NOT NULL AND ATTR_VAL_2 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_3 AS LVL, ATTR_CODE_3 AS UNKNOWN FROM err WHERE ATTR_CODE_3 IS NOT NULL AND ATTR_VAL_3 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_4 AS LVL, ATTR_CODE_4 AS UNKNOWN FROM err WHERE ATTR_CODE_4 IS NOT NULL AND ATTR_VAL_4 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_5 AS LVL, ATTR_CODE_5 AS UNKNOWN FROM err WHERE ATTR_CODE_5 IS NOT NULL AND ATTR_VAL_5 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_6 AS LVL, ATTR_CODE_6 AS UNKNOWN FROM err WHERE ATTR_CODE_6 IS NOT NULL AND ATTR_VAL_6 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_7 AS LVL, ATTR_CODE_7 AS UNKNOWN FROM err WHERE ATTR_CODE_7 IS NOT NULL AND ATTR_VAL_7 IS NULL\\n    UNION ALL\\n\\tSELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_8 AS LVL, ATTR_CODE_8 AS UNKNOWN FROM err WHERE ATTR_CODE_8 IS NOT NULL AND ATTR_VAL_8 IS NULL\\n --   UNION ALL\\n\\t--SELECT LINE_NUM, EXTRN_CODE, EXTRN_NAME, ATTR_CODE_LIST, ATTR_NAME_9 AS LVL, ATTR_CODE_9 AS UNKNOWN FROM err WHERE ATTR_CODE_9 IS NOT NULL AND ATTR_VAL_9 IS NULL\\n    )\\t\\n--\\tWHERE limit 100\\n--\\tORDER BY LINE_NUM \\\"\\\"\\\" \\nprod_attr_unk = spark.sql(query4).orderBy('LINE_NUM')\\n\\n\\n# 6. No data: N/A or zero in every input row, for time period\\n\\nquery6 = f\\\"\\\"\\\"SELECT \\n('No data: N/A or zero in every input row, for time period') as DQ,\\nLINE_NUM dLINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT TIME_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY TIME_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_time_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.TIME_EXTRN_CODE \\nWHERE B.TIME_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\n--WHERE limit 500\\\"\\\"\\\"\\n\\nfact_time_perd_miss = spark.sql(query6)\\n\\n# 7. No data: N/A or zero in every input row, for market\\nquery7 = f\\\"\\\"\\\"SELECT \\n('No data: N/A or zero in every input row, for market') as DQ,\\nLINE_NUM LINE_NUM, \\nEXTRN_CODE EXTRN_CODE, \\nEXTRN_NAME EXTRN_NAME \\nFROM (WITH ret0 AS (\\nSELECT MKT_EXTRN_CODE FROM tier1_fct_conv\\nGROUP BY MKT_EXTRN_CODE HAVING (\\nMAX(FACT_AMT_1)>0 OR MAX(FACT_AMT_2)>0 OR MAX(FACT_AMT_3)>0 OR MAX(FACT_AMT_4)>0 OR \\nMAX(FACT_AMT_5)>0 OR MAX(FACT_AMT_6)>0 OR MAX(FACT_AMT_7)>0 OR MAX(FACT_AMT_8)>0 OR \\nMAX(FACT_AMT_9)>0 OR MAX(FACT_AMT_10)>0 OR MAX(FACT_AMT_11)>0 OR MAX(FACT_AMT_12)>0 OR \\nMAX(FACT_AMT_13)>0 OR MAX(FACT_AMT_14)>0 OR MAX(FACT_AMT_15)>0 OR MAX(FACT_AMT_16)>0 OR \\nMAX(FACT_AMT_17)>0 OR MAX(FACT_AMT_18)>0 OR MAX(FACT_AMT_19)>0 OR MAX(FACT_AMT_20)>0)\\n)    \\nSELECT A.LINE_NUM AS LINE_NUM, A.EXTRN_CODE AS EXTRN_CODE, A.EXTRN_NAME FROM tier1_mkt_mtrlz_tbl A \\nLEFT JOIN ret0 B ON A.EXTRN_CODE = B.MKT_EXTRN_CODE \\nWHERE B.MKT_EXTRN_CODE IS NULL\\nORDER BY LINE_NUM)\\n--WHERE limit 500 \\\"\\\"\\\"\\n\\nfact_mkt_miss = spark.sql(query7)\\n\\n# Create view mm_time_perd_assoc_tier1_vw\\n\\nquery = f\\\"\\\"\\\"with CAL_TYPE_2 as (\\nSELECT   2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_b,\\n          tb.time_perd_start_date time_perd_start_date_b,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_a,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          ta.time_perd_end_date time_perd_end_date_a,\\n          ta.time_perd_start_date time_perd_start_date_a\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n     WHERE assoc.CAL_TYPE_ID=2),\\nBIMTH_2_MTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_B TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_A TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          tb.time_perd_end_date time_perd_end_date_A,\\n          tb.time_perd_start_date time_perd_start_date_A\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\nMTH_2_BIMTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A ,\\n          assoc.TIME_PERD_ID_B ,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_A,\\n          ta.time_perd_end_date time_perd_end_date_A,\\n          ta.time_perd_start_date time_perd_start_date_A,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_B,\\n          tb.time_perd_start_date time_perd_start_date_B\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\n\\nBW_2_EB AS (SELECT  2 CAL_TYPE_ID,\\n          ta.EVEN_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.EVEN_BIMTH_TIME_PERD_CLASS_COD TIME_PERD_CLASS_CODE_A,\\n          ta.EVEN_BIMTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.EVEN_BIMTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.EVEN_BIMTH_START_DATE TIME_PERD_START_DATE_A\\n     FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='EB'\\n    ),\\n\\nBW_2_MTH AS (SELECT  2 CAL_TYPE_ID,\\n          ta.ODD_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.MTH_TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.MTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.MTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.MTH_START_DATE TIME_PERD_START_DATE_A\\n               FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='MTH'\\n    )\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM CAL_TYPE_2\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BIMTH_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_EB\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID, CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM MTH_2_BIMTH\\\"\\\"\\\"\\ndf_mm_time_perd_assoc_tier1_vw= spark.sql(query)\\ndf_mm_time_perd_assoc_tier1_vw.createOrReplaceTempView('mm_time_perd_assoc_tier1_vw')\\n\\n##'Time period of weeks not properly generated' \\nsql_time_period_wks_nt_gen=f\\\"\\\"\\\"\\nselect ('Time period of weeks not properly generated') as DQ, * from (WITH wk_mth_assoc AS (SELECT * FROM mm_time_perd_assoc_tier1_vw WHERE time_perd_type_code_B = 'WKMS' AND TIME_PERD_type_CODE_A = 'MH' AND cal_type_id = 2  AND time_perd_assoc_type_id = 1),\\nwk_loaded AS (SELECT tp.time_perd_end_date mm_time_perd_end_date FROM tier1_time_mtrlz_tbl stime  JOIN mm_time_perd_id_lkp\\nON mm_time_perd_id_lkp.EXTRN_TIME_PERD_ID =stime.EXTRN_CODE AND mm_time_perd_id_lkp.VENDR_ID ='{tier1_vendr_id}'\\nJOIN mm_time_perd_fdim tp ON tp.TIME_PERD_ID = mm_time_perd_id_lkp.time_perd_id AND tp.time_perd_class_code = 'WK'),\\nwk_prev_all AS(SELECT time_perd_end_date mm_time_perd_end_date FROM \\n(SELECT DISTINCT tp.time_perd_end_date FROM mm_run_time_perd_plc plc JOIN dpf_all_run_vw run ON \\nrun.run_id = plc.run_id JOIN mm_cntrt_lkp cntrt ON cntrt.prcsg_id = run.run_id\\nJOIN mm_time_perd_fdim tp ON tp.time_perd_id = plc.time_perd_id WHERE cntrt.cntrt_id = '{cntrt_id}'\\nAND run.process_status ='completed' \\nAND run.end_date_time <= current_timestamp())),\\nwk_new AS(SELECT mm_time_perd_end_date, 'new' AS STATUS FROM wk_loaded MINUS SELECT mm_time_perd_end_date,'new' AS STATUS FROM wk_prev_all),\\nwk_redelivered AS (SELECT mm_time_perd_end_date mm_time_perd_end_date, 'redelivered' AS STATUS FROM wk_loaded INTERSECT\\nSELECT mm_time_perd_end_date,'redelivered' AS STATUS FROM wk_prev_all),\\nwk_existing AS(SELECT mm_time_perd_end_date, 'existing' AS STATUS FROM wk_prev_all MINUS SELECT mm_time_perd_end_date,'existing' AS STATUS FROM wk_loaded),\\nwk_all AS (SELECT * FROM wk_new UNION ALL SELECT * FROM wk_redelivered UNION ALL SELECT * FROM wk_existing),\\nmth_loaded AS (SELECT DISTINCT wk_mth_assoc.time_perd_end_date_a as time_perd_end_date,wk_mth_assoc.time_perd_id_a as time_perd_id ,tp.time_perd_name FROM wk_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_end_date_b =wk_loaded.mm_time_perd_end_date JOIN mm_time_perd_fdim tp ON tp.time_perd_id = wk_mth_assoc.time_perd_id_a),\\n tbl AS (SELECT time_perd.time_perd_type_name wk_name, time_perd_end_date TIME_PERD_END,cast((TO_DATE(time_perd_end_date),'DD-MON-YYYY')as string) as TIME_PERD_END_DATE, mth_loaded.time_perd_name mth_name, COUNT(time_perd.time_perd_type_name) OVER (PARTITION BY mth_loaded.time_perd_name) cnt,\\nCASE WHEN wk_all.mm_time_perd_end_date IS NULL THEN 'missing'ELSE STATUS END AS STATUS_ALL FROM mth_loaded JOIN wk_mth_assoc ON wk_mth_assoc.time_perd_id_a = mth_loaded.time_perd_id LEFT OUTER JOIN wk_all ON wk_all.mm_time_perd_end_date =wk_mth_assoc.time_perd_end_date_b JOIN mm_time_perd time_perd ON wk_mth_assoc.time_perd_id_b = time_perd.time_perd_id)\\nSELECT *, 'missing','new','recalculated','existing' FROM tbl WHERE  STATUS_ALL = 'missing' and STATUS_ALL = 'new' and STATUS_ALL = 'redelivered' and STATUS_ALL = 'existing'  and MTH_NAME = tbl.MTH_NAME limit 1)where limit 501\\\"\\\"\\\"\\ndf_time_period_wks_nt_gen=spark.sql(sql_time_period_wks_nt_gen)\\n\\n##Duplicated time period after mapping\\nsql_dup_time_period_aftr_mapng=f\\\"\\\"\\\"WITH data AS(SELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id ='{srce_sys_id}'\\nAND xref.cntrt_id = '{cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id ='{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM \\ntier1_mkt_mtrlz_tbl src JOIN mm_mkt_xref xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = '{srce_sys_id}'\\nAND xref.cntrt_id = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}'= 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM  tier1_mkt_mtrlz_tbl src  \\nJOIN mm_mkt_skid_cntrt_lkp_vw lkp\\nON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\nAND lkp.CNTRT_ID = '{tier1_cntrt_id}'\\nWHERE '{tier1_fact_type_code}' = 'TP'),\\nskid AS (SELECT ('Duplicated time period after mapping') as DQ, MKT_skid as mkt_skid FROM data GROUP BY MKT_skid HAVING COUNT(DISTINCT line_num)>1)\\nselect * from skid limit 1\\\"\\\"\\\"\\ndf_dup_time_period_aftr_mapng=spark.sql(sql_dup_time_period_aftr_mapng)\\n\\n\\n####Missing/delivered areas\\nsql_msng_delv_areas=f\\\"\\\"\\\"\\nWITH mkt_ref_lkp\\n     AS (SELECT /*+ materialize */ *\\n         FROM  (\\n                SELECT COALESCE(mkt_cntrt.EXTRN_MKT_ID, mkt_as.EXTRN_MKT_ID) AS EXTRN_MKT_ID,\\n                       NULL AS EXTRN_MKT_NAME,\\n                       COALESCE(mkt_cntrt.MKT_SKID, mkt_as.MKT_SKID) AS MKT_SKID\\n                FROM   (SELECT  *\\n                        FROM    MM_MKT_SKID_LKP\\n                        WHERE   SRCE_SYS_ID = {srce_sys_id}\\n                            AND VENDR_ID = {tier1_vendr_id}\\n                            AND CNTRY_ID = '{cntry_id}'\\n                            AND CNTRT_ID IS NULL) mkt_as\\n                       FULL OUTER JOIN (SELECT  *\\n                                        FROM    MM_MKT_SKID_LKP\\n                                        WHERE   SRCE_SYS_ID = {srce_sys_id}\\n                                            AND CNTRY_ID = '{cntry_id}'\\n                                            AND CNTRT_ID = {cntrt_id}\\n                                            AND EXTRN_MKT_ID IS NOT NULL) mkt_cntrt\\n                                    ON mkt_as.EXTRN_MKT_ID = mkt_cntrt.EXTRN_MKT_ID\\n                WHERE  '{tier1_fact_type_code}' = 'TP')),\\n\\n     mkt_delivery\\n     AS (SELECT /*+ parallel(8) */ src.EXTRN_MKT_ID,\\n                                               src.EXTRN_MKT_NAME,\\n                                               lkp.MKT_SKID\\n         FROM   tier1_mkt_mtrlz_tbl src\\n                LEFT OUTER JOIN mkt_ref_lkp lkp\\n                  ON src.EXTRN_MKT_ID = lkp.EXTRN_MKT_ID\\n         WHERE  lkp.MKT_SKID IS NOT NULL),\\n\\n     miss_mkt_fct_delivery\\n     AS (SELECT /*+ materialize parallel(8) */ mkt.EXTRN_MKT_ID,\\n                                               mkt.MKT_SKID\\n         FROM   mkt_delivery mkt\\n                LEFT OUTER JOIN tier1_fact_mtrlz_tbl fct\\n                             ON mkt.EXTRN_MKT_ID = fct.MKT_EXTRN_CODE\\n         WHERE  fct.MKT_EXTRN_CODE IS NULL),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time as START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id})\\n            AND process_status IN ('FINISHED', 'COMPLETED' )\\n            ORDER BY start_date_time DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  cast(START_TIME_STAMP as date) < (SELECT cast(start_date_time as date)\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  cast(RUN_ID as decimal(38,10)) = {tier1_run_id})\\n            AND RUN_LATEST=1),\\n\\n     mkt_plc_last_run\\n     AS (SELECT plc.EXTRN_MKT_ID,\\n                plc.EXTRN_MKT_NAME,\\n                MKT_SKID\\n         FROM   MM_RUN_MKT_PLC plc\\n         WHERE  cast(RUN_ID as decimal(38,10)) = (SELECT cast(RUN_ID as decimal(38,10))\\n                          FROM   last_run)\\n           AND  EXTRN_MKT_ID IS NOT NULL\\n           AND  MKT_SKID IS NOT NULL),\\n\\n     last_run_prttn\\n     AS (SELECT RUN_ID,\\n                MM_TIME_PERD_END_DATE AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM   MM_RUN_PRTTN_PLC\\n         WHERE  cast(RUN_ID as decimal(38,10)) = (SELECT cast(RUN_ID as decimal(38,10))\\n                          FROM   last_run)\\n            AND TIME_PERD_CLASS_CODE = '{time_perd_class_code}'\\n            AND CNTRT_ID = {cntrt_id}),\\n\\n     fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.MKT_SKID\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_run_prttn tp\\n                  ON fct.RUN_ID = tp.RUN_ID\\n                     AND fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     mkt_skid_slkp AS (\\n       SELECT /*+ materialize */ mkt_skid,MAX(EXTRN_MKT_ID) EXTRN_MKT_ID, MAX(EXTRN_MKT_NAME) EXTRN_MKT_NAME\\n       FROM mkt_ref_lkp\\n       GROUP BY mkt_skid),\\n\\n       mkt_fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ m.EXTRN_MKT_ID,\\n                                               m.EXTRN_MKT_NAME,\\n                                               fct.MKT_SKID\\n         FROM   fct_last_run fct left outer join mkt_skid_slkp m on m.mkt_skid= fct.mkt_skid),\\n\\n     mkt_last_run\\n     AS (SELECT *\\n         FROM   mkt_plc_last_run\\n         UNION ALL\\n         SELECT *\\n         FROM   mkt_fct_last_run\\n         WHERE  (SELECT COUNT(*)\\n                 FROM   mkt_plc_last_run) = 0),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WKKKK%' THEN  -- This step is turned off as MM_RUN_PRTTN_PLC published with WK data only\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = '{time_perd_class_code}'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.MKT_SKID\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_period_prttn tp\\n                  ON fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     mkt_fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ m.EXTRN_MKT_ID,\\n                                               m.EXTRN_MKT_NAME,\\n                                               fct.MKT_SKID\\n         FROM   fct_last_period fct left outer join mkt_skid_slkp m on m.mkt_skid= fct.mkt_skid),\\n\\n     mkt_delivery_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(mkt_delivery.EXTRN_MKT_ID, mkt_last_run.EXTRN_MKT_ID) AS EXTRN_MKT_ID,\\n                                   COALESCE(mkt_delivery.EXTRN_MKT_NAME, mkt_last_run.EXTRN_MKT_NAME) AS EXTRN_MKT_NAME,\\n                                   COALESCE(mkt_delivery.MKT_SKID, mkt_last_run.MKT_SKID) AS MKT_SKID,\\n                                   NVL2(mkt_delivery.MKT_SKID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(mkt_last_run.MKT_SKID, 'N', 'Y') AS NEW_IND\\n         FROM   mkt_delivery\\n                FULL OUTER JOIN mkt_last_run\\n                             ON mkt_delivery.MKT_SKID = mkt_last_run.MKT_SKID),\\n\\n     mkt_delivery_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(mkt_delivery.EXTRN_MKT_ID, mkt_fct_last_period.EXTRN_MKT_ID) AS EXTRN_MKT_ID,\\n                                   COALESCE(mkt_delivery.EXTRN_MKT_NAME, mkt_fct_last_period.EXTRN_MKT_NAME) AS EXTRN_MKT_NAME,\\n                                   COALESCE(mkt_delivery.MKT_SKID, mkt_fct_last_period.MKT_SKID) AS MKT_SKID,\\n                                   NVL2(mkt_delivery.MKT_SKID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(mkt_fct_last_period.MKT_SKID, 'N', 'Y') AS NEW_IND\\n         FROM   mkt_delivery\\n                FULL OUTER JOIN mkt_fct_last_period\\n                             ON mkt_delivery.MKT_SKID = mkt_fct_last_period.MKT_SKID),\\n\\n     mkt_delivery_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(mkt_delivery_vs_last_run.EXTRN_MKT_ID, mkt_delivery_vs_last_period.EXTRN_MKT_ID) AS EXTRN_MKT_ID,\\n                                   COALESCE(mkt_delivery_vs_last_run.EXTRN_MKT_NAME, mkt_delivery_vs_last_period.EXTRN_MKT_NAME) AS EXTRN_MKT_NAME,\\n                                   COALESCE(mkt_delivery_vs_last_run.MKT_SKID, mkt_delivery_vs_last_period.MKT_SKID) AS MKT_SKID,\\n                                   mkt_delivery_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   mkt_delivery_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   mkt_delivery_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   mkt_delivery_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   mkt_delivery_vs_last_run\\n                FULL OUTER JOIN mkt_delivery_vs_last_period\\n                             ON mkt_delivery_vs_last_run.MKT_SKID = mkt_delivery_vs_last_period.MKT_SKID),\\n\\n     miss_mkt_vs_last_run\\n     AS (SELECT /*+ materialize */ miss_mkt_fct_delivery.MKT_SKID,\\n                                   NVL2(mkt_fct_last_run.MKT_SKID, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_mkt_fct_delivery\\n                LEFT OUTER JOIN mkt_fct_last_run\\n                             ON miss_mkt_fct_delivery.MKT_SKID = mkt_fct_last_run.MKT_SKID),\\n\\n     miss_mkt_vs_last_period\\n     AS (SELECT /*+ materialize */ miss_mkt_fct_delivery.MKT_SKID,\\n                                   NVL2(mkt_fct_last_period.MKT_SKID, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_mkt_fct_delivery\\n                LEFT OUTER JOIN mkt_fct_last_period\\n                             ON miss_mkt_fct_delivery.MKT_SKID = mkt_fct_last_period.MKT_SKID),\\n\\n     total_country\\n     AS (SELECT UPPER(cntry_name) AS TOTAL_COUNTRY\\n         FROM   mm_cntrt_tier_extnd_vw\\n         WHERE  CNTRT_ID = {cntrt_id}),\\n\\n     total_market\\n     AS (SELECT mkt_top_node_skid AS MKT_SKID\\n         FROM   mm_cntrt_tier_extnd_vw\\n         WHERE  CNTRT_ID = {cntrt_id}),\\n\\n     ret\\n     AS (SELECT tmp.EXTRN_MKT_ID,\\n                tmp.EXTRN_MKT_NAME,\\n                tmp.MKT_SKID,\\n                dim.MKT_NAME,\\n                CASE\\n                  WHEN LAST_RUN_MISS_VAL = 'Y'\\n                       AND LAST_RUN_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_RUN_STATUS\\n                END\\n                AS LAST_RUN_STATUS,\\n                CASE\\n                  WHEN LAST_PERIOD_MISS_VAL = 'Y'\\n                       AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_PERIOD_STATUS\\n                END\\n                AS LAST_PERIOD_STATUS,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.EXTRN_MKT_NAME)\\n                AS RANK_NUMBER,\\n                CASE\\n                  WHEN (SELECT MKT_SKID\\n                        FROM   total_market) IS NOT NULL THEN\\n                    CASE\\n                      WHEN dim.CUSTM_AGG_IND = 'Y' THEN 'Y'\\n                      WHEN total_market.MKT_SKID IS NOT NULL THEN 'Y'\\n                    END\\n                  ELSE\\n                    CASE\\n                      WHEN tmp.EXTRN_MKT_NAME = '1 '||'{cntry_id}' THEN 'Y'\\n                      ELSE\\n                        CASE\\n                          WHEN dim.MKT_NAME = 'TOTAL '||(SELECT TOTAL_COUNTRY\\n                                                               FROM   total_country) THEN 'Y'\\n                        END\\n                    END\\n                END\\n                AS TOTAL_COUNTRY\\n         FROM   (SELECT COALESCE(mkt_delivery.EXTRN_MKT_ID, mkt_delivery_vs_all_cases.EXTRN_MKT_ID)\\n                        AS EXTRN_MKT_ID,\\n                        COALESCE(mkt_delivery.EXTRN_MKT_NAME, mkt_delivery_vs_all_cases.EXTRN_MKT_NAME)\\n                        AS EXTRN_MKT_NAME,\\n                        COALESCE(mkt_delivery.MKT_SKID, mkt_delivery_vs_all_cases.MKT_SKID)\\n                        AS MKT_SKID,\\n                        CASE\\n                          WHEN mkt_delivery_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN mkt_delivery_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN mkt_delivery_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN mkt_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN mkt_delivery_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN mkt_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS,\\n                        miss_mkt_vs_last_run.MISSING_IND AS LAST_RUN_MISS_VAL,\\n                        miss_mkt_vs_last_period.MISSING_IND AS LAST_PERIOD_MISS_VAL\\n                 FROM   mkt_delivery\\n                        FULL OUTER JOIN mkt_delivery_vs_all_cases\\n                                     ON mkt_delivery.MKT_SKID = mkt_delivery_vs_all_cases.MKT_SKID\\n                        LEFT OUTER JOIN miss_mkt_vs_last_run\\n                                     ON mkt_delivery.MKT_SKID = miss_mkt_vs_last_run.MKT_SKID\\n                        LEFT OUTER JOIN miss_mkt_vs_last_period\\n                                     ON mkt_delivery.MKT_SKID = miss_mkt_vs_last_period.MKT_SKID) tmp\\n                LEFT OUTER JOIN MM_MKT_DIM dim\\n                             ON dim.SRCE_SYS_ID = {srce_sys_id}\\n                                AND tmp.MKT_SKID = dim.MKT_SKID\\n                LEFT OUTER JOIN total_market\\n                             ON tmp.MKT_SKID = total_market.MKT_SKID)\\n\\nSELECT --ROWNUM AS LINE_NUMBER,\\n      ('Missing/delivered areas') as DQ,\\n       EXTRN_MKT_ID,\\n       EXTRN_MKT_NAME,\\n       MKT_SKID,\\n       MKT_NAME,\\n       LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS\\n       --TOTAL_COUNTRY\\nFROM   (SELECT EXTRN_MKT_ID,\\n               EXTRN_MKT_NAME,\\n               MKT_SKID,\\n               MKT_NAME,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS,\\n               TOTAL_COUNTRY\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n            OR TOTAL_COUNTRY = 'Y'\\n        ORDER  BY TOTAL_COUNTRY,\\n                  CASE\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'NEW' THEN 1\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 2\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 3\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'NEW' THEN 4\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'NEW' THEN 5\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 6\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 7\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 8\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 9\\n                    WHEN LAST_RUN_STATUS = 'MISSING' OR LAST_PERIOD_STATUS = 'MISSING' THEN 10\\n                    ELSE 11\\n                  END,\\n                  RANK_NUMBER)\\\"\\\"\\\"\\ndf_msng_delv_areas=spark.sql(sql_msng_delv_areas)\\n\\n# DQ12 - Unknown time period\\n\\nquery12 = f\\\"\\\"\\\"SELECT\\n('Unknown time period') as DQ,\\nMM_TIME_PERD_ID as MM_TIME_PERD_ID,    \\nLINE_NUM as LINE_NUM,\\nEXTRN_CODE as EXTRN_CODE,\\nEXTRN_NAME as EXTRN_NAME\\nFROM (\\n        SELECT * FROM tier1_time_mtrlz_tbl src \\n        LEFT JOIN  MM_TIME_PERD_ID_LKP map ON src.EXTRN_CODE = map.EXTRN_TIME_PERD_ID AND map.VENDR_ID = {tier1_vendr_id}\\n        WHERE VENDR_ID IS NULL\\n        )\\n--           WHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_time_perd_id_map_unk = spark.sql(query12)\\n\\n# DQ13 - Unknown market\\n\\nquery13 = f\\\"\\\"\\\"SELECT * FROM (SELECT \\n('Unknown market') DQ,\\nMN.LINE_NUM LINE_NUM,\\nMN.EXTRN_CODE as EXTRN_CODE,\\nMN.EXTRN_NAME as EXTRN_NAME\\nFROM tier1_mkt_mtrlz_tbl MN\\n    LEFT JOIN MM_MKT_XREF \\n      ON MM_MKT_XREF.EXTRN_MKT_ID = MN.EXTRN_CODE\\n      AND MM_MKT_XREF.CNTRT_ID = {cntrt_id}\\n      AND MM_MKT_XREF.SRCE_SYS_ID = {srce_sys_id}\\n    LEFT JOIN MM_MKT_SKID_CNTRT_LKP_VW  \\n      ON MM_MKT_SKID_CNTRT_LKP_VW.EXTRN_MKT_ID = MN.EXTRN_CODE   \\n      AND MM_MKT_SKID_CNTRT_LKP_VW.CNTRT_ID = {cntrt_id} \\n    WHERE MM_MKT_XREF.MKT_SKID IS NULL AND MM_MKT_SKID_CNTRT_LKP_VW.MKT_SKID IS NULL\\n\\tORDER BY LINE_NUM)\\n--\\tWHERE LIMIT 500\\\"\\\"\\\"\\n\\ntier1_mkt_id_map_unk = spark.sql(query13)\\n\\n#DQ14 - Duplicated market after mapping\\n\\nquery14 = f\\\"\\\"\\\"SELECT \\n('Duplicated market after mapping') as DQ,\\nline_num as line_num, \\nvendor_tag as vendor_tag, \\nMKT_codes_new as MKT_codes_new, \\nvendor_tag_old as vendor_tag_old \\nFROM (\\nWITH data AS (\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid \\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.extrn_code = xref.extrn_MKT_id AND src.EXTRN_MKT_ATTR_VAL_LIST <> xref.EXTRN_MKT_ATTR_VAL_LIST\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT  src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, xref.EXTRN_MKT_ID, MKT_skid\\nFROM tier1_mkt_mtrlz_tbl src JOIN MM_MKT_XREF xref ON \\nsrc.EXTRN_MKT_ATTR_VAL_LIST = xref.EXTRN_MKT_ATTR_VAL_LIST AND src.extrn_code <> xref.extrn_MKT_id\\nAND xref.srce_sys_id = 3 \\nAND xref.cntrt_id = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'SF'\\nUNION ALL\\nSELECT src.line_num, src.extrn_code, src.EXTRN_MKT_ATTR_VAL_LIST, lkp.EXTRN_MKT_ID, MKT_skid FROM tier1_mkt_mtrlz_tbl src   \\t\\t\\t\\t\\n\\t\\t\\t\\tJOIN MM_MKT_SKID_CNTRT_LKP_VW lkp\\n                ON lkp.EXTRN_MKT_ID = src.EXTRN_CODE\\n                AND lkp.CNTRT_ID = {cntrt_id}\\nWHERE '{tier1_fact_type_code}' = 'TP'\\n),\\nskid AS (\\nSELECT MKT_skid FROM data \\nGROUP BY MKT_skid\\nHAVING COUNT(DISTINCT line_num)>1\\n)\\nSELECT DISTINCT line_num, extrn_code vendor_tag, EXTRN_MKT_ATTR_VAL_LIST MKT_codes_new, EXTRN_MKT_ID vendor_tag_old FROM data\\nJOIN skid on data.MKT_skid = skid.MKT_skid\\nORDER BY line_num)\\n--\\tWHERE LIMIT 500 \\\"\\\"\\\"\\n \\ntier1_mkt_map_dup = spark.sql(query14)\\n\\n\\n# DQ16 - Missing/delivered hierarchies\\n\\nquery16 = f\\\"\\\"\\\"WITH prod_dlvr\\n     AS (SELECT src.EXTRN_PROD_ID,\\n                COALESCE(strct.STRCT_CODE, src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0) AS STRCT_CODE,\\n                strct.STRCT_NAME\\n         FROM   tier1_prod_mtrlz_tbl src\\n                LEFT OUTER JOIN MM_STRCT_LKP strct\\n                  ON src.ATTR_CODE_1||'_H'||src.ATTR_CODE_0 = strct.STRCT_CODE),\\n\\n     prod_hier_dlvr\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   PROD_DLVR\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     miss_prod_hier_fct_dlvr\\n     AS (SELECT /*+ materialize */ STRCT_CODE\\n         FROM (SELECT STRCT_CODE FROM prod_hier_dlvr\\n               MINUS\\n               SELECT DISTINCT prod.STRCT_CODE\\n               FROM   PROD_DLVR prod\\n                      JOIN tier1_fact_mtrlz_tbl fct\\n                        ON prod.EXTRN_PROD_ID = fct.PROD_EXTRN_CODE)),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id} )\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id} )\\n            AND RUN_LATEST=1),\\n\\n     prod_last_run\\n     AS (SELECT plc.EXTRN_PROD_ID,\\n                STRCT_CODE,\\n                STRCT_NAME\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_PROD_PLC\\n                 WHERE  RUN_ID = (SELECT RUN_ID\\n                                  FROM   LAST_RUN)) plc\\n                JOIN MM_PROD_DIM dim\\n                  ON plc.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND plc.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                     AND plc.PROD_SKID = dim.PROD_SKID\\n                     AND dim.CNTRT_ID = {cntrt_id}\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_plc_last_run\\n     AS (SELECT /*+ materialize */ DISTINCT STRCT_CODE,\\n                                            STRCT_NAME\\n         FROM   prod_last_run\\n         WHERE  STRCT_CODE IS NOT NULL),\\n\\n     last_run_prttn\\n     AS (SELECT RUN_ID,\\n                MM_TIME_PERD_END_DATE AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM   MM_RUN_PRTTN_PLC\\n         WHERE  RUN_ID = (SELECT RUN_ID\\n                          FROM   last_run)\\n            AND TIME_PERD_CLASS_CODE = 'MTH'\\n            AND CNTRT_ID = {cntrt_id}),\\n\\n     fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_run_prttn tp\\n                  ON fct.RUN_ID = tp.RUN_ID\\n                     AND fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_run\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   FCT_LAST_RUN fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_last_run\\n     AS (SELECT *\\n         FROM   prod_hier_plc_last_run\\n         UNION ALL\\n         SELECT *\\n         FROM   prod_hier_fct_last_run\\n         WHERE  (SELECT COUNT(*)\\n                 FROM   prod_hier_plc_last_run) = 0),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WKKKK%' THEN -- This step is turned off as MM_RUN_PRTTN_PLC published with WK data only\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = '{time_perd_class_code}'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT fct.SRCE_SYS_ID,\\n                                                        fct.CNTRT_ID,\\n                                                        fct.PROD_SKID,\\n                                                        fct.PROD_PRTTN_CODE\\n         FROM   MM_TP_MTH_FCT fct\\n                JOIN last_period_prttn tp\\n                  ON fct.MM_TIME_PERD_END_DATE = tp.TIME_PERD_END_DATE\\n                     AND fct.SRCE_SYS_ID = tp.SRCE_SYS_ID\\n                     AND fct.CNTRT_ID = tp.CNTRT_ID\\n                     AND fct.FACT_TYPE_CODE = tp.FACT_TYPE_CODE\\n                     AND fct.PROD_PRTTN_CODE = tp.PROD_PRTTN_CODE),\\n\\n     prod_hier_fct_last_period\\n     AS (SELECT /*+ materialize parallel(8) */ DISTINCT strct.STRCT_CODE,\\n                                                        STRCT_NAME\\n         FROM   fct_last_period fct\\n                JOIN MM_PROD_DIM dim\\n                  ON fct.PROD_SKID = dim.PROD_SKID\\n                     AND fct.CNTRT_ID = dim.CNTRT_ID\\n                     AND fct.SRCE_SYS_ID = dim.SRCE_SYS_ID\\n                     AND fct.PROD_PRTTN_CODE = dim.PROD_PRTTN_CODE\\n                JOIN MM_STRCT_LVL_LKP lvl\\n                  ON dim.PROD_LVL_ID = lvl.STRCT_LVL_ID\\n                JOIN MM_STRCT_LKP strct\\n                  ON strct.STRCT_ID = lvl.STRCT_ID),\\n\\n     prod_hier_dlvr_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_last_run.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_last_run.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_last_run.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_last_run\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_last_run.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_fct_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_fct_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   NVL2(prod_hier_dlvr.STRCT_CODE, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'N', 'Y') AS NEW_IND\\n         FROM   prod_hier_dlvr\\n                FULL OUTER JOIN prod_hier_fct_last_period\\n                             ON prod_hier_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     prod_hier_dlvr_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(prod_hier_dlvr_vs_last_run.STRCT_CODE, prod_hier_dlvr_vs_last_period.STRCT_CODE) AS STRCT_CODE,\\n                                   COALESCE(prod_hier_dlvr_vs_last_run.STRCT_NAME, prod_hier_dlvr_vs_last_period.STRCT_NAME) AS STRCT_NAME,\\n                                   prod_hier_dlvr_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   prod_hier_dlvr_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   prod_hier_dlvr_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   prod_hier_dlvr_vs_last_run\\n                FULL OUTER JOIN prod_hier_dlvr_vs_last_period\\n                             ON prod_hier_dlvr_vs_last_run.STRCT_CODE = prod_hier_dlvr_vs_last_period.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_run\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_run.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_run\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_run.STRCT_CODE),\\n\\n     miss_prod_hier_vs_last_period\\n     AS (SELECT /*+ materialize */ miss_prod_hier_fct_dlvr.STRCT_CODE,\\n                                   NVL2(prod_hier_fct_last_period.STRCT_CODE, 'Y', 'N') AS MISSING_IND\\n         FROM   miss_prod_hier_fct_dlvr\\n                LEFT OUTER JOIN prod_hier_fct_last_period\\n                             ON miss_prod_hier_fct_dlvr.STRCT_CODE = prod_hier_fct_last_period.STRCT_CODE),\\n\\n     ret\\n     AS (SELECT tmp.STRCT_CODE,\\n                tmp.STRCT_NAME,\\n                CASE\\n                  WHEN LAST_RUN_MISS_VAL = 'Y'\\n                       AND LAST_RUN_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_RUN_STATUS\\n                END\\n                AS LAST_RUN_STATUS,\\n                CASE\\n                  WHEN LAST_PERIOD_MISS_VAL = 'Y'\\n                       AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 'CONTINUE | MISSING VALUES'\\n                  ELSE LAST_PERIOD_STATUS\\n                END\\n                AS LAST_PERIOD_STATUS,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.STRCT_CODE)\\n                AS RANK_NUMBER\\n         FROM   (SELECT COALESCE(prod_hier_dlvr.STRCT_CODE, prod_hier_dlvr_vs_all_cases.STRCT_CODE)\\n                        AS STRCT_CODE,\\n                        COALESCE(prod_hier_dlvr.STRCT_NAME, prod_hier_dlvr_vs_all_cases.STRCT_NAME)\\n                        AS STRCT_NAME,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN prod_hier_dlvr_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS,\\n                        miss_prod_hier_vs_last_run.MISSING_IND AS LAST_RUN_MISS_VAL,\\n                        miss_prod_hier_vs_last_period.MISSING_IND AS LAST_PERIOD_MISS_VAL\\n                 FROM   prod_hier_dlvr\\n                        FULL OUTER JOIN prod_hier_dlvr_vs_all_cases\\n                                     ON prod_hier_dlvr.STRCT_CODE = prod_hier_dlvr_vs_all_cases.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_run\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_run.STRCT_CODE\\n                        LEFT OUTER JOIN miss_prod_hier_vs_last_period\\n                                     ON prod_hier_dlvr.STRCT_CODE = miss_prod_hier_vs_last_period.STRCT_CODE) tmp)\\n\\nSELECT --ROWNUM AS LINE_NUMBER,\\n       ('Missing/delivered hierarchies') as DQ,\\n       STRCT_CODE STRCT_CODE,\\n       STRCT_NAME STRCT_NAME,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT STRCT_CODE,\\n               STRCT_NAME,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  STRCT_CODE,\\n                  RANK_NUMBER)\\\"\\\"\\\"\\n\\ntier1_miss_dlvrd_hier = spark.sql(query16)\\n\\n\\n# DQ17 - Missing/delivered measures\\n\\nquery17 = f\\\"\\\"\\\"WITH measr_delivery\\n     AS (SELECT src.EXTRN_CODE AS EXTRN_MEASR_ID,\\n                src.EXTRN_NAME AS EXTRN_MEASR_NAME,\\n                ml.MEASR_ID,\\n                ml.MEASR_NAME,\\n                COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   tier1_measr_map src\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON src.MEASR_ID = ml.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  upper(ml.USE_IND) = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     cntrt_finished_runs\\n     AS (SELECT RUN_ID,\\n                start_date_time START_TIME_STAMP,\\n                RANK () OVER (ORDER BY start_date_time DESC) RUN_LATEST\\n         FROM   DPF_ALL_RUN_VW\\n         WHERE  cntrt_id = (SELECT cntrt_id\\n                            FROM   MM_CNTRT_LKP\\n                            WHERE  CNTRT_ID = {cntrt_id})\\n            AND process_status = 'FINISHED'\\n            ORDER BY START_TIME_STAMP DESC),\\n\\n     last_run\\n     AS (SELECT RUN_ID\\n         FROM   cntrt_finished_runs\\n         WHERE  START_TIME_STAMP < (SELECT start_date_time\\n                                    FROM   DPF_ALL_RUN_VW\\n                                    WHERE  RUN_ID = {run_id})\\n            AND RUN_LATEST=1),\\n\\n     measr_last_run\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  cast(RUN_ID as decimal(38,10)) = (SELECT RUN_ID\\n                                  FROM   last_run)\\n                 AND    upper(CALC_IND) = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  upper(ml.USE_IND) = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     last_period_prttn\\n     AS (SELECT CASE\\n     /* Start: weekly contracts end date selection */\\n                    WHEN (SELECT TIME_PERD_TYPE_CODE\\n                          FROM   MM_CNTRT_TIME_PERD_TYPE_ASSOC\\n                          WHERE  CNTRT_ID = {cntrt_id}) like 'WKKK%' THEN -- This step is turned off as MM_RUN_PRTTN_PLC published with WK data only\\n                        ADD_MONTHS(TIME_PERD_END_DATE, -1)\\n     /* End: weekly contracts end date selection */\\n                    ELSE TIME_PERD_END_DATE\\n                END AS TIME_PERD_END_DATE,\\n                SRCE_SYS_ID,\\n                CNTRT_ID,\\n                FACT_TYPE_CODE,\\n                PROD_PRTTN_CODE\\n         FROM (SELECT MAX(MM_TIME_PERD_END_DATE) AS TIME_PERD_END_DATE,\\n                      MAX(SRCE_SYS_ID) AS SRCE_SYS_ID,\\n                      MAX(CNTRT_ID) AS CNTRT_ID,\\n                      MAX(FACT_TYPE_CODE) AS FACT_TYPE_CODE,\\n                      MAX(PROD_PRTTN_CODE) AS PROD_PRTTN_CODE\\n               FROM   MM_RUN_PRTTN_PLC plc\\n              WHERE  RUN_ID IN (SELECT RUN_ID\\n                                FROM   cntrt_finished_runs)\\n                      AND TIME_PERD_CLASS_CODE = '{time_perd_class_code}'\\n                AND CNTRT_ID = {cntrt_id})),\\n\\n     last_period_runs\\n     AS (SELECT DISTINCT RUN_ID\\n         FROM   MM_RUN_PRTTN_PLC plc\\n                JOIN LAST_PERIOD_PRTTN prttn\\n                  ON plc.CNTRT_ID = prttn.CNTRT_ID\\n                     AND plc.SRCE_SYS_ID = prttn.SRCE_SYS_ID\\n                     AND plc.MM_TIME_PERD_END_DATE = prttn.TIME_PERD_END_DATE\\n                     AND plc.FACT_TYPE_CODE = prttn.FACT_TYPE_CODE\\n                     AND plc.PROD_PRTTN_CODE = prttn.PROD_PRTTN_CODE),\\n\\n     measr_last_period\\n     AS (SELECT DISTINCT plc.EXTRN_MEASR_ID,\\n                         plc.EXTRN_MEASR_NAME,\\n                         ml.MEASR_ID,\\n                         ml.MEASR_NAME,\\n                         COALESCE(fctr_cntrt.FACTR, fctr_vendr.FACTR) AS FACTR\\n         FROM   (SELECT *\\n                 FROM   MM_RUN_MEASR_PLC\\n                 WHERE  cast(RUN_ID as decimal(38,10)) in (SELECT RUN_ID\\n                                  FROM   last_period_runs)\\n                 AND    upper(CALC_IND) = 'N') plc\\n                LEFT OUTER JOIN MM_MEASR_LKP ml\\n                  ON ml.MEASR_ID = plc.MEASR_ID\\n                     AND upper(ml.USE_IND) = 'Y'\\n                LEFT OUTER JOIN MM_MEASR_VENDR_FACTR_LKP fctr_vendr\\n                  ON ml.MEASR_ID = fctr_vendr.MEASR_ID\\n                     AND fctr_vendr.VENDR_ID = {tier1_vendr_id}\\n                LEFT OUTER JOIN MM_MEASR_CNTRT_FACTR_LKP fctr_cntrt\\n                  ON ml.MEASR_ID = fctr_cntrt.MEASR_ID\\n                     AND fctr_cntrt.CNTRT_ID = {cntrt_id}\\n         WHERE  upper(ml.USE_IND) = 'Y'\\n           AND  ml.MEASR_ID IS NOT NULL),\\n\\n     measr_delivery_vs_last_run\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_run.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_run.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_run.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_run.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_run.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_run.EXTRN_MEASR_ID, 'N', NVL2(measr_last_run.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_run\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_run.EXTRN_MEASR_ID\\n                                OR (measr_last_run.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_run.MEASR_ID)),\\n\\n     measr_delivery_vs_last_period\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery.MEASR_ID, measr_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery.MEASR_NAME, measr_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery.FACTR, measr_last_period.FACTR) AS FACTR,\\n                                   NVL2(measr_delivery.EXTRN_MEASR_ID, 'N', 'Y') AS MISSING_IND,\\n                                   NVL2(measr_last_period.EXTRN_MEASR_ID, 'N', NVL2(measr_last_period.MEASR_ID, 'N', 'Y')) AS NEW_IND\\n         FROM   measr_delivery\\n                FULL OUTER JOIN measr_last_period\\n                             ON measr_delivery.EXTRN_MEASR_ID = measr_last_period.EXTRN_MEASR_ID\\n                                OR (measr_last_period.EXTRN_MEASR_ID IS NULL AND measr_delivery.MEASR_ID = measr_last_period.MEASR_ID)),\\n\\n     measr_delivery_vs_all_cases\\n     AS (SELECT /*+ materialize */ COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_ID, measr_delivery_vs_last_period.EXTRN_MEASR_ID) AS EXTRN_MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.EXTRN_MEASR_NAME, measr_delivery_vs_last_period.EXTRN_MEASR_NAME) AS EXTRN_MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_ID, measr_delivery_vs_last_period.MEASR_ID) AS MEASR_ID,\\n                                   COALESCE(measr_delivery_vs_last_run.MEASR_NAME, measr_delivery_vs_last_period.MEASR_NAME) AS MEASR_NAME,\\n                                   COALESCE(measr_delivery_vs_last_run.FACTR, measr_delivery_vs_last_period.FACTR) AS FACTR,\\n                                   measr_delivery_vs_last_run.MISSING_IND AS LAST_RUN_MISSING_IND,\\n                                   measr_delivery_vs_last_run.NEW_IND AS LAST_RUN_NEW_IND,\\n                                   measr_delivery_vs_last_period.MISSING_IND AS LAST_PERIOD_MISSING_IND,\\n                                   measr_delivery_vs_last_period.NEW_IND AS LAST_PERIOD_NEW_IND\\n         FROM   measr_delivery_vs_last_run\\n                FULL OUTER JOIN measr_delivery_vs_last_period\\n                             ON measr_delivery_vs_last_run.EXTRN_MEASR_ID = measr_delivery_vs_last_period.EXTRN_MEASR_ID),\\n\\n     ret\\n     AS (SELECT tmp.MEASR_ID,\\n                tmp.MEASR_NAME,\\n                tmp.EXTRN_MEASR_ID,\\n                tmp.EXTRN_MEASR_NAME,\\n                LAST_RUN_STATUS,\\n                LAST_PERIOD_STATUS,\\n                MULTIPLICATOR,\\n                ROW_NUMBER()\\n                  OVER (\\n                    PARTITION BY LAST_RUN_STATUS\\n                    ORDER BY tmp.EXTRN_MEASR_NAME)\\n                AS RANK_NUMBER\\n         FROM   (SELECT\\n                        --COALESCE(measr_delivery.EXTRN_MEASR_ID, measr_delivery_vs_all_cases.EXTRN_MEASR_ID)\\n                        COALESCE(measr_delivery_vs_all_cases.EXTRN_MEASR_ID, measr_delivery.EXTRN_MEASR_ID) -- LGrigorovicius (20210723) : order changed so previously processed measures tags would be visible in validation report\\n\\n                        AS EXTRN_MEASR_ID,\\n                        COALESCE(measr_delivery.EXTRN_MEASR_NAME, measr_delivery_vs_all_cases.EXTRN_MEASR_NAME)\\n\\n                        AS EXTRN_MEASR_NAME,\\n                        COALESCE(measr_delivery.MEASR_ID, measr_delivery_vs_all_cases.MEASR_ID)\\n\\n                        AS MEASR_ID,\\n                        COALESCE(measr_delivery.MEASR_NAME, measr_delivery_vs_all_cases.MEASR_NAME)\\n\\n                        AS MEASR_NAME,\\n                        COALESCE(measr_delivery.FACTR, measr_delivery_vs_all_cases.FACTR)\\n\\n                        AS MULTIPLICATOR,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_RUN_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_RUN_STATUS,\\n                        CASE\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND = 'Y' THEN 'MISSING'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_NEW_IND = 'Y' THEN 'NEW'\\n                          WHEN measr_delivery_vs_all_cases.LAST_PERIOD_MISSING_IND IS NULL THEN 'MISSING'\\n                          ELSE 'CONTINUE'\\n                        END\\n                        AS LAST_PERIOD_STATUS\\n                 FROM   measr_delivery\\n                        FULL OUTER JOIN measr_delivery_vs_all_cases\\n                                     ON measr_delivery.MEASR_ID = measr_delivery_vs_all_cases.MEASR_ID) tmp)\\n\\nSELECT -- ROWNUM AS LINE_NUMBER,\\n('Missing/delivered measures') as DQ,\\n       MEASR_ID MEASR_ID,\\n       MEASR_NAME MEASR_NAME,\\n       EXTRN_MEASR_ID EXTRN_MEASR_ID,\\n       EXTRN_MEASR_NAME EXTRN_MEASR_NAME,\\n       MULTIPLICATOR MULTIPLICATOR,\\n       LAST_RUN_STATUS LAST_RUN_STATUS,\\n       LAST_PERIOD_STATUS LAST_PERIOD_STATUS\\nFROM   (SELECT MEASR_ID,\\n               MEASR_NAME,\\n               EXTRN_MEASR_ID,\\n               EXTRN_MEASR_NAME,\\n               MULTIPLICATOR,\\n               LAST_RUN_STATUS,\\n               LAST_PERIOD_STATUS\\n        FROM   ret\\n        WHERE  RANK_NUMBER < 1000\\n        ORDER  BY\\n                  CASE\\n                    WHEN LAST_RUN_STATUS = 'MISSING' OR LAST_PERIOD_STATUS = 'MISSING' THEN 1\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 2\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'NEW' THEN 3\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE | MISSING VALUES' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 4\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 5\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE | MISSING VALUES' THEN 6\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'NEW' THEN 7\\n                    WHEN LAST_RUN_STATUS = 'NEW' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 8\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'NEW' THEN 9\\n                    WHEN LAST_RUN_STATUS = 'CONTINUE' AND LAST_PERIOD_STATUS = 'CONTINUE' THEN 10\\n                    ELSE 11\\n                  END,\\n                  RANK_NUMBER)\\n\\\"\\\"\\\"\\ntier1_miss_dlvrd_measr = spark.sql(query17)\\n\\n# Combine\\nfrom pyspark.sql.functions import lit, row_number, monotonically_increasing_id, col, when\\nfrom pyspark.sql.window import Window\\nfrom pyspark.sql.types import *\\n\\ncolumns = StructType([StructField('row_id', IntegerType(), True)])\\ndf_empty = spark.createDataFrame(data=[], schema=columns)\\n\\ndq1 = df_unk_msr\\ndq2 = df_dup_msr_af_map\\ndq3 = df_no_data_measr\\ndq4 = prod_attr_unk\\ndq6 = fact_time_perd_miss\\ndq7 = fact_mkt_miss\\ndq9 = df_time_period_wks_nt_gen\\ndq10 = df_dup_time_period_aftr_mapng\\ndq11 = df_msng_delv_areas\\ndq12 = tier1_time_perd_id_map_unk\\ndq13 = tier1_mkt_id_map_unk\\ndq14 = tier1_mkt_map_dup\\ndq16 = tier1_miss_dlvrd_hier\\ndq17 = tier1_miss_dlvrd_measr\\n\\ndf_combine = dq1.unionByName(dq2, True).unionByName(dq3, True).unionByName(dq4, True).unionByName(dq6, True).unionByName(dq7, True).unionByName(dq9, True).unionByName(dq10, True).unionByName(dq11, True).unionByName(dq12, True).unionByName(dq13, True).unionByName(dq14, True).unionByName(dq16, True).unionByName(dq17, True)\\n\\n#Report Generation\\n\\nimport subprocess\\nimport os\\nimport shutil\\nimport subprocess\\nimport sys\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\nimport pandas as pd\\nsubprocess.check_call([sys.executable,\\\"-m\\\",\\\"pip\\\",\\\"install\\\",\\\"xlsxwriter\\\"])\\nsubprocess.check_call([sys.executable,\\\"-m\\\",\\\"pip\\\",\\\"install\\\",\\\"openpyxl\\\"])\\nimport xlsxwriter\\nimport openpyxl\\n\\nrun_id = <<PROCESS_RUN_KEY>>\\nrpt_path = '<@@PATH1@@>'\\n\\nwriter = pd.ExcelWriter(f'tp_dvm_rprt_{run_id}.xlsx', engine='xlsxwriter')\\n\\n# Prepare KPI\\ndata = []\\n\\ndq_ref_val = ('Reference Data Validations','','')\\ndata.append(dq_ref_val)\\n\\nif dq1.count()==0:\\n  dq_val=('Unknown measure', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Unknown measure', 'FAILED', '=HYPERLINK(\\\"#REF_VAL1!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\nif dq2.count()==0:\\n  dq_val=('Duplicated measure after mapping', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Duplicated measure after mapping', 'FAILED', '=HYPERLINK(\\\"#REF_VAL2!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\nif df_val3_res.filter(\\\"result = 'FAILED'  \\\").count()==0:\\n  dq_val=('No data- NA or zero in every input row, for measure', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('No data- NA or zero in every input row, for measure', 'FAILED', '=HYPERLINK(\\\"#REF_VAL3!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq4.count()==0:\\n  dq_val=('Unknown attribute value for product', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Unknown attribute value for product', 'FAILED', '=HYPERLINK(\\\"#REF_VAL4!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n  \\nif dq6.count()==0:\\n  dq_val=('No data: N/A or zero in every input row, for time period', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('No data: N/A or zero in every input row, for time period', 'FAILED', '=HYPERLINK(\\\"#REF_VAL6!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq7.count()==0:\\n  dq_val=('No data: N/A or zero in every input row, for market', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('No data: N/A or zero in every input row, for market', 'FAILED', '=HYPERLINK(\\\"#REF_VAL7!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq9.count()==0:\\n  dq_val=('Time period of weeks not properly generated', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Time period of weeks not properly generated', 'FAILED', '=HYPERLINK(\\\"#REF_VAL8!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\nif dq10.count()==0:\\n  dq_val=('Duplicated time period after mapping', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Duplicated time period after mapping', 'FAILED', '=HYPERLINK(\\\"#REF_VAL9!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq11.filter(\\\" LAST_RUN_STATUS like '%MISSING%' \\\").count()==0:\\n  dq_val=('Missing/delivered areas', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Missing/delivered areas', 'FAILED', '=HYPERLINK(\\\"#REF_VAL10!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n  \\nif dq12.count()==0:\\n  dq_val=('Unknown time period', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Unknown time period', 'FAILED', '=HYPERLINK(\\\"#REF_VAL11!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n  \\nif dq13.count()==0:\\n  dq_val=('Unknown market', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Unknown market', 'FAILED', '=HYPERLINK(\\\"#REF_VAL12!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq14.count()==0:\\n  dq_val=('Duplicated market after mapping', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Duplicated market after mapping', 'FAILED', '=HYPERLINK(\\\"#REF_VAL13!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq16.filter(\\\"LAST_RUN_STATUS like '%MISSING%' or LAST_PERIOD_STATUS like '%MISSING%' \\\").count()==0:\\n  dq_val=('Missing/delivered hierarchies', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Missing/delivered hierarchies', 'FAILED', '=HYPERLINK(\\\"#REF_VAL14!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq17.filter(\\\"LAST_RUN_STATUS like '%MISSING%' or LAST_PERIOD_STATUS like '%MISSING%' \\\").count()==0:\\n  dq_val=('Missing/delivered measures', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Missing/delivered measures', 'FAILED', '=HYPERLINK(\\\"#REF_VAL15!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\n#Prepare Summary Report dataframe\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\nschema_for_kpi = StructType([ \\n    StructField(\\\"Validation\\\",StringType(),True),\\n    StructField(\\\"Result\\\",StringType(),True),\\n    StructField(\\\"Details\\\",StringType(),True)\\n  ])\\n  \\ndf_ref_summary = spark.createDataFrame(data, schema_for_kpi)\\ndf_ref_summary = df_ref_summary.orderBy('Result')\\nsummary = df_file_struct_summary.unionByName(df_ref_vendors_summary, True).unionByName(df_fyi_summary, True).unionByName(df_ref_summary, True)\\n\\nSUMMARY = summary.toPandas()\\nSUMMARY.to_excel(writer,sheet_name=\\\"SUMMARY\\\",index=False)\\n\\n# Creation of other tabs\\n\\nlst_dfs = [dq1, dq2, dq3, dq4, dq6, dq7,  dq9, dq10, dq11, dq12, dq13, dq14, dq16, dq17]\\nc = 1\\nfor i in lst_dfs:\\n  if i.count()>0:\\n    i = i.toPandas()\\n    i.to_excel(writer,sheet_name=f\\\"REF_VAL{c}\\\",index=False)\\n  c= c+1\\n\\n# Close Excel Report and Save\\nwriter.close()\\n\\nfiles = [f for f in os.listdir('.') if os.path.isfile(f)]\\nfor f in files:\\n  if f==f'tp_dvm_rprt_{run_id}.xlsx':\\n    shutil.copyfile(f, f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}.xlsx')\\n\\n# Read and combine the report\\nwriter = pd.ExcelWriter(f'tp_dvm_rprt_{run_id}_summary.xlsx', engine='xlsxwriter')\\n\\ndf_file_struct_summary = df_file_struct_summary.orderBy('Result')\\ndf_ref_vendors_summary = df_ref_vendors_summary.orderBy('Result')\\ndf_fyi_summary = df_fyi_summary.orderBy('Result')\\ndf_ref_summary = df_ref_summary.orderBy('Result')\\nsummary = df_file_struct_summary.unionByName(df_ref_vendors_summary, True).unionByName(df_fyi_summary, True).unionByName(df_ref_summary, True)\\n\\nSUMMARY = summary.toPandas()\\nSUMMARY.to_excel(writer,sheet_name=\\\"SUMMARY\\\",index=False)\\n\\n#Read Summary Report\\ndf_rpt_summary = pd.read_excel(f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}_summary.xlsx', sheet_name=None)\\n\\nfor key, value in df_rpt_summary.items():\\n  if (key!='SUMMARY'):\\n    df_i = df_rpt_summary[key]\\n    df_i.to_excel(writer,sheet_name=f\\\"{key}\\\",index=False)\\n\\n#Read Current report\\ndf_rpt_curr = pd.read_excel(f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}.xlsx', sheet_name=None)\\n\\nfor key, value in df_rpt_curr.items():\\n  if (key!='SUMMARY'):\\n    df_i = df_rpt_curr[key]\\n    df_i.to_excel(writer,sheet_name=f\\\"{key}\\\",index=False)\\n\\nwriter.close()\\n\\nfiles = [f for f in os.listdir('.') if os.path.isfile(f)]\\nfor f in files:\\n  if f==f'tp_dvm_rprt_{run_id}_summary.xlsx':\\n    shutil.move(f, f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}_summary.xlsx')\\n\\ndict_all_dfs['df_ref_summary'] = {\\\"df_object\\\" :df_ref_summary}\\ndf_output_dict['df_ref_summary'] = df_ref_summary\\n\\ndict_all_dfs['df_combine_ref'] = {\\\"df_object\\\" :df_combine}\\ndf_output_dict['df_combine_ref'] = df_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"tier1_measr_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_dvm_100_measr\"\n    },\n    {\n      \"name\": \"tier1_prod_gav\"\n    },\n    {\n      \"name\": \"tier1_time_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_conv\"\n    },\n    {\n      \"name\": \"tier1_mkt_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_measr_map_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fact_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_fct_mtrlz_tbl2\"\n    },\n    {\n      \"name\": \"tier1_prod_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"df_file_struct_summary\"\n    },\n    {\n      \"name\": \"df_ref_vendors_summary\"\n    },\n    {\n      \"name\": \"df_fyi_summary\"\n    },\n    {\n      \"name\": \"df_fact\"\n    },\n    {\n      \"name\": \"df_mm_mkt_skid_cntrt_lkp_vw\"\n    },\n    {\n      \"name\": \"df_mm_time_perd_fdim\"\n    },\n    {\n      \"name\": \"df_mm_time_perd_assoc_type\"\n    },\n    {\n      \"name\": \"df_mm_time_perd_assoc\"\n    },\n    {\n      \"name\": \"df_mm_run_time_perd_plc\"\n    },\n    {\n      \"name\": \"df_mm_mkt_xref\"\n    },\n    {\n      \"name\": \"df_mm_mkt_dim\"\n    },\n    {\n      \"name\": \"df_mm_run_time_perd_plc1\"\n    },\n    {\n      \"name\": \"df_time_perd_sdads\"\n    },\n    {\n      \"name\": \"df_mm_run_prod_plc\"\n    },\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    },\n    {\n      \"name\": \"df_mm_prod_dim\"\n    },\n    {\n      \"name\": \"df_mm_run_prttn_plc\"\n    },\n    {\n      \"name\": \"df_mm_run_measr_plc\"\n    },\n    {\n      \"name\": \"df_mm_run_mkt_plc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_ref_summary\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_combine_ref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Reference Data Checks Eligible KPIs",
      "predecessorName": "Reference Data - Validations and Report Generation",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"format\": \"csv\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"path\": \"bf/unrefined/adw-reference-bf/KPI/<<PROCESS_RUN_KEY>>_refdata.csv\",\n  \"mode\": \"overwrite\",\n  \"compression\": \"None\",\n  \"coalesceByNumber\": 1,\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_ref\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "Update delivery details - pre command",
      "predecessorName": "Reference Data Checks Eligible KPIs",
      "jsonSpecification": "{\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\n\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\nrows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 3, 1, 4, <<PROCESS_RUN_KEY>>]]\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.MM_DLVRY_RUN_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").mode(\\\"append\\\").save()\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Mail Sender",
      "predecessorName": "Update delivery details - pre command",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nfrom pyspark.sql.functions import *\\n\\n# Run information from Postgres\\nrun_id = <<PROCESS_RUN_KEY>>\\n\\n\\n\\n# mm_process_run_lkp_vw\\nmm_process_run_lkp_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/ f\\\"select * from adwgp_mm.mm_process_run_lkp_vw where run_id = {run_id}\\\")\\nmm_process_run_lkp_vw.createOrReplaceTempView('mm_process_run_lkp_vw')\\n\\nmm_process_run_lkp_vw = mm_process_run_lkp_vw.select('file_name', 'start_date_time')\\nrun_info = mm_process_run_lkp_vw.collect()\\n\\n\\n#Mail Sender\\n\\nimport smtplib\\nfrom email.mime.text import MIMEText\\nfrom email.mime.multipart import MIMEMultipart\\nfrom email.mime.base import MIMEBase\\nfrom email import encoders\\n# Setup port number and server name\\n\\nsmtp_port = 587                 # Standard secure SMTP port\\nsmtp_server = \\\"smtp.office365.com\\\"  # Google SMTP Server\\n\\ncontacts = '<<CONTACTS>>'\\n#lst_of_contacts = [i.strip() for i in contacts.split(\\\";\\\")]\\n#lst_of_contacts = [\\\"michalska.mb@pg.com\\\", \\\"ulbrych.b@pg.com\\\"]\\nlst_of_contacts = []\\n\\n# Set up the email lists\\nemail_from = \\\"cpnotification.im@pg.com\\\"\\n\\n#email_list = [\\\"Gopi.C@lntinfotech.com\\\", \\\"jagdish.sahu@lntinfotech.com\\\", \\\"poltoratskyi.i@pg.com\\\"]\\nemail_list = [\\\"Gopi.C@lntinfotech.com\\\"]\\n\\nfor c in lst_of_contacts:\\n  email_list.append(c)\\n\\npswd = dbutils.secrets.get('tp_dpf2cdl', 'cpnotification-password')\\n\\nrun_id = <<PROCESS_RUN_KEY>>\\nfile_name = run_info[0]['file_name']\\nfile_timestamp= run_info[0]['start_date_time']\\nreport_name = f\\\"tp_dvm_rprt_{run_id}_summary.xlsx\\\"\\nrpt_path = '<@@PATH1@@>/tp_dvm_rpt/'\\n\\n# name the email subject\\nsubject = f\\\"TP Reference Data DVM Validation Report for run {run_id}\\\"\\n\\n# Define the email function (dont call it email!)\\ndef send_emails(email_list):\\n\\n    for person in email_list:\\n\\n        # Make the body of the email\\n        body = f\\\"\\\"\\\"\\n\\nValidation summary:\\n\\nSource File Name: {file_name} \\n\\\\nRun id: {run_id} \\n\\nPlease find the attachments for detailed validation report\\n\\nRegards,\\nTradepanel Team    \\n        \\\"\\\"\\\"\\n        print(body)\\n        # make a MIME object to define parts of the email\\n        msg = MIMEMultipart()\\n        msg['From'] = email_from\\n        msg['To'] = person\\n        msg['Subject'] = subject\\n\\n        # Attach the body of the message\\n        msg.attach(MIMEText(body, 'plain'))\\n\\n        # Define the file to attach\\n        filename_path = f\\\"/dbfs/mnt/{rpt_path}/tp_dvm_rprt_{run_id}_summary.xlsx\\\"\\n\\n        # Open the file in python as a binary\\n        attachment= open(filename_path, 'rb')  # r for read and b for binary\\n\\n        # Encode as base 64\\n        attachment_package = MIMEBase('application', 'octet-stream')\\n        attachment_package.set_payload((attachment).read())\\n        encoders.encode_base64(attachment_package)\\n        attachment_package.add_header('Content-Disposition', \\\"attachment; filename= \\\" + report_name)\\n        msg.attach(attachment_package)\\n\\n        # Cast as string\\n        text = msg.as_string()\\n\\n        # Connect with the server\\n        print(\\\"Connecting to server...\\\")\\n        TIE_server = smtplib.SMTP(smtp_server, smtp_port)\\n        TIE_server.starttls()\\n        TIE_server.login(email_from, pswd)\\n        print(\\\"Succesfully connected to server\\\")\\n        print()\\n\\n\\n        # Send emails to \\\"person\\\" as list is iterated\\n        print(f\\\"Sending email to: {person}...\\\")\\n        TIE_server.sendmail(email_from, person, text)\\n        print(f\\\"Email sent to: {person}\\\")\\n        print()\\n\\n    # Close the port\\n    TIE_server.quit()\\n\\n\\n# Run the function\\nsend_emails(email_list)\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_ref_summary\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_ref_summary\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Reference Data Vendors - DQ Check",
      "predecessorName": "Mail Sender",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"documentation\": \"https://jira-pg-ds.atlassian.net/wiki/spaces/CDLBOK/pages/3676897284/Turbine+DQ+Operations\",\n  \"inputType\": \"Input using uploaded file\",\n  \"path\": \"bf/unrefined/adw-reference-bf/KPI/<<PROCESS_RUN_KEY>>_refdata.csv\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_combine_ref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_combine_ref_chk\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "DataQualityValidation",
      "overridableIndicator": false
    },
    {
      "operationName": "Update Delivery Details - Post command",
      "predecessorName": "Reference Data Vendors - DQ Check",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf = dict_all_dfs['df_ref_summary'][\\\"df_object\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\n\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\n\\ncnt = df.filter(\\\"Result = 'FAILED'  \\\").count()\\n\\nif (cnt>0):\\n  rows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 11, 1, 4, <<PROCESS_RUN_KEY>>]]\\n  columns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\n  jdbcDF2 = spark_session.createDataFrame(rows, columns)\\n  jdbcDF2.write.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.MM_DLVRY_RUN_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").mode(\\\"append\\\").save()\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_ref_summary\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_ref_summary\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Operation to add Milestone",
      "predecessorName": "Update Delivery Details - Post command",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"true\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_combine_ref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_combine_ref\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "acquire turbine_run_del_plc",
      "predecessorName": "Operation to add Milestone",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"acquire\",\n  \"semaphoreOption\": \"exclusive\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>/turbine_run_del_plc/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Determind Stop calc indicator",
      "predecessorName": "acquire turbine_run_del_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import col, lit, when\\n\\ndf_combine_ref = dict_all_dfs['df_ref_summary'][\\\"df_object\\\"]\\nref_data_fails = df_combine_ref.filter(\\\"Result = 'FAILED'  \\\").count()\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\ndf = spark.read.format('delta').load('/mnt/<@@PATH1@@>/turbine_run_del_plc/')\\ncnt = df.filter('run_id = <<PROCESS_RUN_KEY>>').count()\\n\\nrows = [[ <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, cnt]]\\ncolumns = ['cntrt_id', 'run_id', 'count']\\ndf_run_count = spark_session.createDataFrame(rows, columns)\\n\\n# current status\\ncurr_stat = spark.sql(\\\"\\\"\\\" select max(count) from delta.`/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/turbine_run_del_plc/`\\nwhere\\nrun_id=<<PROCESS_RUN_KEY>>\\\"\\\"\\\").collect()[0][0]\\n\\n\\nif cnt ==0:\\n  df_run_count.write.format('delta').mode('append').save('/mnt/<@@PATH1@@>/turbine_run_del_plc/')\\nelif curr_stat==0:\\n  spark.sql(f\\\"\\\"\\\" update delta.`/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/turbine_run_del_plc/`\\n  set count = 1\\n  where\\n  run_id = <<PROCESS_RUN_KEY>>\\\"\\\"\\\")\\n  curr_stat = 1\\nelse:\\n  spark.sql(f\\\"\\\"\\\" update delta.`/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/turbine_run_del_plc/`\\n  set count = 0\\n  where\\n  run_id = <<PROCESS_RUN_KEY>>\\\"\\\"\\\")\\n  curr_stat = 0\\n\\n# Determine Stop Calc Indicator\\n\\ncntrt_id = <<CNTRT_ID>>\\nif ref_data_fails == 0:\\n  apprv_ind = 'Y'\\nelif ((ref_data_fails>0) & (cnt ==0)):\\n  apprv_ind = 'N'\\nelif ((ref_data_fails>0) & (curr_stat ==0)):\\n  apprv_ind = 'N'\\nelse:\\n  apprv_ind = 'Y'\\n\\ndata = [(cntrt_id, apprv_ind)]\\nsch = ['cntrt_id', 'apprv_ind']\\n \\ndf_apprv_ind = spark.createDataFrame(data, sch)\\n\\ndict_all_dfs['df_apprv_ind'] = {\\\"df_object\\\" :df_apprv_ind}\\ndf_output_dict['df_apprv_ind'] = df_apprv_ind\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_ref_summary\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_apprv_ind\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "release turbine_run_del_plc",
      "predecessorName": "Determind Stop calc indicator",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>/turbine_run_del_plc/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Stop Calculations if Reference data validation fails",
      "predecessorName": "release turbine_run_del_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"apprv_ind = 'N'\",\n  \"processStatus\": \"DQ_ISSUE\",\n  \"conditionValue\": \"true\",\n  \"milestone\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_apprv_ind\"\n    }\n  ]\n}",
      "operationVersionName": "ConditionalStop",
      "overridableIndicator": false
    },
    {
      "operationName": "Update Approval Status",
      "predecessorName": "Stop Calculations if Reference data validation fails",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import col, lit, when\\n\\nspark.sql(f\\\"\\\"\\\" update delta.`/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/turbine_run_del_plc/`\\n  set count = 0\\n  where\\n  run_id = <<PROCESS_RUN_KEY>>\\\"\\\"\\\")\\n\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_apprv_ind\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_apprv_ind\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Report Generation",
      "predecessorName": "Update Approval Status",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"documentation\": \"https://jira-pg-ds.atlassian.net/wiki/spaces/CDLBOK/pages/3676897284/Turbine+DQ+Operations\",\n  \"saveToCSV\": \"true\",\n  \"generateHTMLReport\": \"true\",\n  \"generatePDFReport\": \"false\",\n  \"includeDetailedValidationResults\": \"failed rows only\",\n  \"numberOfRowsToDisplay\": 100,\n  \"reportTemplate\": \"default\"\n}",
      "operationVersionName": "DataQualityReport",
      "overridableIndicator": false
    }
  ],
  "graphName": "t1_dq_ref_data"
}