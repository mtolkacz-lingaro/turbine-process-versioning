{
  "applicationName": "TURBINE_INTERNAL",
  "jsonSpecification": "{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \"T1 Integrated TP Main Chain\",\r\n    \"description\": \"T1 Integrated TP Main Chain\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n\t\t\"FACT_TYPE_CODE\": {\r\n            \"title\": \"FACT_TYPE_CODE\",\r\n            \"description\": \"FACT_TYPE_CODE\",\r\n\t\t\t\"enum\": [\r\n                \"HHP\",\r\n                \"SF\",\r\n\t\t\t\t\"TP\"\r\n            ],\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CATEGORY_ID\": {\r\n            \"title\": \"CATEGORY_ID\",\r\n            \"description\": \"CATEGORY_ID\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"SRCE_SYS_ID\": {\r\n            \"title\": \"SRCE_SYS_ID\",\r\n            \"description\": \"SRCE_SYS_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n        \"IGRTD_PUBLISH_FILE_PATTERN\": {\r\n            \"title\": \"IGRTD_PUBLISH_FILE_PATTERN\",\r\n            \"description\": \"File pattern to create a file from atomic contract that will trigger integrated layer publishing\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"CNTRT_ID\": {\r\n            \"title\": \"CNTRT_ID\",\r\n            \"description\": \"CNTRT_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n        \"RAW_FILE_PATH\": {\r\n            \"title\": \"RAW_FILE_PATH\",\r\n            \"description\": \"Raw File Path\",\r\n            \"default\": \"turbinev1/WORK/\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"PUBLISH_PATH\": {\r\n            \"title\": \"PUBLISH_PATH\",\r\n            \"description\": \"Publishing Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf\",\r\n            \"type\": \"string\"\r\n        }, \r\n         \"IN_FILE_PATH\": {\r\n            \"title\": \"IN_FILE_PATH\",\r\n            \"description\": \"Input File Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf\",\r\n            \"type\": \"string\"\r\n        }, \r\n         \"MAPPINGS_PATH\": {\r\n            \"title\": \"MAPPINGS_PATH\",\r\n            \"description\": \"Mappings Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf/\",\r\n            \"type\": \"string\"\r\n        }\r\n   },\r\n    \"required\": [],\r\n    \"configurable\": [\"FACT_TYPE_CODE\",\"CATEGORY_ID\", \"SRCE_SYS_ID\", \"IGRTD_PUBLISH_FILE_PATTERN\", \"CNTRT_ID\"]\r\n}",
  "nodes": [
    {
      "operationName": "[File Load] MM_PROD_DIM2IDIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_DIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_dim2idim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[sem] release MM_PROD_DIM2IDIM_VW",
      "predecessorName": "[File Load] MM_PROD_DIM2IDIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_DIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN] DIM2IDIM column transformations",
      "predecessorName": "[sem] release MM_PROD_DIM2IDIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\ndf_mm_prod_dim2idim = dict_all_dfs['df_mm_prod_dim2idim'][\\\"df_object\\\"]\\n\\ndf_mm_prod_dim2idim.createOrReplaceTempView('mm_prod_dim')\\n\\nquery = f\\\"\\\"\\\" select\\n    pkg_featr_tm_txt as pkg_featr_tm,\\n    pkg_genl_shape_txt as pkg_genl_shape,\\n    pkg_mfg_prcss_txt as pkg_mfg_prcss,\\n    pkg_matl_sbtnc_txt as pkg_matl_sbtnc,\\n    pkg_prstn_optn_txt as pkg_prstn_optn,\\n    pkg_prmtn_txt as pkg_prmtn,\\n    pkg_qty_txt as pkg_qty,\\n    pkg_trgt_use_txt as pkg_trgt_use,\\n    pkg_top_openg_txt as pkg_top_openg,\\n    pkg_type_txt as pkg_type,\\n    paper_ply_txt as paper_ply,\\n    ply_txt as ply,\\n    ptpri_item_txt as ptpri_item,\\n    pwr_txt as pwr,\\n    pwr_claim_txt as pwr_claim,\\n    pwr_sfty_featr_txt as pwr_sfty_featr,\\n    pwr_seg_txt as pwr_seg,\\n    pwr_srce_txt as pwr_srce,\\n    pwr_sub_seg_txt as pwr_sub_seg,\\n    prepn_methd_txt as prepn_methd,\\n    prstn_txt as prstn,\\n    prstv_prsnc_claim_txt as prstv_prsnc_claim,\\n    price_factr_txt as price_factr,\\n    price_seg_txt as price_seg,\\n    price_tier_txt as price_tier,\\n    primy_md_txt as primy_md,\\n    priv_label_txt as priv_label,\\n    prod_txt as prod,\\n    prod_1_txt as prod_1,\\n    prod_2_txt as prod_2,\\n    prod_3_txt as prod_3,\\n    prod_4_txt as prod_4,\\n    prod_5_txt as prod_5,\\n    prod_6_txt as prod_6,\\n    prod_7_txt as prod_7,\\n    prod_8_txt as prod_8,\\n    prod_9_txt as prod_9,\\n    prod_claim_txt as prod_claim,\\n    prod_image_age_grp_txt as prod_image_age_grp,\\n    prod_image_gendr_age_grp_txt as prod_image_gendr_age_grp,\\n    prod_size_txt as prod_size,\\n    prod_size_1_txt as prod_size_1,\\n    prod_size_2_txt as prod_size_2,\\n    prod_size_3_txt as prod_size_3,\\n    prod_size_4_txt as prod_size_4,\\n    prod_size_5_txt as prod_size_5,\\n    prod_size_6_txt as prod_size_6,\\n    prod_size_7_txt as prod_size_7,\\n    prod_size_8_txt as prod_size_8,\\n    prod_size_9_txt as prod_size_9,\\n    prmtn_txt as prmtn,\\n    prmtn_type_txt as prmtn_type,\\n    protn_prsnc_claim_txt as protn_prsnc_claim,\\n    rng_txt as rng,\\n    rchrg_time_txt as rchrg_time,\\n    ref_txt as ref,\\n    refl_type_txt as refl_type,\\n    rbu_txt as rbu,\\n    reslt_readt_txt as reslt_readt,\\n    reuse_txt as reuse,\\n    rinse_txt as rinse,\\n    roll_lngth_txt as roll_lngth,\\n    roll_life_txt as roll_life,\\n    scent_txt as scent,\\n    scent_1_txt as scent_1,\\n    scnd_benft_txt as scnd_benft,\\n    seg_txt as seg,\\n    srvng_per_cntnr_txt as srvng_per_cntnr,\\n    shade_txt as shade,\\n    shavr_featr_txt as shavr_featr,\\n    shvng_sys_txt as shvng_sys,\\n    sheet_cnt_txt as sheet_cnt,\\n    sheet_dmnsn_lngth_txt as sheet_dmnsn_lngth,\\n    sheet_dmnsn_width_txt as sheet_dmnsn_width,\\n    short_prod_desc_txt as short_prod_desc,\\n    size_txt as size_desc,\\n    size_absrp_txt as size_absrp,\\n    size_rng_txt as size_rng,\\n    size_varnt_txt as size_varnt,\\n    skin_coat_claim_txt as skin_coat_claim,\\n    skin_type_txt as skin_type,\\n    speed_txt as speed,\\n    spray_featr_txt as spray_featr,\\n    su_factr_txt as su_factr,\\n    strgc_ingr_prsnc_claim_txt as strgc_ingr_prsnc_claim,\\n    strth_txt as strth,\\n    strth_claim_txt as strth_claim,\\n    style_txt as style,\\n    stain_fight_txt as stain_fight,\\n    sub_brand_txt as sub_brand,\\n    sub_categ_txt as sub_categ,\\n    sub_prtct_factr_txt as sub_prtct_factr,\\n    sub_seg_txt as sub_seg,\\n    sub_type_txt as sub_type,\\n    suctn_clean_claim_txt as suctn_clean_claim,\\n    suds_txt as suds,\\n    splmt_fact_srvng_hshld_txt as splmt_fact_srvng_hshld,\\n    splmt_fact_srvng_mtrc_txt as splmt_fact_srvng_mtrc,\\n    splmt_fact_srvng_per_cntnr_txt as splmt_fact_srvng_per_cntnr,\\n    splmt_type_txt as splmt_type,\\n    surfc_ht_featr_txt as surfc_ht_featr,\\n    swtnr_txt as swtnr,\\n    swtnr_prsnc_claim_txt as swtnr_prsnc_claim,\\n    swtnr_type_txt as swtnr_type,\\n    syntd_commn_cnsmr_name_txt as syntd_commn_cnsmr_name,\\n    trgt_anmal_txt as trgt_anmal,\\n    trgt_anmal_naked_prod_size_txt as trgt_anmal_naked_prod_size,\\n    trgt_aplnc_txt as trgt_aplnc,\\n    trgt_grp_txt as trgt_grp,\\n    trgt_grp_age_txt as trgt_grp_age,\\n    trgt_grp_cond_txt as trgt_grp_cond,\\n    trgt_grp_cond_claim_txt as trgt_grp_cond_claim,\\n    trgt_grp_gendr_txt as trgt_grp_gendr,\\n    trgt_mdctn_grp_txt as trgt_mdctn_grp,\\n    trgt_skin_cond_txt as trgt_skin_cond,\\n    trgt_use_txt as trgt_use,\\n    trgt_user_txt as trgt_user,\\n    tartr_prsnc_claim_txt as tartr_prsnc_claim,\\n    test_reslt_durtn_txt as test_reslt_durtn,\\n    thkns_txt as thkns,\\n    tier_txt as tier,\\n    timer_ctrl_txt as timer_ctrl,\\n    thpst_comp_size_txt as thpst_comp_size,\\n    top_sheet_txt as top_sheet,\\n    tot_brand_txt as tot_brand,\\n    tot_bus_txt as tot_bus,\\n    tune_titl_txt as tune_titl,\\n    tune_titl_artst_txt as tune_titl_artst,\\n    type_txt as type,\\n    type_1_txt as type_1,\\n    type_2_txt as type_2,\\n    type_3_txt as type_3,\\n    unit_txt as unit,\\n    uom_txt as uom,\\n    usda_orgnc_seal_txt as usda_orgnc_seal,\\n    upc_txt as upc,\\n    upc_detl_txt as upc_detl,\\n    usage_amt_txt as usage_amt,\\n    use_txt as use,\\n    use_as_refl_ind_txt as use_as_refl_ind,\\n    vacum_carpt_clnr_txt as vacum_carpt_clnr,\\n    vagnl_yeast_trmnt_durtn_txt as vagnl_yeast_trmnt_durtn,\\n    val_add_txt as val_add,\\n    varnt_txt as varnt,\\n    vty_txt as vty,\\n    vers_txt as vers,\\n    vitmn_txt as vitmn,\\n    vitmn_prsnc_claim_txt as vitmn_prsnc_claim,\\n    vitmn_type_txt as vitmn_type,\\n    voltg_txt as voltg,\\n    wshld_cnt_txt as wshld_cnt,\\n    wght_txt as wght,\\n    wght_grwth_claim_txt as wght_grwth_claim,\\n    wetns_prot_claim_txt as wetns_prot_claim,\\n    white_uv_txt as white_uv,\\n    wick_cnt_txt as wick_cnt,\\n    wing_txt as wing,\\n    wood_color_txt as wood_color,\\n    yield_txt as yield,\\n    pg_wattg as pg_wattg,\\n    pg_wet_dry as pg_wet_dry,\\n    pg_wing_color_grp as pg_wing_color_grp,\\n    absbc_txt as absbc,\\n    absbc_wetns_comp_featr_txt as absbc_wetns_comp_featr,\\n    acsry_txt as acsry,\\n    age_txt as age,\\n    aim_methd_txt as aim_methd,\\n    etoh_prsnc_claim_txt as etoh_prsnc_claim,\\n    anmal_txt as anmal,\\n    anmal_size_txt as anmal_size,\\n    antpr_txt as antpr,\\n    aplnc_attch_txt as aplnc_attch,\\n    aplnc_color_txt as aplnc_color,\\n    aplnc_model_dsign_name_txt as aplnc_model_dsign_name,\\n    aplnc_plcmt_txt as aplnc_plcmt,\\n    appl_txt as appl,\\n    appl_area_txt as appl_area,\\n    artfc_color_flavr_claim_txt as artfc_color_flavr_claim,\\n    adnce_txt as adnce,\\n    bag_filtr_featr_txt as bag_filtr_featr,\\n    bndng_txt as bndng,\\n    bar_size_txt as bar_size,\\n    base_desc_txt as base_desc,\\n    base_featr_txt as base_featr,\\n    base_size_txt as base_size,\\n    bttry_cnt_reqmt_txt as bttry_cnt_reqmt,\\n    bttry_outdr_chrg_txt as bttry_outdr_chrg,\\n    bttry_type_optn_txt as bttry_type_optn,\\n    bttry_type_reqmt_txt as bttry_type_reqmt,\\n    benft_txt as benft,\\n    blade_cnt_txt as blade_cnt,\\n    blade_dspbl_txt as blade_dspbl,\\n    blade_featr_txt as blade_featr,\\n    blade_type_txt as blade_type,\\n    boutq_txt as boutq,\\n    brand_comp_flavr_txt as brand_comp_flavr,\\n    brand_desc_txt as brand_desc,\\n    brand_famly_txt as brand_famly,\\n    brand_scent_txt as brand_scent,\\n    brand_scent_1_txt as brand_scent_1,\\n    brand_scent_2_txt as brand_scent_2,\\n    brand_scent_3_txt as brand_scent_3,\\n    brand_scent_4_txt as brand_scent_4,\\n    brand_scent_5_txt as brand_scent_5,\\n    brand_scent_6_txt as brand_scent_6,\\n    brand_scent_7_txt as brand_scent_7,\\n    brand_scent_8_txt as brand_scent_8,\\n    brand_scent_9_txt as brand_scent_9,\\n    brtbl_claim_txt as brtbl_claim,\\n    brstl_type_txt as brstl_type,\\n    brush_featr_txt as brush_featr,\\n    brush_type_txt as brush_type,\\n    bus_entpr_high_txt as bus_entpr_high,\\n    bus_entpr_low_txt as bus_entpr_low,\\n    calcm_prsnc_claim_txt as calcm_prsnc_claim,\\n    calor_claim_txt as calor_claim,\\n    candl_name_txt as candl_name,\\n    candl_style_txt as candl_style,\\n    cpcty_txt as cpcty,\\n    crbhd_prsnc_claim_txt as crbhd_prsnc_claim,\\n    crbnt_ingr_txt as crbnt_ingr,\\n    categ_txt as categ,\\n    cell_size_txt as cell_size,\\n    char_txt as char_name,\\n    chmcl_name_txt as chmcl_name,\\n    chmcl_sys_txt as chmcl_sys,\\n    chlrn_prsnc_claim_txt as chlrn_prsnc_claim,\\n    claim_txt as claim,\\n    clean_featr_txt as clean_featr,\\n    clean_width_txt as clean_width,\\n    cloth_cnt_txt as cloth_cnt,\\n    coatn_txt as coatn,\\n    color_txt as color,\\n    color_cnt_txt as color_cnt,\\n    color_grp_txt as color_grp,\\n    color_image_prsnc_txt as color_image_prsnc,\\n    color_stock_num_txt as color_stock_num,\\n    cmbpk_txt as cmbpk,\\n    cmbpk_mkt_name_txt as cmbpk_mkt_name,\\n    cmbpk_mltpk_pkg_genl_shape_txt as cmbpk_mltpk_pkg_genl_shape,\\n    cmbpk_prod_txt as cmbpk_prod,\\n    cmdty_grp_txt as cmdty_grp,\\n    commn_cnsmr_name_txt as commn_cnsmr_name,\\n    cmpr_to_claim_txt as cmpr_to_claim,\\n    cmptv_categ_id_txt as cmptv_categ_id,\\n    cpttr_txt as cpttr,\\n    comp_txt as comp,\\n    conc_txt as conc,\\n    cnstn_txt as cnstn,\\n    cntnr_txt as cntnr,\\n    cntnt_txt as cntnt,\\n    ctrl_featr_txt as ctrl_featr,\\n    ctrl_type_txt as ctrl_type,\\n    ctrld_label_txt as ctrld_label,\\n    cord_lngth_txt as cord_lngth,\\n    cord_storg_featr_txt as cord_storg_featr,\\n    cnt_txt as cnt,\\n    cover_txt as cover,\\n    crmnl_type_txt as crmnl_type,\\n    deal_txt as deal,\\n    deca_cmdty_code_txt as deca_cmdty_code,\\n    deca_rsl_centl_txt as deca_rsl_centl,\\n    deca_rsl_hdqtr_txt as deca_rsl_hdqtr,\\n    deca_rsl_midw_txt as deca_rsl_midw,\\n    deca_rsl_ne_txt as deca_rsl_ne,\\n    deca_rsl_nw_txt as deca_rsl_nw,\\n    deca_rsl_sthrn_txt as deca_rsl_sthrn,\\n    deca_rsl_sw_txt as deca_rsl_sw,\\n    ddrnt_prsnc_claim_txt as ddrnt_prsnc_claim,\\n    diapr_size_txt as diapr_size,\\n    dmnsn_txt as dmnsn,\\n    dmnsn_ht_txt as dmnsn_ht,\\n    dmnsn_width_txt as dmnsn_width,\\n    dspns_txt as dspns,\\n    dose_txt as dose,\\n    drug_fact_activ_ingr_txt as drug_fact_activ_ingr,\\n    drug_fact_activ_ingr_1_txt as drug_fact_activ_ingr_1,\\n    drug_fact_activ_ingr_2_txt as drug_fact_activ_ingr_2,\\n    drug_fact_activ_ingr_3_txt as drug_fact_activ_ingr_3,\\n    drug_fact_activ_ingr_4_txt as drug_fact_activ_ingr_4,\\n    drug_fact_activ_ingr_5_txt as drug_fact_activ_ingr_5,\\n    drug_fact_adult_dose_txt as drug_fact_adult_dose,\\n    drug_fact_adult_dose_exced_txt as drug_fact_adult_dose_exced,\\n    drug_fact_adult_dose_freq_txt as drug_fact_adult_dose_freq,\\n    drug_fact_child_dose_txt as drug_fact_child_dose,\\n    drug_fact_child_dose_exced_txt as drug_fact_child_dose_exced,\\n    drug_fact_child_dose_freq_txt as drug_fact_child_dose_freq,\\n    drug_fact_purps_txt as drug_fact_purps,\\n    durtn_txt as durtn,\\n    durtn_claim_txt as durtn_claim,\\n    duty_txt as duty,\\n    ease_of_use_txt as ease_of_use,\\n    end_benft_txt as end_benft,\\n    envtl_claim_txt as envtl_claim,\\n    extnd_size_txt as extnd_size,\\n    extrr_sfty_txt as extrr_sfty,\\n    famly_txt as famly,\\n    famly_varnt_txt as famly_varnt,\\n    fat_prsnc_claim_txt as fat_prsnc_claim,\\n    flshl_bulb_name_txt as flshl_bulb_name,\\n    flavr_txt as flavr,\\n    flurd_prsnc_claim_txt as flurd_prsnc_claim,\\n    flsbl_prsnc_claim_txt as flsbl_prsnc_claim,\\n    food_splmt_txt as food_splmt,\\n    form_txt as form,\\n    frml_txt as frml,\\n    fmltn_txt as fmltn,\\n    frag_txt as frag,\\n    freq_of_use_txt as freq_of_use,\\n    fruit_cntnt_txt as fruit_cntnt,\\n    func_txt as func,\\n    gendr_txt as gendr,\\n    genrc_mdctn_txt as genrc_mdctn,\\n    gtin_txt as gtin,\\n    grp_diapr_size_txt as grp_diapr_size,\\n    grp_scent_txt as grp_scent,\\n    grp_seg_txt as grp_seg,\\n    grp_size_txt as grp_size,\\n    hair_color_after_trmnt_txt as hair_color_after_trmnt,\\n    handl_featr_txt as handl_featr,\\n    head_size_txt as head_size,\\n    head_type_txt as head_type,\\n    herb_type_txt as herb_type,\\n    holdr_comp_txt as holdr_comp,\\n    hose_featr_txt as hose_featr,\\n    hose_lngth_txt as hose_lngth,\\n    hshld_spclt_aplnc_featr_txt as hshld_spclt_aplnc_featr,\\n    hdrtn_txt as hdrtn,\\n    image_carrd_txt as image_carrd,\\n    info_1_txt as info_1,\\n    info_2_txt as info_2,\\n    info_3_txt as info_3,\\n    info_dspsl_methd_txt as info_dspsl_methd,\\n    ingr_txt as ingr,\\n    item_name_on_label_txt as item_name_on_label,\\n    kind_prod_txt as kind_prod,\\n    kind_trmnt_txt as kind_trmnt,\\n    lnch_date_txt as lnch_date,\\n    lngth_txt as lngth,\\n    lcnsd_tm_txt as lcnsd_tm,\\n    lid_featr_txt as lid_featr,\\n    lfstg_txt as lfstg,\\n    light_dsply_txt as light_dsply,\\n    loc_txt as loc,\\n    long_prod_desc_txt as long_prod_desc,\\n    mach_type_txt as mach_type,\\n    major_seg_txt as major_seg,\\n    manul_elctr_txt as manul_elctr,\\n    mfgr_name_txt as mfgr_name,\\n    mfg_prcss_txt as mfg_prcss,\\n    mfg_prcss_packd_in_txt as mfg_prcss_packd_in,\\n    matl_sbtnc_txt as matl_sbtnc,\\n    matl_type_txt as matl_type,\\n    max_bttry_cnt_txt as max_bttry_cnt,\\n    med_form_txt as med_form,\\n    mdctn_txt as mdctn,\\n    mega_brand_txt as mega_brand,\\n    mrbu_txt as mrbu,\\n    minrl_type_txt as minrl_type,\\n    model_num_txt as model_num,\\n    multi_func as multi_func,\\n    mltpk_txt as mltpk,\\n    naked_prod_genl_shape_txt as naked_prod_genl_shape,\\n    naked_prod_size_claim_txt as naked_prod_size_claim,\\n    naked_prod_srce_txt as naked_prod_srce,\\n    num_of_bttry_txt as num_of_bttry,\\n    num_one_txt as num_one,\\n    ntrnl_hlth_claim_txt as ntrnl_hlth_claim,\\n    occsn_txt as occsn,\\n    odor_absbc_claim_txt as odor_absbc_claim,\\n    oil_ctrl_txt as oil_ctrl,\\n    oil_prsnc_claim_txt as oil_prsnc_claim,\\n    oil_type_txt as oil_type,\\n    oper_noise_claim_txt as oper_noise_claim,\\n    optn_txt as optn,\\n    orgnc_claim_txt as orgnc_claim,\\n    orign_txt as orign,\\n    ozs_per_load_txt as ozs_per_load,\\n    pack_txt as pack,\\n    pack_grp_txt as pack_grp,\\n    pack_size_txt as pack_size,\\n    pack_type_txt as pack_type,\\n    pkg_cnt_size_txt as pkg_cnt_size,\\n    pkg_dlvry_methd_txt as pkg_dlvry_methd,\\n    pkg_fastn_methd_txt as pkg_fastn_methd,\\n    prod_skid as prod_skid,\\n    run_id as run_id,\\n    srce_sys_id as srce_sys_id,\\n    prod_prttn_code as prod_prttn_code,\\n    prod_name as prod_name,\\n    prod_desc as prod_desc,\\n    prod_lvl_id as prod_lvl_id,\\n    prod_lvl_name as prod_lvl_name,\\n    all_prod_name as all_prod_name,\\n    gbu_id as gbu_id,\\n    gbu_name as gbu_name,\\n    sub_gbu_id as sub_gbu_id,\\n    sub_gbu_name as sub_gbu_name,\\n    categ_id as categ_id,\\n    categ_name as categ_name,\\n    custm_agg_ind as custm_agg_ind,\\n    pg_absbc_txt as pg_absbc,\\n    pg_adtv_txt as pg_adtv,\\n    pg_age_txt as pg_age,\\n    pg_airfl_sttng as pg_airfl_sttng,\\n    pg_antbc as pg_antbc,\\n    pg_appl as pg_appl,\\n    pg_asmbl_txt as pg_asmbl,\\n    pg_attch as pg_attch,\\n    pg_adnce_txt as pg_adnce,\\n    pg_base_pack_cnt_txt as pg_base_pack_cnt,\\n    pg_base_roll_eqvnc_txt as pg_base_roll_eqvnc,\\n    pg_base_roll_life_txt as pg_base_roll_life,\\n    pg_base_size_txt as pg_base_size,\\n    pg_base_size_rng_txt as pg_base_size_rng,\\n    pg_bttry_use_time as pg_bttry_use_time,\\n    pg_benft_txt as pg_benft,\\n    pg_blgcl as pg_blgcl,\\n    pg_blade_size as pg_blade_size,\\n    pg_blade_type as pg_blade_type,\\n    pg_blndr_shaft as pg_blndr_shaft,\\n    pg_body_txt as pg_body,\\n    pg_boutq as pg_boutq,\\n    pg_brand_txt as pg_brand,\\n    pg_brand_acmld_txt as pg_brand_acmld,\\n    pg_brand_desc as pg_brand_desc,\\n    pg_breed_txt as pg_breed,\\n    pg_brstl_frmns_txt as pg_brstl_frmns,\\n    pg_brstl_type as pg_brstl_type,\\n    pg_bundl as pg_bundl,\\n    pg_calcn_txt as pg_calcn,\\n    pg_cpcty_ctrl as pg_cpcty_ctrl,\\n    pg_care_adtv as pg_care_adtv,\\n    pg_categ_txt as pg_categ,\\n    pg_categ_algn_txt as pg_categ_algn,\\n    pg_cell_prsnc_txt as pg_cell_prsnc,\\n    pg_cell_size_txt as pg_cell_size,\\n    pg_crmic_plate as pg_crmic_plate,\\n    pg_chrg_time_txt as pg_chrg_time,\\n    pg_chmst_txt as pg_chmst,\\n    pg_clean_chrg as pg_clean_chrg,\\n    pg_clctn_txt as pg_clctn,\\n    pg_color_txt as pg_color,\\n    pg_color_grp as pg_color_grp,\\n    pg_color_prfum as pg_color_prfum,\\n    pg_co_type as pg_co_type,\\n    pg_cmpr_to_claim_txt as pg_cmpr_to_claim,\\n    pg_conc_txt as pg_conc,\\n    pg_cool_shot as pg_cool_shot,\\n    pg_cord as pg_cord,\\n    pg_cough_type as pg_cough_type,\\n    pg_cnt_txt as pg_cnt,\\n    pg_cvrg_txt as pg_cvrg,\\n    pg_custm_sub_brand_txt as pg_custm_sub_brand,\\n    pg_dyprt_txt as pg_dyprt,\\n    pg_deal_txt as pg_deal,\\n    pg_dtctn_claim_txt as pg_dtctn_claim,\\n    pg_diapr_size_txt as pg_diapr_size,\\n    pg_difsr_attch as pg_difsr_attch,\\n    pg_dsply_txt as pg_dsply,\\n    pg_dspbl_blade as pg_dspbl_blade,\\n    pg_dose_txt as pg_dose,\\n    pg_durtn_txt as pg_durtn,\\n    pg_duty as pg_duty,\\n    pg_emlsn as pg_emlsn,\\n    pg_end_benft as pg_end_benft,\\n    pg_envtl_claim_txt as pg_envtl_claim,\\n    pg_extnb_handl as pg_extnb_handl,\\n    pg_extra_roll_life_txt as pg_extra_roll_life,\\n    pg_facil_epltr_attch as pg_facil_epltr_attch,\\n    pg_famly as pg_famly,\\n    pg_featr_txt as pg_featr,\\n    pg_flavr_txt as pg_flavr,\\n    pg_form_txt as pg_form,\\n    pg_formt as pg_formt,\\n    pg_frag as pg_frag,\\n    pg_free_vol as pg_free_vol,\\n    pg_freq_of_use as pg_freq_of_use,\\n    pg_gendr_txt as pg_gendr,\\n    pg_gift_set as pg_gift_set,\\n    pg_gbu_txt as pg_gbu,\\n    pg_globl_gendr_txt as pg_globl_gendr,\\n    pg_good_hair_day_txt as pg_good_hair_day,\\n    pg_gray_cvrg_txt as pg_gray_cvrg,\\n    pg_grp_brand_txt as pg_grp_brand,\\n    pg_grp_diapr_size_txt as pg_grp_diapr_size,\\n    pg_grp_scent_txt as pg_grp_scent,\\n    pg_grp_seg_txt as pg_grp_seg,\\n    pg_grp_size_txt as pg_grp_size,\\n    pg_grp_strth_txt as pg_grp_strth,\\n    pg_grp_sub_brand_txt as pg_grp_sub_brand,\\n    pg_hair_type as pg_hair_type,\\n    pg_handl_type_txt as pg_handl_type,\\n    pg_head_foil_type as pg_head_foil_type,\\n    pg_head_size_txt as pg_head_size,\\n    pg_head_type as pg_head_type,\\n    pg_heat_airfl_sttng as pg_heat_airfl_sttng,\\n    pg_heat_sttng as pg_heat_sttng,\\n    pg_herbl as pg_herbl,\\n    pg_hold_lvl as pg_hold_lvl,\\n    pg_ingr_txt as pg_ingr,\\n    pg_ion_tech as pg_ion_tech,\\n    pg_job_cnt as pg_job_cnt,\\n    pg_large_cnt_pack_txt as pg_large_cnt_pack,\\n    pg_lnch_date as pg_lnch_date,\\n    pg_lngth_txt as pg_lngth,\\n    pg_lfstg_txt as pg_lfstg,\\n    pg_lfstl_txt as pg_lfstl,\\n    pg_light_dsply_txt as pg_light_dsply,\\n    pg_local_price_tier_txt as pg_local_price_tier,\\n    pg_mfgr_txt as pg_mfgr,\\n    pg_mach_type_txt as pg_mach_type,\\n    pg_matl_type as pg_matl_type,\\n    pg_max_wattg as pg_max_wattg,\\n    pg_mega_categ_txt as pg_mega_categ,\\n    pg_mega_prop_txt as pg_mega_prop,\\n    pg_model_num_txt as pg_model_num,\\n    pg_motr as pg_motr,\\n    pg_multi_func as pg_multi_func,\\n    pg_multi_use as pg_multi_use,\\n    pg_mltpk_flag_txt as pg_mltpk_flag,\\n    pg_natrl_txt as pg_natrl,\\n    pg_odor_remov as pg_odor_remov,\\n    pg_one_num_txt as pg_one_num,\\n    pg_ozs_per_load_txt as pg_ozs_per_load,\\n    pg_pack_cnt_grp_txt as pg_pack_cnt_grp,\\n    pg_pack_grp_txt as pg_pack_grp,\\n    pg_pack_type as pg_pack_type,\\n    pg_pkg_cnt as pg_pkg_cnt,\\n    pg_pkg_cnt_size_txt as pg_pkg_cnt_size,\\n    pg_pkg_size as pg_pkg_size,\\n    pg_pkg_size_2 as pg_pkg_size_2,\\n    pg_pkg_tot as pg_pkg_tot,\\n    pg_pkg_type_txt as pg_pkg_type,\\n    pg_phos as pg_phos,\\n    pg_phys_need_txt as pg_phys_need,\\n    pg_pwr_srce_txt as pg_pwr_srce,\\n    pg_pwr_srce_clean_chrg as pg_pwr_srce_clean_chrg,\\n    pg_price_disc as pg_price_disc,\\n    pg_price_seg_txt as pg_price_seg,\\n    pg_price_tier as pg_price_tier,\\n    pg_prod_claim_txt as pg_prod_claim,\\n    pg_prod_size_txt as pg_prod_size,\\n    pg_prmtn_rottn as pg_prmtn_rottn,\\n    pg_prmtn_type as pg_prmtn_type,\\n    pg_purch_mtvtr_txt as pg_purch_mtvtr,\\n    pg_refl_txt as pg_refl,\\n    pg_refl_cnt_txt as pg_refl_cnt,\\n    pg_refl_type_txt as pg_refl_type,\\n    pg_retl_flag_txt as pg_retl_flag,\\n    pg_roll_eqvnc_txt as pg_roll_eqvnc,\\n    pg_roll_eqvnc_grp_txt as pg_roll_eqvnc_grp,\\n    pg_roll_life_txt as pg_roll_life,\\n    pg_scent_txt as pg_scent,\\n    pg_scent_strth as pg_scent_strth,\\n    pg_scnd_benft as pg_scnd_benft,\\n    pg_sectr_txt as pg_sectr,\\n    pg_seg_txt as pg_seg,\\n    pg_sellg_strem_txt as pg_sellg_strem,\\n    pg_shade as pg_shade,\\n    pg_shade_lvl_txt as pg_shade_lvl,\\n    pg_shave_featr_txt as pg_shave_featr,\\n    pg_shavr_head as pg_shavr_head,\\n    pg_sheet_size_txt as pg_sheet_size,\\n    pg_shelf_loc as pg_shelf_loc,\\n    pg_sbd_txt as pg_sbd,\\n    pg_shppr_seg as pg_shppr_seg,\\n    pg_size_txt as pg_size,\\n    pg_size_eqvnc_txt as pg_size_eqvnc,\\n    pg_size_rng as pg_size_rng,\\n    pg_skin_coolr as pg_skin_coolr,\\n    pg_skin_type_txt as pg_skin_type,\\n    pg_specl_pack_txt as pg_specl_pack,\\n    pg_speed as pg_speed,\\n    pg_stain_fight_txt as pg_stain_fight,\\n    pg_steam as pg_steam,\\n    pg_sku_base_desc_txt as pg_sku_base_desc,\\n    pg_sku_base_size_txt as pg_sku_base_size,\\n    pg_sku_detl_txt as pg_sku_detl,\\n    pg_sku_num_txt as pg_sku_num,\\n    pg_strght_attch as pg_strght_attch,\\n    pg_strth_txt as pg_strth,\\n    pg_sub_brand_txt as pg_sub_brand,\\n    pg_sub_clctn_txt as pg_sub_clctn,\\n    pg_sub_form_txt as pg_sub_form,\\n    pg_sub_grp as pg_sub_grp,\\n    pg_sub_mfgr_txt as pg_sub_mfgr,\\n    pg_sub_seg as pg_sub_seg,\\n    pg_sub_type as pg_sub_type,\\n    pg_sub_vty_txt as pg_sub_vty,\\n    pg_sbstr_txt as pg_sbstr,\\n    pg_sbtnc_type_txt as pg_sbtnc_type,\\n    pg_suds_txt as pg_suds,\\n    pg_sugar_cntnt_txt as pg_sugar_cntnt,\\n    pg_super_categ_txt as pg_super_categ,\\n    pg_sys_txt as pg_sys,\\n    pg_trgt_aplnc as pg_trgt_aplnc,\\n    pg_trgt_user as pg_trgt_user,\\n    pg_tech_txt as pg_tech,\\n    pg_temp as pg_temp,\\n    pg_test_cnt_txt as pg_test_cnt,\\n    pg_txtr_txt as pg_txtr,\\n    pg_thkns_txt as pg_thkns,\\n    pg_tier as pg_tier,\\n    pg_time_txt as pg_time,\\n    pg_tone_txt as pg_tone,\\n    pg_tot_cnt_txt as pg_tot_cnt,\\n    pg_tot_cvrg_txt as pg_tot_cvrg,\\n    pg_tot_pack_cnt_txt as pg_tot_pack_cnt,\\n    pg_tot_size_txt as pg_tot_size,\\n    pg_trmng_comb_attch as pg_trmng_comb_attch,\\n    pg_type_txt as pg_type,\\n    pg_use_txt as pg_use,\\n    pg_val_add_txt as pg_val_add,\\n    pg_varnt as pg_varnt,\\n    pg_vty_txt as pg_vty,\\n    pg_vers_txt as pg_vers,\\n    pg_vlmzr_attch as pg_vlmzr_attch,\\n    pg_warmr_cnt_txt as pg_warmr_cnt,\\n    pg_wshld_txt as pg_wshld,\\n    pg_top_sheet,\\n    pg_wing,\\n    pg_prmtd_prod_grp,\\n    cntrt_id as cntrt_id,\\n    pg_prmtd_prod_id ,\\npg_price_rottn  ,\\npg_plr_txt,\\nplr_txt  ,\\nbasic_size_txt,\\npg_basic_size_txt  ,\\naisle_txt,\\ncateg_gift_set_txt,\\nclnsg_exprc_txt,\\ngca_top_sheet_def_txt,\\nglobl_pack_type_txt,\\ngrp_benft_txt,\\npg_aisle_txt,\\npg_categ_gift_set_txt,\\npg_clnsg_exprc_txt,\\npg_gca_top_sheet_def_txt,\\npg_globl_pack_type_txt,\\npg_grp_benft_txt,\\npg_scent_grp_txt,\\npg_shelf_seg_txt,\\npg_style_txt,\\nscent_grp_txt,\\nshelf_seg_txt  ,\\npg_us_offcl_txt,\\nprod_10_txt,\\nprod_11_txt,\\nprod_12_txt,\\nprod_13_txt,\\nprod_14_txt,\\nprod_15_txt,\\nprod_16_txt  ,\\npg_task_txt,\\ntask_txt  ,\\nlast_sellg_txt,\\npg_last_sellg_txt  ,\\nface_appl_txt,\\npg_face_appl_txt,\\ntot_size_txt  ,\\npg_drop_size_txt  ,\\npart_srce_sys_id\\n\\n  from\\n    mm_prod_dim\\\"\\\"\\\"\\n\\ndf_mm_prod_dim2idim = spark.sql(query)\\n\\n\\ndict_all_dfs['df_mm_prod_dim2idim'] = {\\\"df_object\\\" :df_mm_prod_dim2idim}\\ndf_output_dict['df_mm_prod_dim2idim'] = df_mm_prod_dim2idim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_dim2idim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_dim2idim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] Limit Prod cols frm the Atomic Layer for the processed Categ",
      "predecessorName": "[GEN] DIM2IDIM column transformations",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"srce_sys_id = <<SRCE_SYS_ID>> and categ_id = '<<CATEGORY_ID>>'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_dim2idim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_collim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen]  Loading MM_IGRTD_LAYER_CNTRT_ASSOC_PRC",
      "predecessorName": "[FIL] Limit Prod cols frm the Atomic Layer for the processed Categ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\n\\n\\ndf = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_IGRTD_LAYER_CNTRT_ASSOC_PRC\\\")\\n\\ndf_mm_igrtd_layer_cntrt_assoc_prc = df.select(\\\"igrtd_layer_cntrt_assoc_id\\\", \\\"cntrt_id\\\", \\\"igrtd_layer_cntrt_id\\\", \\\"prmtn_ind\\\")\\n\\n\\ndf_output_dict['df_mm_igrtd_layer_cntrt_assoc_prc'] = df_mm_igrtd_layer_cntrt_assoc_prc\\n\\ndict_all_dfs['df_mm_igrtd_layer_cntrt_assoc_prc'] = {\\\"df_object\\\" :df_mm_igrtd_layer_cntrt_assoc_prc}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_collim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_igrtd_layer_cntrt_assoc_prc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] MM_IGRTD_LAYER_CNTRT_ASSOC_PRC",
      "predecessorName": "[Gen]  Loading MM_IGRTD_LAYER_CNTRT_ASSOC_PRC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"igrtd_layer_cntrt_id = <<CNTRT_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_igrtd_layer_cntrt_assoc_prc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_igrtd_layer_cntrt_assoc_prc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[File Load] MM_PROD_XREF",
      "predecessorName": "[FIL] MM_IGRTD_LAYER_CNTRT_ASSOC_PRC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_XREF/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[sem] release MM_PROD_XREF",
      "predecessorName": "[File Load] MM_PROD_XREF",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_XREF/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Mul Join] Get Atomic Prod",
      "predecessorName": "[sem] release MM_PROD_XREF",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_collim\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"cntrt_id\",\n          \"columnAlias\": \"cntrt_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_igrtd_layer_cntrt_assoc_prc\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"CA\",\n      \"columns\": [\n        {\n          \"columnName\": \"igrtd_layer_cntrt_id\",\n          \"columnAlias\": \"igrtd_layer_cntrt_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_xref\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"XREF\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_match_attr_list\",\n          \"columnAlias\": \"prod_match_attr_list\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"INNER\",\n      \"joinDataframeAlias\": \"CA\",\n      \"joinExpression\": \"input.cntrt_id = CA.cntrt_id\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"XREF\",\n      \"joinExpression\": \"input.cntrt_id = XREF.cntrt_id and input.srce_sys_id = XREF.srce_sys_id and input.prod_skid = XREF.prod_skid\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_lkpato\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[Dedup] Deduplicate Atomic Products",
      "predecessorName": "[Mul Join] Get Atomic Prod",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"milestone\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_lkpato\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_ddupato\",\n      \"cache\": \"materialize\"\n    }\n  ],\n  \"partitionByExpressions\": [\n    \" srce_sys_id \",\n    \"prod_match_attr_list\"\n  ],\n  \"orderByExpressions\": [\n    {\n      \"orderByExpression\": \"run_id\",\n      \"sortingDirection\": \"DESC\"\n    }\n  ]\n}",
      "operationVersionName": "Deduplicator",
      "overridableIndicator": false
    },
    {
      "operationName": "[File Load] MM_PROD_SKID_LKP",
      "predecessorName": "[Dedup] Deduplicate Atomic Products",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SKID_LKP/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"exclusive\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[Join] To Exclude data of mm_prod_skid_lkp",
      "operationDescription": "j",
      "predecessorName": "[File Load] MM_PROD_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_mm_prod_skid_lkp\",\n  \"joinExpression\": \"ref.prod_match_attr_list = in.prod_match_attr_list and ref.srce_sys_id = in.srce_sys_id\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_ddupato\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_skid_lkp\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] ignore prod_skids",
      "predecessorName": "[Join] To Exclude data of mm_prod_skid_lkp",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"prod_match_attr_list\",\n      \"columnName\": \"prod_match_attr_list\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] obj_type_key",
      "predecessorName": "[CET] ignore prod_skids",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nfrom pyspark.sql.functions import *\\n\\ndf_join_mm_prod_skid_lkp = dict_all_dfs['df_join_mm_prod_skid_lkp'][\\\"df_object\\\"]\\n\\n\\n\\ndf_kd = spark.read.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_key_domain_data_provider\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").load().filter(\\\"dimension_type_key == 8 and data_provider_key == 7\\\")\\n\\ndf_join_mm_prod_skid_lkp = df_join_mm_prod_skid_lkp.withColumn('kd_data_provider_code', when( col('srce_sys_id')==3, concat(lit('TP_EU_'), col('prod_prttn_code'))) \\\\\\n                                                  .otherwise( concat( lit('TP_'),col('srce_sys_id').cast('int'), lit('_PROD'))))\\n\\ndf_prod = df_join_mm_prod_skid_lkp.join(df_kd,df_join_mm_prod_skid_lkp.kd_data_provider_code== df_kd.key_domain_data_provider_code, \\\"left\\\")\\n\\ndf_prod_null_object_keys = df_prod.filter('object_type_key is null')\\ndf_prod = df_prod.filter('object_type_key is not null')\\n\\ndf_join_mm_prod_skid_lkp = df_prod\\n\\ndict_all_dfs['df_join_mm_prod_skid_lkp'] = {\\\"df_object\\\" :df_join_mm_prod_skid_lkp}\\ndf_output_dict['df_join_mm_prod_skid_lkp'] = df_join_mm_prod_skid_lkp\\n\\ndict_all_dfs['df_prod_null_object_keys'] = {\\\"df_object\\\" :df_prod_null_object_keys}\\ndf_output_dict['df_prod_null_object_keys'] = df_prod_null_object_keys\\n\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_prod_null_object_keys\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] obj_type_key as int",
      "predecessorName": "[Gen] obj_type_key",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"cast(object_type_key as int)\",\n      \"columnName\": \"object_type_key\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[SKP] ingtd prod_skids",
      "predecessorName": "[CET] obj_type_key as int",
      "jsonSpecification": "{\r\n  \"active\": \"true\",\r\n  \"skidVersion\": \"V1\",\r\n  \"uniqueness\": \"false\",\r\n  \"overrideSkidCache\": \"disabled\",\r\n  \"milestone\": \"false\",\r\n  \"saveOutputDfsToTempTable\": \"false\",\r\n  \"outputColumnName\": \"prod_skid\",\r\n  \"orphanIndicatorColumnName\": \"\",\r\n  \"dataProviderKey\": 7,\r\n  \"dimensionTypeKey\": 8,\r\n  \"maxBatchSize\": 100000,\r\n  \"maxWorkers\": 12,\r\n  \"azureRetryLimit\": 2,\r\n  \"objectTypeKeyDynamic\": \"true\",\r\n  \"objectTypeKey\": \"object_type_key\",\r\n  \"inputDataframes\": [\r\n    {\r\n      \"name\": \"df_join_mm_prod_skid_lkp\"\r\n    }\r\n  ],\r\n  \"outputDataframes\": [\r\n    {\r\n      \"name\": \"df_join_mm_prod_skid_lkp\",\r\n      \"cache\": \"materialize\"\r\n    }\r\n  ],\r\n  \"inputColumnsNames\": [\r\n    \"srce_sys_id\",\r\n    \"prod_match_attr_list\",\r\n    \"prod_prttn_code\"\r\n  ]\r\n}",
      "operationVersionName": "SurrogateKeyLookup",
      "overridableIndicator": false
    },
    {
      "operationName": "[Fil] prod_match_attr_list is not null",
      "predecessorName": "[SKP] ingtd prod_skids",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"prod_match_attr_list is not null\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] cc",
      "predecessorName": "[Fil] prod_match_attr_list is not null",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_join_mm_prod_skid_lkp = dict_all_dfs['df_join_mm_prod_skid_lkp'][\\\"df_object\\\"]\\ndf_mm_prod_skid_lkp = dict_all_dfs['df_mm_prod_skid_lkp'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_join_mm_prod_skid_lkp.columns\\nsdim_cols = df_mm_prod_skid_lkp.columns\\n\\nfrom pyspark.sql.functions import lit\\nsdim_add_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in sdim_add_cols:\\n  df_join_mm_prod_skid_lkp = df_join_mm_prod_skid_lkp.withColumn(i,lit(None).cast('string'))\\n\\ndf_join_mm_prod_skid_lkp = df_join_mm_prod_skid_lkp.select(*sdim_cols)\\ncols = df_join_mm_prod_skid_lkp.columns\\n\\nfor j in cols:\\n  df_join_mm_prod_skid_lkp = df_join_mm_prod_skid_lkp.withColumn(j, col(j).cast(dict(df_mm_prod_skid_lkp.dtypes)[j]))\\n\\ndict_all_dfs['df_join_mm_prod_skid_lkp'] = {\\\"df_object\\\" :df_join_mm_prod_skid_lkp}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    },\n    {\n      \"name\": \"df_mm_prod_skid_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] partitioning",
      "predecessorName": "[Gen] cc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"CAST(srce_sys_id AS INTEGER)\",\n      \"columnName\": \"part_srce_sys_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[File Pub] MM_PROD_SKID_LKP",
      "predecessorName": "[CET] partitioning",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"already acquired\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SKID_LKP/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [\n    \"part_srce_sys_id\"\n  ],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[File Pub] MM_PROD_SKID_LKP DDAPI",
      "predecessorName": "[File Pub] MM_PROD_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"semaphoreOption\": \"already acquired\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"true\",\n  \"hidePublication\": \"false\",\n  \"outputPhysicalTable\": \"refined/NNIT/tradepanel/prod-tp-lightrefined/MM_PROD_SKID_LKP/\",\n  \"owningApplicationName\": {\n    \"applicationName\": \"Turbine Internal - Refined\"\n  },\n  \"dataProviderCode\": \"TP\",\n  \"secureGroupKey\": \"0\",\n  \"postPartitionsRowCount\": \"true\",\n  \"mode\": \"append\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [\n    \"part_srce_sys_id\"\n  ],\n  \"partitionAdditionalInformations\": [\n    {}\n  ],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[sem] release MM_PROD_SKID_LKP",
      "predecessorName": "[File Pub] MM_PROD_SKID_LKP DDAPI",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_SKID_LKP/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[File Load] publishing data",
      "predecessorName": "[sem] release MM_PROD_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SKID_LKP/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release  MM_PROD_SKID_LKP",
      "predecessorName": "[File Load] publishing data",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_SKID_LKP/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] Loading MM_STRCT_LVL_LKP and MM_STRCT_LKP",
      "predecessorName": "release  MM_PROD_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\n\\n\\n\\ndf_mm_prod_skid_lkp = dict_all_dfs['df_join_mm_prod_skid_lkp'][\\\"df_object\\\"]\\ndf_mm_prod_skid_lkp.createOrReplaceTempView(\\\"mm_prod_skid_lkp\\\")\\nrefresh = \\\"REFRESH table mm_prod_skid_lkp\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from mm_prod_skid_lkp\\\"\\ndf_mm_prod_skid_lkp = spark.sql(query)\\ndf_mm_prod_skid_lkp.createOrReplaceTempView(\\\"mm_prod_skid_lkp\\\")\\n\\n\\ndf_mm_strct_lvl_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_strct_lvl_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").load()\\n\\ndf_mm_strct_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_strct_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").load()\\n\\n\\ndf_output_dict['df_mm_strct_lvl_lkp'] = df_mm_strct_lvl_lkp\\ndf_output_dict['df_mm_strct_lkp'] = df_mm_strct_lkp\\n\\ndict_all_dfs['df_mm_strct_lvl_lkp'] = {\\\"df_object\\\" :df_mm_strct_lvl_lkp}\\ndict_all_dfs['df_mm_strct_lkp'] = {\\\"df_object\\\" :df_mm_strct_lkp}\\n\\ndf_output_dict['df_mm_prod_skid_lkp'] = df_mm_prod_skid_lkp\\ndict_all_dfs['df_mm_prod_skid_lkp'] = {\\\"df_object\\\" :df_mm_prod_skid_lkp}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_join_mm_prod_skid_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_strct_lkp\",\n      \"cache\": \"none\"\n    },\n    {\n      \"name\": \"df_mm_strct_lvl_lkp\",\n      \"cache\": \"none\"\n    },\n    {\n      \"name\": \"df_mm_prod_skid_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[Mul Join] Assign Integrated Prod_skid",
      "predecessorName": "[Gen] Loading MM_STRCT_LVL_LKP and MM_STRCT_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_ddupato\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_skid_lkp\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"mmpsl\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_strct_lvl_lkp\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"sll\",\n      \"columns\": [\n        {\n          \"columnName\": \"lvl_num\",\n          \"columnAlias\": \"lvl_num\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"INNER\",\n      \"joinDataframeAlias\": \"mmpsl\",\n      \"joinExpression\": \"input.srce_sys_id = mmpsl.srce_sys_id and input.prod_match_attr_list = mmpsl.prod_match_attr_list\"\n    },\n    {\n      \"joinType\": \"INNER\",\n      \"joinDataframeAlias\": \"sll\",\n      \"joinExpression\": \"input.prod_lvl_id = sll.strct_lvl_id\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_addskid\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[Join] Map Atomic Prods to Integrated Prods",
      "predecessorName": "[Mul Join] Assign Integrated Prod_skid",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT OUTER\",\n  \"referenceDataframe\": \"df_mm_prod_skid_lkp\",\n  \"joinExpression\": \"in.prod_match_attr_list = ref.prod_match_attr_list and in.srce_sys_id = ref.srce_sys_id\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_lkpato\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"atomic_prod_skid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_skid_lkp\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_map_a2i\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    }
  ],
  "graphName": "T1 Integrated Product Transformation_v1"
}