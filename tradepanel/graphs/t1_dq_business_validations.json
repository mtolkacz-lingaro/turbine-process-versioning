{
  "applicationName": "TURBINE_INTERNAL",
  "nodes": [
    {
      "operationName": "dummy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"manualSchema\": \"true\",\n  \"transformations\": [\n    {\n      \"columnType\": \"string\",\n      \"columnName\": \"test\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "CreateSchema",
      "overridableIndicator": false
    },
    {
      "operationName": "Business Validations - Checks",
      "predecessorName": "dummy",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n#Variables\\n\\ntier1_vendr_id = <<VENDOR_ID>>\\ntier1_fact_type_code = 'TP'\\ncntrt_id = <<CNTRT_ID>>\\ncntry_id = '<<ISO_CNTRY_CODE>>'\\nrun_id = <<PROCESS_RUN_KEY>>\\nsrce_sys_id = <<SRCE_SYS_ID>>\\ntier1_categ_id = '<<CATEGORY_ID>>'\\n\\npath = '<@@PATH1@@>'\\n\\n# Dataframes from Business Validation Step\\n\\ntier1_dqm_cntrt_mkt = dict_all_dfs['df_dqm_cntrt_mkt'][\\\"df_object\\\"]\\ntier1_dqm_cntrt_mkt.createOrReplaceTempView('tier1_dqm_cntrt_mkt')\\n\\ntier1_dqm_calc_index = dict_all_dfs['df_dqm_calc_index'][\\\"df_object\\\"]\\ntier1_dqm_calc_index.createOrReplaceTempView('tier1_dqm_calc_index')\\n\\n# Dataframes from prior steps\\n\\ntier1_prod_gav = dict_all_dfs['tier1_prod_gav'][\\\"df_object\\\"]\\ntier1_prod_gav.createOrReplaceTempView('tier1_prod_gav')\\n\\ntier1_fct_skid = dict_all_dfs['tier1_fct_skid'][\\\"df_object\\\"]\\ntier1_fct_skid.createOrReplaceTempView('tier1_fct_skid')\\n\\ntier1_fct_smn_m = dict_all_dfs['tier1_fct_smn_m'][\\\"df_object\\\"]\\ntier1_fct_smn_m.createOrReplaceTempView('tier1_fct_smn_m')\\n\\ntier1_fct_dvm_100_measr = dict_all_dfs['tier1_fct_dvm_100_measr'][\\\"df_object\\\"]\\ntier1_fct_dvm_100_measr.createOrReplaceTempView('tier1_fct_dvm_100_measr')\\n\\ntier1_measr_mtrlz_tbl = dict_all_dfs['tier1_measr_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_measr_mtrlz_tbl.createOrReplaceTempView('tier1_measr_mtrlz_tbl')\\n\\ntier1_time_mtrlz_tbl = dict_all_dfs['tier1_time_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_time_mtrlz_tbl.createOrReplaceTempView('tier1_time_mtrlz_tbl')\\n\\n\\ntier1_prod_cxref =  dict_all_dfs['tier1_prod_cxref'][\\\"df_object\\\"]\\ntier1_prod_cxref.createOrReplaceTempView('tier1_prod_cxref')\\n\\ntier1_mkt_dsdim =  dict_all_dfs['tier1_mkt_dsdim'][\\\"df_object\\\"]\\ntier1_mkt_dsdim.createOrReplaceTempView('tier1_mkt_dsdim') #df_mkt_as\\n\\n#que = \\\"\\\"\\\"select *, (cast(nvl(mkt_skid_2,mkt_skid_1) as INTEGER)) as mkt_skid from tier1_mkt_dsdim\\\"\\\"\\\"\\n#tier1_mkt_dsdim = spark.sql(que)\\n#tier1_mkt_dsdim.createOrReplaceTempView('tier1_mkt_dsdim') #df_mkt_as\\n\\n# Tables to be loaded\\n\\nmm_mkt_dim = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_MKT_DIM_VW/')\\nmm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\nmm_time_perd_fdim = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_TIME_PERD_FDIM_VW/')\\nmm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\nmm_time_perd_assoc_type = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_TYPE_VW/')\\nmm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\nmm_time_perd_assoc = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_VW/')\\nmm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\nmm_dvm_run_strct_lvl_plc = spark.read.format('delta').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/mm_dvm_run_strct_lvl_plc/')\\nmm_dvm_run_strct_lvl_plc.createOrReplaceTempView('mm_dvm_run_strct_lvl_plc')\\n\\nmm_time_perd = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/TIME_PERD_SDADS/')\\nmm_time_perd.createOrReplaceTempView('mm_time_perd')\\n\\nmm_dvm_run_strct_plc = spark.read.format('delta').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/mm_dvm_run_strct_plc/')\\nmm_dvm_run_strct_plc.createOrReplaceTempView('mm_dvm_run_strct_plc')\\n\\nmm_run_prttn_plc = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_RUN_PRTTN_PLC/')\\nmm_run_prttn_plc.createOrReplaceTempView('mm_run_prttn_plc')\\n\\nmm_tp_mth_fct = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_TP_MTH_FCT/')\\nmm_tp_mth_fct.createOrReplaceTempView('mm_tp_mth_fct')\\n\\nmm_prod_dim = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_PROD_DIM_VW/')\\nmm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\n# Tables from PostgreSQL\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\n# mm_strct_lkp\\nmm_strct_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_strct_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_strct_lkp.createOrReplaceTempView('mm_strct_lkp')\\n\\n# mm_strct_lvl_lkp\\nmm_strct_lvl_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_strct_lvl_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\n# mm_attr_lkp\\nmm_attr_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_attr_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_attr_lkp.createOrReplaceTempView('mm_attr_lkp')\\n\\n# mm_process_run_lkp_vw\\ndpf_all_run_vw = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_process_run_lkp_vw\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\ndpf_all_run_vw.createOrReplaceTempView('dpf_all_run_vw')\\n\\n# mm_time_perd_id_lkp\\nmm_time_perd_id_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_time_perd_id_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_time_perd_id_lkp.createOrReplaceTempView('mm_time_perd_id_lkp')\\n\\n# Create mm_time_perd_assoc_tier1_vw\\n\\nquery = f\\\"\\\"\\\"with CAL_TYPE_2 as (\\nSELECT   2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_b,\\n          tb.time_perd_start_date time_perd_start_date_b,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_a,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          ta.time_perd_end_date time_perd_end_date_a,\\n          ta.time_perd_start_date time_perd_start_date_a\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n     WHERE assoc.CAL_TYPE_ID=2),\\nBIMTH_2_MTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_B TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_A TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          tb.time_perd_end_date time_perd_end_date_A,\\n          tb.time_perd_start_date time_perd_start_date_A\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\nMTH_2_BIMTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A ,\\n          assoc.TIME_PERD_ID_B ,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_A,\\n          ta.time_perd_end_date time_perd_end_date_A,\\n          ta.time_perd_start_date time_perd_start_date_A,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_B,\\n          tb.time_perd_start_date time_perd_start_date_B\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\n\\nBW_2_EB AS (SELECT  2 CAL_TYPE_ID,\\n          ta.EVEN_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.EVEN_BIMTH_TIME_PERD_CLASS_COD TIME_PERD_CLASS_CODE_A,\\n          ta.EVEN_BIMTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.EVEN_BIMTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.EVEN_BIMTH_START_DATE TIME_PERD_START_DATE_A\\n     FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='EB'\\n    ),\\n\\nBW_2_MTH AS (SELECT  2 CAL_TYPE_ID,\\n          ta.ODD_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.MTH_TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.MTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.MTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.MTH_START_DATE TIME_PERD_START_DATE_A\\n               FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='MTH'\\n    )\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM CAL_TYPE_2\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BIMTH_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_EB\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID, CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM MTH_2_BIMTH\\\"\\\"\\\"\\ndf_mm_time_perd_assoc_tier1_vw= spark.sql(query)\\ndf_mm_time_perd_assoc_tier1_vw.createOrReplaceTempView('mm_time_perd_assoc_tier1_vw')\\n\\n# Validations\\n\\n#1 Unexpected change vs. previous period or year ago\\n\\nquery1 = f\\\"\\\"\\\"SELECT * FROM (\\nWITH fct_detail AS (SELECT fct_val.*,dvm_strct_lvl.IPP_CHECK_VAL,dvm_strct_lvl.IYA_CHECK_VAL\\n  FROM  tier1_dqm_calc_index fct_val\\n                JOIN tier1_prod_cxref xref ON xref.prod_skid = fct_val.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id\\n       JOIN mm_dvm_run_strct_lvl_plc dvm_strct_lvl\\n          ON     prod.prod_lvl_id = dvm_strct_lvl.strct_lvl_id\\n             AND fct_val.run_id = dvm_strct_lvl.run_id\\n WHERE     NEW_TIME_PERD_IND = 'Y'\\n       AND (    ABS (SALES_MSU_QTY) >= ABSLT_THSHD_VAL\\n            AND ABS (SALES_MLC_AMT) >= ABSLT_THSHD_VAL)\\n       AND (   (ABS (IPP_SU_PCT) >= IPP_CHECK_VAL)\\n            OR (ABS (IYA_SU_PCT) >= IYA_CHECK_VAL)\\n            OR (ABS (IPP_LC_PCT) >= IPP_CHECK_VAL)\\n--            OR (ABS (IYA_LC_PCT) >= IYA_CHECK_VAL)\\n)),\\n fct\\n     AS (SELECT 'IPP' index_type,\\n                'Volume Sales MSU' measure_name,\\n                ipp_su_pct index_value,\\n                SALES_MSU_QTY_PP Previous_value,\\n                SALES_MSU_QTY Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPP_CHECK_VAL CHECK_VAL\\n           FROM fct_detail\\n           WHERE ABS (IPP_SU_PCT) >= IPP_CHECK_VAL\\n         UNION ALL\\n         SELECT 'IPP' index_type,\\n                'Value Sales MLC' measure_name,\\n                ipp_LC_pct,\\n                SALES_MLC_AMT_PP Previous_value,\\n                SALES_MLC_AMT Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPP_CHECK_VAL CHECK_VAL\\n           FROM fct_detail\\n           WHERE ABS (IPP_LC_PCT) >= IPP_CHECK_VAL\\n         UNION ALL\\n         SELECT 'IYA' index_type,\\n                'Volume Sales MSU' measure_name,\\n                IYA_su_pct index_value,\\n                SALES_MSU_QTY_YA Previous_value,\\n                SALES_MSU_QTY Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IYA_CHECK_VAL CHECK_VAL\\n           FROM fct_detail\\n           WHERE ABS (IYA_SU_PCT) >= IYA_CHECK_VAL\\n--         UNION ALL\\n--         SELECT 'IYA' index_type,\\n--                'Value Sales MLC' measure_name,\\n--                IYA_LC_pct index_value,\\n--                SALES_MLC_AMT_YA Previous_value,\\n--                SALES_MLC_AMT Current_Value,\\n--                time_perd_id,\\n--                mkt_skid,\\n--                prod_skid,\\n--                IYA_CHECK_VAL CHECK_VAL\\n--           FROM fct_detail\\n--           WHERE ABS (IYA_LC_PCT) >= IYA_CHECK_VAL\\n)\\n  SELECT \\n  ('Unexpected change vs. previous period or year ago') DQ,\\n  time_perd.time_perd_long_name,                           --Time Period\\n       mkt.mkt_name,                                              --MAP Area Name\\n       mkt_map.extrn_code mkt_extrn_code,                         --Vendor Area Tag\\n       prod.extrn_prod_name prod_long_name,                       --long\\n       prod.attr_code_list prod_attr_code_list,                   --Attributes\\n       index_type,\\n       check_val tolerance_level,\\n       measure_name,                                              -- Measure name\\n       round(index_value,5) INDEX_VALUE,                                               -- Tolerance Level\\n       previous_value,                                            -- Calculated index value\\n       Current_Value\\n  FROM fct\\n       JOIN mm_time_perd_fdim time_perd\\n          ON fct.time_perd_id = time_perd.time_perd_id\\n       JOIN tier1_mkt_dsdim mkt_map ON mkt_map.mkt_skid = fct.mkt_skid\\n       JOIN mm_mkt_dim mkt\\n          ON     mkt.mkt_skid = mkt_map.mkt_skid\\n              JOIN tier1_prod_cxref xref ON xref.prod_skid = fct.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id)\\n\\t   WHERE limit 100\\n\\\"\\\"\\\"\\n\\ntier1_fact_upd_prperd_dev = spark.sql(query1)\\n\\n#2 Unexpected backdata difference\\n\\nquery2 = f\\\"\\\"\\\"SELECT\\n('Unexpected backdata difference')  DQ,\\ntime_perd_long_name as time_perd_long_name,                 \\nmkt_name as mkt_name,                            \\nmkt_extrn_code as mkt_extrn_code,                      \\nprod_long_name as prod_long_name,                      \\nprod_attr_code_list as prod_attr_code_list,                 \\nindex_type,\\ntolerance_level,\\nmeasure_name as measure_name,                        \\nINDEX_VALUE,    \\nprevious_value,                      \\nCurrent_Value\\nFROM (\\nWITH fct_detail AS (SELECT fct_val.*,dvm_strct_lvl.IPD_CHECK_VAL\\n  FROM tier1_dqm_calc_index fct_val\\n             JOIN tier1_prod_cxref xref ON xref.prod_skid = fct_val.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id\\n       JOIN mm_dvm_run_strct_lvl_plc dvm_strct_lvl\\n          ON     prod.prod_lvl_id = dvm_strct_lvl.strct_lvl_id\\n             AND fct_val.run_id = dvm_strct_lvl.run_id\\n WHERE     PD_TIME_PERD_IND = 'Y'\\n       AND (    ABS (SALES_MSU_QTY) >= ABSLT_THSHD_VAL\\n            AND ABS (SALES_MLC_AMT) >= ABSLT_THSHD_VAL)\\n       AND (   (ABS (IPD_SU_PCT) >= IPD_CHECK_VAL)\\n            OR (ABS (IPD_LC_PCT) >= IPD_CHECK_VAL))),\\n fct\\n     AS (SELECT 'IPD' index_type,\\n                'Volume Sales MSU' measure_name,\\n                ipd_su_pct \\n                index_value,\\n                SALES_MSU_QTY_PD Previous_value,\\n                SALES_MSU_QTY Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPD_CHECK_VAL CHECK_VAL\\n           FROM fct_detail \\n           WHERE ABS (IPD_SU_PCT) >= IPD_CHECK_VAL\\n         UNION ALL\\n         SELECT 'IPD' index_type,\\n                'Value Sales MLC' measure_name,\\n                ipd_lc_pct index_value,\\n                SALES_MLC_AMT_PD Previous_value,\\n                SALES_MLC_AMT Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPD_CHECK_VAL CHECK_VAL\\n           FROM fct_detail \\n           WHERE ABS (IPD_LC_PCT) >= IPD_CHECK_VAL)         \\nSELECT \\ntime_perd.time_perd_long_name,                             --Time Period\\n       mkt.mkt_name,                                              --MAP Area Name\\n       mkt_map.extrn_code mkt_extrn_code,                         --Vendor Area Tag\\n       prod.extrn_prod_name prod_long_name,                       --long\\n       prod.attr_code_list prod_attr_code_list,                   --Attributes\\n       index_type,\\n       check_val tolerance_level,\\n       measure_name,                                           -- Measure name\\n       round(index_value,5) INDEX_VALUE,                                            -- Tolerance Level\\n       previous_value,                                         -- Calculated index value\\n       Current_Value\\n  FROM fct\\n       JOIN mm_time_perd_fdim time_perd\\n          ON fct.time_perd_id = time_perd.time_perd_id\\n       JOIN tier1_mkt_dsdim mkt_map ON mkt_map.mkt_skid = fct.mkt_skid\\n       JOIN mm_mkt_dim mkt\\n          ON     mkt.mkt_skid = mkt_map.mkt_skid\\n              JOIN tier1_prod_cxref xref ON xref.prod_skid = fct.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id)\\n       WHERE limit 100\\\"\\\"\\\"\\n\\ntier1_back_data_upd_dev = spark.sql(query2)\\n\\n# Product Parent-Children mismatch on Volume Sales (MSU)\\n\\nquery3 = f\\\"\\\"\\\" SELECT ('Product Parent-Children mismatch on Volume Sales (MSU)')  DQ, * FROM (\\n  WITH thr AS\\n  (SELECT MM_DVM_RUN_STRCT_PLC.PARNT_CHILD_CHECK_VAL FROM mm_dvm_run_strct_plc where run_id = '<CURRENT_RUN_ID>'),\\n   mkt_top_node\\n     AS (SELECT /*+ materialize */ \\n               cntrt_id, mkt_top_node_skid\\n           FROM tier1_dqm_cntrt_mkt\\n          WHERE cntrt_id = {cntrt_id}),\\n     prod\\n     AS (SELECT /*+ materialize */\\n               EXTRN_PROD_ATTR_VAL_LIST,\\n\\t\\t\\t   extrn_prod_name,\\n                extrn_code,\\n                SUBSTR (EXTRN_PROD_ATTR_VAL_LIST,\\n                        1,\\n                        INSTR(EXTRN_PROD_ATTR_VAL_LIST, ' ') - 1)\\n                   PARNT_EXTRN_PROD_ATTR_VAL_LIST\\n           FROM tier1_prod_gav),\\n     fct\\n     AS (SELECT fct.time_perd_id,\\n\\t            fct.mkt_skid,\\n\\t            fct.prod_Extrn_code,\\n                fct.mkt_Extrn_code,\\n                fct.TIME_EXTRN_CODE,\\n              fct.srce_sys_id,\\n              fct.cntrt_id,\\n\\t\\t\\t\\tprod.extrn_prod_name,\\n                prod.EXTRN_PROD_ATTR_VAL_LIST,\\n                prod.PARNT_EXTRN_PROD_ATTR_VAL_LIST,\\n                SALES_MSU_QTY\\n           FROM tier1_fct_skid fct\\n                JOIN prod ON prod.extrn_code = fct.prod_Extrn_code\\n          WHERE fct.mkt_skid = (SELECT  mkt_top_node_skid FROM mkt_top_node)),\\n     fct_agg \\n     AS (  SELECT fct.mkt_Extrn_code,\\n                  fct.TIME_EXTRN_CODE,\\n                  prod.PARNT_EXTRN_PROD_ATTR_VAL_LIST,\\n                  SUM (SALES_MSU_QTY) SALES_MSU_QTY\\n             FROM tier1_fct_skid fct\\n                  JOIN prod ON prod.extrn_code = fct.prod_Extrn_code\\n            WHERE fct.mkt_skid = (SELECT mkt_top_node_skid FROM mkt_top_node)\\n         GROUP BY fct.mkt_Extrn_code,\\n                  fct.TIME_EXTRN_CODE,\\n                  prod.PARNT_EXTRN_PROD_ATTR_VAL_LIST)\\n SELECT                                                       /* parallel(8) */\\n       tp.long_name,                           --Time Period\\n       mkt.mkt_name,                                              --MAP Area Name\\n       fct_parnt.mkt_Extrn_code mkt_extrn_code,                         --Vendor Area Tag\\n       fct_parnt.extrn_prod_name parent_prod_long_name,                       --long\\n       fct_parnt.EXTRN_PROD_ATTR_VAL_LIST parent_prod_attr_code_list,                   --Attributes\\n       fct_child.extrn_prod_name child_prod_long_name,                       --long\\n       fct_child.EXTRN_PROD_ATTR_VAL_LIST child_prod_attr_code_list,                   --Attributes\\n       fct_child.SALES_MSU_QTY child_SALES_MSU_QTY,\\n\\t   fct_parnt.SALES_MSU_QTY PARENT_SALES_MSU_QTY,\\n\\t   fct_agg.SALES_MSU_QTY sum_SALES_MSU_QTY,\\n\\t   ABS(fct_parnt.SALES_MSU_QTY - fct_agg.SALES_MSU_QTY) diff_SALES_MSU_QTY,\\n\\t   DECODE(fct_parnt.SALES_MSU_QTY,0,'-',round(ABS(fct_parnt.SALES_MSU_QTY - fct_agg.SALES_MSU_QTY)/fct_parnt.SALES_MSU_QTY*100,6)) PER_diff_SALES_MSU_QTY,\\n       PARNT_CHILD_CHECK_VAL tolerance_level\\n   FROM fct fct_parnt\\n     LEFT JOIN thr ON 1=1\\n     JOIN fct_agg\\n          ON     fct_parnt.mkt_extrn_code = fct_agg.mkt_extrn_code\\n             AND fct_parnt.time_extrn_code = fct_agg.time_extrn_code\\n             AND fct_parnt.extrn_prod_attr_val_list =\\n                    fct_agg.PARNT_EXTRN_PROD_ATTR_VAL_LIST\\n             AND (ABS(fct_parnt.SALES_MSU_QTY - fct_agg.SALES_MSU_QTY) >  PARNT_CHILD_CHECK_VAL)\\n     JOIN fct fct_child ON fct_parnt.mkt_skid = fct_child.mkt_skid AND fct_parnt.time_perd_id = fct_child.time_perd_id and fct_child.PARNT_EXTRN_PROD_ATTR_VAL_LIST = fct_parnt.extrn_prod_attr_val_list\\n\\t   JOIN mm_time_perd tp ON fct_parnt.time_perd_id = tp.time_perd_id\\n\\t   JOIN mm_mkt_dim mkt ON fct_parnt.mkt_skid = mkt.mkt_skid AND mkt.cntrt_id = 0 AND\\n     fct_parnt.srce_sys_id = mkt.srce_sys_id \\n   ORDER BY diff_SALES_MSU_QTY DESC, mkt_name, long_name, parent_prod_attr_code_list\\t \\n)\\n\\t    WHERE limit 100\\\"\\\"\\\"\\n     \\ntier1_fact_parnt_child_tlr = spark.sql(query3)\\n\\n# 4 - Top level Volume/Value Sales mismatch between hierarchies\\n\\nquery4 = f\\\"\\\"\\\"SELECT\\n('Top level Volume/Value Sales mismatch between hierarchies') DQ,\\nTIME_EXTRN_CODE as TIME_EXTRN_CODE,\\nEXTRN_MKT_NAME as EXTRN_MKT_NAME,\\nMKT_EXTRN_CODE as MKT_EXTRN_CODE,\\nHIER as HIER,\\nSALES_MLC_AMT,\\nSALES_MSU_QTY\\nFROM (SELECT DISTINCT fct.TIME_EXTRN_CODE, mdim.EXTRN_MKT_NAME, fct.MKT_EXTRN_CODE, prod.ATTR_CODE_1||'_H'||prod.ATTR_CODE_0 HIER, fct.SALES_MLC_AMT, fct.SALES_MSU_QTY \\n    from tier1_fct_smn_m fct join tier1_prod_gav prod\\n    on prod.extrn_code= fct.prod_Extrn_code\\n    AND prod.lvl_num=1 JOIN  tier1_fct_smn_m fct2 on\\n    fct2.mkt_Extrn_code = fct.mkt_Extrn_code\\n    and fct2.TIME_EXTRN_CODE = fct.TIME_EXTRN_CODE\\n    and( round(fct.SALES_MLC_AMT,3) <> round(fct2.SALES_MLC_AMT,3)\\n    or round(fct.SALES_MSU_QTY,3) <> round(fct2.SALES_MSU_QTY,3))\\n    join tier1_prod_gav prod2 on prod2.extrn_code= fct2.prod_Extrn_code\\n    join tier1_mkt_dsdim mdim on mdim.extrn_code = fct.mkt_extrn_code\\n    where prod2.attr_Code_0!= prod.attr_Code_0 -- another hirarchy\\n    and prod2.lvl_num = 1)\\n\\tWHERE limit 100\\\"\\\"\\\"\\n \\ntier1_fact_top_lvl_msm = spark.sql(query4)\\n\\n\\n#5 - Negative fact values\\n\\nquery5 = f\\\"\\\"\\\"\\nSELECT \\n('Negative fact values')  DQ,\\nLINE_NUM,\\nTIME_EXTRN_CODE TIME_EXTRN_CODE,\\nMKT_EXTRN_CODE MKT_EXTRN_CODE,\\nPROD_EXTRN_CODE PROD_EXTRN_CODE,\\nMEASURE MEASURE,\\nVALUE,\\nMINIM,\\nRNV\\nFROM (\\nWITH neg AS (\\nSELECT mm_dvm_run_strct_plc.NEG_CHECK_VAL FROM mm_dvm_run_strct_plc where run_id = {run_id}\\n),\\nwrg AS (SELECT * FROM (\\nSELECT * FROM tier1_fct_dvm_100_measr LEFT JOIN neg ON 1=1 WHERE\\nFACT_AMT_1<NEG_CHECK_VAL OR FACT_AMT_2<NEG_CHECK_VAL OR FACT_AMT_3<NEG_CHECK_VAL OR FACT_AMT_4<NEG_CHECK_VAL OR\\nFACT_AMT_5<NEG_CHECK_VAL OR FACT_AMT_6<NEG_CHECK_VAL OR FACT_AMT_7<NEG_CHECK_VAL OR FACT_AMT_8<NEG_CHECK_VAL OR\\nFACT_AMT_9<NEG_CHECK_VAL OR FACT_AMT_10<NEG_CHECK_VAL OR FACT_AMT_11<NEG_CHECK_VAL OR FACT_AMT_12<NEG_CHECK_VAL OR\\nFACT_AMT_13<NEG_CHECK_VAL OR FACT_AMT_14<NEG_CHECK_VAL OR FACT_AMT_15<NEG_CHECK_VAL OR FACT_AMT_16<NEG_CHECK_VAL OR\\nFACT_AMT_17<NEG_CHECK_VAL OR FACT_AMT_18<NEG_CHECK_VAL OR FACT_AMT_19<NEG_CHECK_VAL OR FACT_AMT_20<NEG_CHECK_VAL OR\\nFACT_AMT_21<NEG_CHECK_VAL OR FACT_AMT_22<NEG_CHECK_VAL OR FACT_AMT_23<NEG_CHECK_VAL OR FACT_AMT_24<NEG_CHECK_VAL OR\\nFACT_AMT_25<NEG_CHECK_VAL OR FACT_AMT_26<NEG_CHECK_VAL OR FACT_AMT_27<NEG_CHECK_VAL OR FACT_AMT_28<NEG_CHECK_VAL OR\\nFACT_AMT_29<NEG_CHECK_VAL OR FACT_AMT_30<NEG_CHECK_VAL OR FACT_AMT_31<NEG_CHECK_VAL OR FACT_AMT_32<NEG_CHECK_VAL OR\\nFACT_AMT_33<NEG_CHECK_VAL OR FACT_AMT_34<NEG_CHECK_VAL OR FACT_AMT_35<NEG_CHECK_VAL OR FACT_AMT_36<NEG_CHECK_VAL OR\\nFACT_AMT_37<NEG_CHECK_VAL OR FACT_AMT_38<NEG_CHECK_VAL OR FACT_AMT_39<NEG_CHECK_VAL OR FACT_AMT_40<NEG_CHECK_VAL OR\\nFACT_AMT_41<NEG_CHECK_VAL OR FACT_AMT_42<NEG_CHECK_VAL OR FACT_AMT_43<NEG_CHECK_VAL OR FACT_AMT_44<NEG_CHECK_VAL OR\\nFACT_AMT_45<NEG_CHECK_VAL OR FACT_AMT_46<NEG_CHECK_VAL OR FACT_AMT_47<NEG_CHECK_VAL OR FACT_AMT_48<NEG_CHECK_VAL OR\\nFACT_AMT_49<NEG_CHECK_VAL OR FACT_AMT_50<NEG_CHECK_VAL OR FACT_AMT_51<NEG_CHECK_VAL OR FACT_AMT_52<NEG_CHECK_VAL OR\\nFACT_AMT_53<NEG_CHECK_VAL OR FACT_AMT_54<NEG_CHECK_VAL OR FACT_AMT_55<NEG_CHECK_VAL OR FACT_AMT_56<NEG_CHECK_VAL OR\\nFACT_AMT_57<NEG_CHECK_VAL OR FACT_AMT_58<NEG_CHECK_VAL OR FACT_AMT_59<NEG_CHECK_VAL OR FACT_AMT_60<NEG_CHECK_VAL OR\\nFACT_AMT_61<NEG_CHECK_VAL OR FACT_AMT_62<NEG_CHECK_VAL OR FACT_AMT_63<NEG_CHECK_VAL OR FACT_AMT_64<NEG_CHECK_VAL OR\\nFACT_AMT_65<NEG_CHECK_VAL OR FACT_AMT_66<NEG_CHECK_VAL OR FACT_AMT_67<NEG_CHECK_VAL OR FACT_AMT_68<NEG_CHECK_VAL OR\\nFACT_AMT_69<NEG_CHECK_VAL OR FACT_AMT_70<NEG_CHECK_VAL OR FACT_AMT_71<NEG_CHECK_VAL OR FACT_AMT_72<NEG_CHECK_VAL OR\\nFACT_AMT_73<NEG_CHECK_VAL OR FACT_AMT_74<NEG_CHECK_VAL OR FACT_AMT_75<NEG_CHECK_VAL OR FACT_AMT_76<NEG_CHECK_VAL OR\\nFACT_AMT_77<NEG_CHECK_VAL OR FACT_AMT_78<NEG_CHECK_VAL OR FACT_AMT_79<NEG_CHECK_VAL OR FACT_AMT_80<NEG_CHECK_VAL OR\\nFACT_AMT_81<NEG_CHECK_VAL OR FACT_AMT_82<NEG_CHECK_VAL OR FACT_AMT_83<NEG_CHECK_VAL OR FACT_AMT_84<NEG_CHECK_VAL OR\\nFACT_AMT_85<NEG_CHECK_VAL OR FACT_AMT_86<NEG_CHECK_VAL OR FACT_AMT_87<NEG_CHECK_VAL OR FACT_AMT_88<NEG_CHECK_VAL OR\\nFACT_AMT_89<NEG_CHECK_VAL OR FACT_AMT_90<NEG_CHECK_VAL OR FACT_AMT_91<NEG_CHECK_VAL OR FACT_AMT_92<NEG_CHECK_VAL OR\\nFACT_AMT_93<NEG_CHECK_VAL OR FACT_AMT_94<NEG_CHECK_VAL OR FACT_AMT_95<NEG_CHECK_VAL OR FACT_AMT_96<NEG_CHECK_VAL OR\\nFACT_AMT_97<NEG_CHECK_VAL OR FACT_AMT_98<NEG_CHECK_VAL OR FACT_AMT_99<NEG_CHECK_VAL OR FACT_AMT_100<NEG_CHECK_VAL)\\nWHERE limit 100\\n),\\nmsrs AS (\\nSELECT msr.*, ROW_NUMBER() OVER (ORDER BY LINE_NUM) rn FROM tier1_measr_mtrlz_tbl msr\\n)\\n\\nSELECT * FROM (\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 1) AS MEASURE, FACT_AMT_1 AS VALUE FROM wrg WHERE FACT_AMT_1<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 2) AS MEASURE, FACT_AMT_2 AS VALUE FROM wrg WHERE FACT_AMT_2<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 3) AS MEASURE, FACT_AMT_3 AS VALUE FROM wrg WHERE FACT_AMT_3<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 4) AS MEASURE, FACT_AMT_4 AS VALUE FROM wrg WHERE FACT_AMT_4<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 5) AS MEASURE, FACT_AMT_5 AS VALUE FROM wrg WHERE FACT_AMT_5<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 6) AS MEASURE, FACT_AMT_6 AS VALUE FROM wrg WHERE FACT_AMT_6<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 7) AS MEASURE, FACT_AMT_7 AS VALUE FROM wrg WHERE FACT_AMT_7<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 8) AS MEASURE, FACT_AMT_8 AS VALUE FROM wrg WHERE FACT_AMT_8<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 9) AS MEASURE, FACT_AMT_9 AS VALUE FROM wrg WHERE FACT_AMT_9<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 10) AS MEASURE, FACT_AMT_10 AS VALUE FROM wrg WHERE FACT_AMT_10<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 11) AS MEASURE, FACT_AMT_11 AS VALUE FROM wrg WHERE FACT_AMT_11<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 12) AS MEASURE, FACT_AMT_12 AS VALUE FROM wrg WHERE FACT_AMT_12<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 13) AS MEASURE, FACT_AMT_13 AS VALUE FROM wrg WHERE FACT_AMT_13<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 14) AS MEASURE, FACT_AMT_14 AS VALUE FROM wrg WHERE FACT_AMT_14<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 15) AS MEASURE, FACT_AMT_15 AS VALUE FROM wrg WHERE FACT_AMT_15<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 16) AS MEASURE, FACT_AMT_16 AS VALUE FROM wrg WHERE FACT_AMT_16<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 17) AS MEASURE, FACT_AMT_17 AS VALUE FROM wrg WHERE FACT_AMT_17<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 18) AS MEASURE, FACT_AMT_18 AS VALUE FROM wrg WHERE FACT_AMT_18<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 19) AS MEASURE, FACT_AMT_19 AS VALUE FROM wrg WHERE FACT_AMT_19<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 20) AS MEASURE, FACT_AMT_20 AS VALUE FROM wrg WHERE FACT_AMT_20<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 21) AS MEASURE, FACT_AMT_21 AS VALUE FROM wrg WHERE FACT_AMT_21<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 22) AS MEASURE, FACT_AMT_22 AS VALUE FROM wrg WHERE FACT_AMT_22<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 23) AS MEASURE, FACT_AMT_23 AS VALUE FROM wrg WHERE FACT_AMT_23<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 24) AS MEASURE, FACT_AMT_24 AS VALUE FROM wrg WHERE FACT_AMT_24<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 25) AS MEASURE, FACT_AMT_25 AS VALUE FROM wrg WHERE FACT_AMT_25<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 26) AS MEASURE, FACT_AMT_26 AS VALUE FROM wrg WHERE FACT_AMT_26<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 27) AS MEASURE, FACT_AMT_27 AS VALUE FROM wrg WHERE FACT_AMT_27<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 28) AS MEASURE, FACT_AMT_28 AS VALUE FROM wrg WHERE FACT_AMT_28<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 29) AS MEASURE, FACT_AMT_29 AS VALUE FROM wrg WHERE FACT_AMT_29<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 30) AS MEASURE, FACT_AMT_30 AS VALUE FROM wrg WHERE FACT_AMT_30<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 31) AS MEASURE, FACT_AMT_31 AS VALUE FROM wrg WHERE FACT_AMT_31<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 32) AS MEASURE, FACT_AMT_32 AS VALUE FROM wrg WHERE FACT_AMT_32<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 33) AS MEASURE, FACT_AMT_33 AS VALUE FROM wrg WHERE FACT_AMT_33<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 34) AS MEASURE, FACT_AMT_34 AS VALUE FROM wrg WHERE FACT_AMT_34<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 35) AS MEASURE, FACT_AMT_35 AS VALUE FROM wrg WHERE FACT_AMT_35<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 36) AS MEASURE, FACT_AMT_36 AS VALUE FROM wrg WHERE FACT_AMT_36<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 37) AS MEASURE, FACT_AMT_37 AS VALUE FROM wrg WHERE FACT_AMT_37<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 38) AS MEASURE, FACT_AMT_38 AS VALUE FROM wrg WHERE FACT_AMT_38<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 39) AS MEASURE, FACT_AMT_39 AS VALUE FROM wrg WHERE FACT_AMT_39<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 40) AS MEASURE, FACT_AMT_40 AS VALUE FROM wrg WHERE FACT_AMT_40<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 41) AS MEASURE, FACT_AMT_41 AS VALUE FROM wrg WHERE FACT_AMT_41<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 42) AS MEASURE, FACT_AMT_42 AS VALUE FROM wrg WHERE FACT_AMT_42<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 43) AS MEASURE, FACT_AMT_43 AS VALUE FROM wrg WHERE FACT_AMT_43<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 44) AS MEASURE, FACT_AMT_44 AS VALUE FROM wrg WHERE FACT_AMT_44<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 45) AS MEASURE, FACT_AMT_45 AS VALUE FROM wrg WHERE FACT_AMT_45<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 46) AS MEASURE, FACT_AMT_46 AS VALUE FROM wrg WHERE FACT_AMT_46<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 47) AS MEASURE, FACT_AMT_47 AS VALUE FROM wrg WHERE FACT_AMT_47<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 48) AS MEASURE, FACT_AMT_48 AS VALUE FROM wrg WHERE FACT_AMT_48<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 49) AS MEASURE, FACT_AMT_49 AS VALUE FROM wrg WHERE FACT_AMT_49<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 50) AS MEASURE, FACT_AMT_50 AS VALUE FROM wrg WHERE FACT_AMT_50<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 51) AS MEASURE, FACT_AMT_51 AS VALUE FROM wrg WHERE FACT_AMT_51<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 52) AS MEASURE, FACT_AMT_52 AS VALUE FROM wrg WHERE FACT_AMT_52<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 53) AS MEASURE, FACT_AMT_53 AS VALUE FROM wrg WHERE FACT_AMT_53<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 54) AS MEASURE, FACT_AMT_54 AS VALUE FROM wrg WHERE FACT_AMT_54<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 55) AS MEASURE, FACT_AMT_55 AS VALUE FROM wrg WHERE FACT_AMT_55<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 56) AS MEASURE, FACT_AMT_56 AS VALUE FROM wrg WHERE FACT_AMT_56<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 57) AS MEASURE, FACT_AMT_57 AS VALUE FROM wrg WHERE FACT_AMT_57<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 58) AS MEASURE, FACT_AMT_58 AS VALUE FROM wrg WHERE FACT_AMT_58<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 59) AS MEASURE, FACT_AMT_59 AS VALUE FROM wrg WHERE FACT_AMT_59<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 60) AS MEASURE, FACT_AMT_60 AS VALUE FROM wrg WHERE FACT_AMT_60<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 61) AS MEASURE, FACT_AMT_61 AS VALUE FROM wrg WHERE FACT_AMT_61<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 62) AS MEASURE, FACT_AMT_62 AS VALUE FROM wrg WHERE FACT_AMT_62<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 63) AS MEASURE, FACT_AMT_63 AS VALUE FROM wrg WHERE FACT_AMT_63<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 64) AS MEASURE, FACT_AMT_64 AS VALUE FROM wrg WHERE FACT_AMT_64<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 65) AS MEASURE, FACT_AMT_65 AS VALUE FROM wrg WHERE FACT_AMT_65<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 66) AS MEASURE, FACT_AMT_66 AS VALUE FROM wrg WHERE FACT_AMT_66<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 67) AS MEASURE, FACT_AMT_67 AS VALUE FROM wrg WHERE FACT_AMT_67<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 68) AS MEASURE, FACT_AMT_68 AS VALUE FROM wrg WHERE FACT_AMT_68<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 69) AS MEASURE, FACT_AMT_69 AS VALUE FROM wrg WHERE FACT_AMT_69<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 70) AS MEASURE, FACT_AMT_70 AS VALUE FROM wrg WHERE FACT_AMT_70<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 71) AS MEASURE, FACT_AMT_71 AS VALUE FROM wrg WHERE FACT_AMT_71<NEG_CHECK_VAL) ms  \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 72) AS MEASURE, FACT_AMT_72 AS VALUE FROM wrg WHERE FACT_AMT_72<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 73) AS MEASURE, FACT_AMT_73 AS VALUE FROM wrg WHERE FACT_AMT_73<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 74) AS MEASURE, FACT_AMT_74 AS VALUE FROM wrg WHERE FACT_AMT_74<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 75) AS MEASURE, FACT_AMT_75 AS VALUE FROM wrg WHERE FACT_AMT_75<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 76) AS MEASURE, FACT_AMT_76 AS VALUE FROM wrg WHERE FACT_AMT_76<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 77) AS MEASURE, FACT_AMT_77 AS VALUE FROM wrg WHERE FACT_AMT_77<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 78) AS MEASURE, FACT_AMT_78 AS VALUE FROM wrg WHERE FACT_AMT_78<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 79) AS MEASURE, FACT_AMT_79 AS VALUE FROM wrg WHERE FACT_AMT_79<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 80) AS MEASURE, FACT_AMT_80 AS VALUE FROM wrg WHERE FACT_AMT_80<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 81) AS MEASURE, FACT_AMT_81 AS VALUE FROM wrg WHERE FACT_AMT_81<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 82) AS MEASURE, FACT_AMT_82 AS VALUE FROM wrg WHERE FACT_AMT_82<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 83) AS MEASURE, FACT_AMT_83 AS VALUE FROM wrg WHERE FACT_AMT_83<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 84) AS MEASURE, FACT_AMT_84 AS VALUE FROM wrg WHERE FACT_AMT_84<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 85) AS MEASURE, FACT_AMT_85 AS VALUE FROM wrg WHERE FACT_AMT_85<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 86) AS MEASURE, FACT_AMT_86 AS VALUE FROM wrg WHERE FACT_AMT_86<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 87) AS MEASURE, FACT_AMT_87 AS VALUE FROM wrg WHERE FACT_AMT_87<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 88) AS MEASURE, FACT_AMT_88 AS VALUE FROM wrg WHERE FACT_AMT_88<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 89) AS MEASURE, FACT_AMT_89 AS VALUE FROM wrg WHERE FACT_AMT_89<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 90) AS MEASURE, FACT_AMT_90 AS VALUE FROM wrg WHERE FACT_AMT_90<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 91) AS MEASURE, FACT_AMT_91 AS VALUE FROM wrg WHERE FACT_AMT_91<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 92) AS MEASURE, FACT_AMT_92 AS VALUE FROM wrg WHERE FACT_AMT_92<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 93) AS MEASURE, FACT_AMT_93 AS VALUE FROM wrg WHERE FACT_AMT_93<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 94) AS MEASURE, FACT_AMT_94 AS VALUE FROM wrg WHERE FACT_AMT_94<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 95) AS MEASURE, FACT_AMT_95 AS VALUE FROM wrg WHERE FACT_AMT_95<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 96) AS MEASURE, FACT_AMT_96 AS VALUE FROM wrg WHERE FACT_AMT_96<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 97) AS MEASURE, FACT_AMT_97 AS VALUE FROM wrg WHERE FACT_AMT_97<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 98) AS MEASURE, FACT_AMT_98 AS VALUE FROM wrg WHERE FACT_AMT_98<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 99) AS MEASURE, FACT_AMT_99 AS VALUE FROM wrg WHERE FACT_AMT_99<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 100) AS MEASURE, FACT_AMT_100 AS VALUE FROM wrg WHERE FACT_AMT_100<NEG_CHECK_VAL) ms  )\\nWHERE rnv<51\\nORDER BY minim, measure, rnv)\\nWHERE limit 1000 \\\"\\\"\\\"\\n\\ntier1_map_fact_vld_data_neg = spark.sql(query5)\\n\\n\\n# 6 - Missing fact data for parent product level\\nquery6 = f\\\"\\\"\\\"with prod as (\\nselect \\n       extrn_prod_attr_val_list,\\n       extrn_code,\\n       extrn_prod_name,\\n       substr (extrn_prod_attr_val_list,\\n               1,\\n               instr (extrn_prod_attr_val_list, ' ') - 1\\n               ) parnt_extrn_prod_attr_val_list\\n  from tier1_prod_gav\\n),\\nfct as (\\nselect fct.time_perd_id,\\n       fct.mkt_skid,\\n       fct.mkt_extrn_code,\\n       prod.extrn_prod_attr_val_list,\\n       prod.parnt_extrn_prod_attr_val_list,\\n       prod.extrn_prod_name,\\n       fct.sales_msu_qty,\\n       fct.srce_sys_id\\n  from tier1_fct_skid fct\\n  join prod on prod.extrn_code = fct.prod_extrn_code\\n  join tier1_dqm_cntrt_mkt mkt on mkt.mkt_top_node_skid = fct.mkt_skid and mkt.cntrt_id = {cntrt_id}\\n),\\nfct_agg as (\\nselect mkt_skid, time_perd_id, parnt_extrn_prod_attr_val_list,\\n       sum (sales_msu_qty) sales_msu_qty\\n  from fct\\n where instr(parnt_extrn_prod_attr_val_list, ' ') > 0 --exclude top prod lvl as parent\\ngroup by mkt_skid, time_perd_id, parnt_extrn_prod_attr_val_list\\n)\\nselect \\n('Missing fact data for parent product level')  DQ,\\nt.long_name as long_name,\\n       m.mkt_name as mkt_name,\\n       fc.mkt_extrn_code as mkt_extrn_code,\\n       fc.extrn_prod_name as child_prod_long_name,\\n       fc.extrn_prod_attr_val_list as child_prod_attr_code_list,\\n       nvl(fp.extrn_prod_name, '<no parent record is source file>') parent_prod_long_name,\\n       fc.parnt_extrn_prod_attr_val_list as parent_prod_attr_code_list,\\n       fc.sales_msu_qty as child_sales_msu_qty,\\n       fp.sales_msu_qty as parent_sales_msu_qty,\\n       fa.sales_msu_qty as sum_sales_msu_qty\\n  from fct_agg fa\\n  left join fct fc on fa.mkt_skid = fc.mkt_skid and fa.time_perd_id = fc.time_perd_id and fa.parnt_extrn_prod_attr_val_list = fc.parnt_extrn_prod_attr_val_list \\n  left join fct fp on fp.mkt_skid = fa.mkt_skid and fp.time_perd_id = fa.time_perd_id and fp.extrn_prod_attr_val_list = fa.parnt_extrn_prod_attr_val_list \\n  left join mm_time_perd t on fc.time_perd_id = t.time_perd_id\\n  left join mm_mkt_dim m   on fc.mkt_skid = m.mkt_skid and fc.srce_sys_id = m.srce_sys_id and m.cntrt_id = 0 \\n where fp.sales_msu_qty is null and fa.sales_msu_qty is not null\\n order by m.mkt_name, t.long_name, parent_prod_attr_code_list \\\"\\\"\\\"\\n\\ntier1_miss_fact_parnt_data = spark.sql(query6)\\n\\n\\n\\n# 7 - Missing/delivered product level\\n\\nquery7 = f\\\"\\\"\\\"WITH curr_run AS\\n (SELECT /*+ materialize */\\n         DISTINCT \\n         CASE\\n           WHEN tf.time_perd_class_code IN ('MTH') THEN\\n             tf.time_perd_end_date\\n           ELSE\\n             ta.time_perd_end_date_a\\n         END time_perd_end_date,\\n         {srce_sys_id} srce_sys_id,\\n         {cntrt_id} cntrt_id,\\n         '{tier1_fact_type_code}' fact_type_code,\\n         '{tier1_categ_id}' prod_prttn_code\\n    FROM tier1_time_mtrlz_tbl st\\n    JOIN mm_time_perd_id_lkp l\\n      ON l.extrn_time_perd_id = st.extrn_code\\n     and l.vendr_id = {tier1_vendr_id}\\n    JOIN mm_time_perd_fdim tf\\n      on tf.time_perd_id = l.time_perd_id\\n    LEFT OUTER JOIN mm_time_perd_assoc_tier1_vw ta\\n      ON ta.time_perd_id_b = tf.time_perd_id\\n     AND ta.time_perd_type_code_b = tf.time_perd_type_code\\n     AND ta.time_perd_type_code_a = 'MH'),\\nall_finished_run AS\\n (SELECT plc.*\\n    FROM mm_run_prttn_plc plc\\n    JOIN dpf_all_run_vw run\\n      ON run.run_id = plc.run_id\\n   WHERE plc.cntrt_id = {cntrt_id}\\n     AND plc.time_perd_class_code = 'MTH'\\n     AND run.process_status = 'COMPLETED'),\\ntime_perd_before AS\\n (SELECT MAX(mm_time_perd_end_date) mm_time_perd_end_date,\\n         MAX(srce_sys_id) srce_sys_id,\\n         MAX(cntrt_id) cntrt_id,\\n         MAX(fact_Type_code) fact_Type_code,\\n         MAX(prod_prttn_code) prod_prttn_code\\n    FROM all_finished_run\\n   WHERE mm_time_perd_end_date <\\n         (SELECT MIN(time_perd_end_date) FROM curr_run)),\\ntime_perds AS\\n (SELECT \\n                 time_perd_end_date AS mm_time_perd_end_date,\\n                 srce_sys_id,\\n                 cntrt_id,\\n                 fact_type_code,\\n                 prod_prttn_code\\n            FROM curr_run\\n          UNION ALL\\n          SELECT mm_time_perd_end_date,\\n                 srce_sys_id,\\n                 cntrt_id,\\n                 fact_type_code,\\n                 prod_prttn_code\\n            FROM time_perd_before),\\nloaded_prod AS\\n (SELECT \\n  DISTINCT fct.prod_skid, p.prod_lvl_id\\n    FROM mm_tp_mth_fct fct\\n    JOIN mm_prod_dim p \\n      ON p.srce_sys_id = fct.srce_sys_id \\n     AND p.prod_skid = fct.prod_skid\\n    JOIN time_perds tp\\n      ON fct.mm_time_perd_end_date = tp.mm_time_perd_end_date\\n     AND fct.srce_sys_id = tp.srce_sys_id\\n     AND fct.cntrt_id = tp.cntrt_id\\n     AND fct.fact_Type_code = tp.fact_type_code\\n     AND fct.prod_prttn_code = tp.prod_prttn_code),\\nxref AS\\n (SELECT DISTINCT prod_lvl_id\\n    FROM tier1_prod_cxref xref\\n    JOIN loaded_prod\\n      ON xref.prod_skid = loaded_prod.prod_skid),\\nprod_cur AS\\n (SELECT DISTINCT prod_lvl_id\\n    FROM tier1_prod_gav),\\nhier_strct AS \\n (SELECT s.strct_code, \\n         s.strct_name, \\n         sl.lvl_num, \\n         a.attr_name,\\n         sl.strct_lvl_id\\n    FROM mm_strct_lkp s\\n    JOIN mm_strct_lvl_lkp sl on s.strct_id = sl.strct_id\\n    JOIN mm_attr_lkp a on a.attr_id = sl.attr_id\\n   WHERE s.dmnsn_id = 2)\\nSELECT \\n('Missing/delivered product level')  DQ,\\nrow_number() OVER(ORDER BY strct_code, s.lvl_num) AS row_number,\\n       s.strct_code as strct_code, \\n       s.attr_name AS prod_lvl_name,\\n       CASE \\n         WHEN xref.prod_lvl_id IS NULL THEN \\n           'NEW'\\n         WHEN prod_cur.prod_lvl_id IS NULL THEN \\n           'MISSING'\\n         ELSE \\n           'CONTINUE'\\n       END AS sttus_vs_last_time_perd\\n  FROM xref\\n  FULL JOIN prod_cur\\n    ON xref.prod_lvl_id = prod_cur.prod_lvl_id\\n  LEFT JOIN hier_strct  s\\n    ON s.strct_lvl_id = nvl(xref.prod_lvl_id, prod_cur.prod_lvl_id)\\n ORDER BY 1 \\\"\\\"\\\"\\n\\ntier1_miss_dlvrd_prod_lvl = spark.sql(query7)\\n\\n\\n# Combine dataframes and KPI\\ndq1 = tier1_fact_upd_prperd_dev\\ndq2 = tier1_back_data_upd_dev\\ndq3 = tier1_fact_parnt_child_tlr # Product Parent-Children mismatch on Volume Sales (MSU)\\ndq4 = tier1_fact_top_lvl_msm  #  Top level Volume/Value Sales mismatch between hierarchies\\ndq5 = tier1_map_fact_vld_data_neg  # Negative fact values\\ndq6 = tier1_miss_fact_parnt_data #Missing fact data for parent product level\\ndq7 = tier1_miss_dlvrd_prod_lvl # Missing/delivered product level\\n\\ndq_combine = dq1.unionByName(dq2, True).unionByName(dq3, True).unionByName(dq4, True).unionByName(dq4, True).unionByName(dq6, True).unionByName(dq7, True)\\n\\ndata = []\\ndq1_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Unexpected change vs. previous period or year ago' \\\", '', 'false', 'Unexpected change vs. previous period or year ago', 100 )\\ndata.append(dq1_val)\\ndq2_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Unexpected backdata difference' \\\", '', 'false', 'Unexpected backdata difference', 100 )\\ndata.append(dq2_val)\\ndq3_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Product Parent-Children mismatch on Volume Sales (MSU)' \\\", '', 'false', 'Product Parent-Children mismatch on Volume Sales (MSU)', 100 )\\ndata.append(dq3_val)\\ndq4_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Top level Volume/Value Sales mismatch between hierarchies' \\\", '', 'false', 'Top level Volume/Value Sales mismatch between hierarchies', 100 )\\ndata.append(dq4_val)\\ndq5_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Negative fact values' \\\", '', 'false', 'Negative fact values', 100 )\\ndata.append(dq5_val)\\ndq6_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Missing fact data for parent product level' \\\", '', 'false', 'Missing fact data for parent product level', 100 )\\ndata.append(dq6_val)\\ndq7_val = ('DQ', 'SQL Validation KPI', \\\"DQ <> 'Missing/delivered product level' \\\", '', 'false', 'Missing/delivered product level', 100 )\\ndata.append(dq7_val)\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\nschema_for_kpi = StructType([ \\n    StructField(\\\"column\\\",StringType(),True),\\n    StructField(\\\"kpi_type\\\",StringType(),True),\\n    StructField(\\\"param_1\\\",StringType(),True),\\n    StructField(\\\"param_2\\\",StringType(),True),\\n    StructField(\\\"fail_on_error\\\",StringType(),True),\\n    StructField(\\\"check_description\\\",StringType(),True),\\n    StructField(\\\"target\\\",StringType(),True)\\n  ])\\ndf_business_val = spark.createDataFrame(data, schema_for_kpi)\\n\\ndict_all_dfs['dq_combine_bv'] = {\\\"df_object\\\" :dq_combine}\\ndf_output_dict['dq_combine_bv'] = dq_combine\\n\\ndict_all_dfs['df_business_val'] = {\\\"df_object\\\" :df_business_val}\\ndf_output_dict['df_business_val'] = df_business_val\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dqm_cntrt_mkt\"\n    },\n    {\n      \"name\": \"df_dqm_calc_index\"\n    },\n    {\n      \"name\": \"tier1_prod_gav\"\n    },\n    {\n      \"name\": \"tier1_fct_skid\"\n    },\n    {\n      \"name\": \"tier1_fct_smn_m\"\n    },\n    {\n      \"name\": \"tier1_fct_dvm_100_measr\"\n    },\n    {\n      \"name\": \"tier1_measr_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_time_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_prod_cxref\"\n    },\n    {\n      \"name\": \"tier1_mkt_dsdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_business_val\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "FL MM_TIME_PERD_ASSOC_TYPE_VW",
      "predecessorName": "Business Validations - Checks",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_TIME_PERD_ASSOC_TYPE_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_time_perd_assoc_type\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "relMM_TIME_PERD_ASSOC_TYPE_VW/",
      "predecessorName": "FL MM_TIME_PERD_ASSOC_TYPE_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_TIME_PERD_ASSOC_TYPE_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "FL MM_TIME_PERD_ASSOC_VW",
      "predecessorName": "relMM_TIME_PERD_ASSOC_TYPE_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_TIME_PERD_ASSOC_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_time_perd_assoc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "REL MM_TIME_PERD_ASSOC_VW/",
      "predecessorName": "FL MM_TIME_PERD_ASSOC_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_TIME_PERD_ASSOC_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Business Validations and Report Generation",
      "predecessorName": "REL MM_TIME_PERD_ASSOC_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n#Variables\\n\\ntier1_vendr_id = <<VENDOR_ID>>\\ntier1_fact_type_code = 'TP'\\ncntrt_id = <<CNTRT_ID>>\\ncntry_id = '<<ISO_CNTRY_CODE>>'\\nrun_id = <<PROCESS_RUN_KEY>>\\nsrce_sys_id = <<SRCE_SYS_ID>>\\ntier1_categ_id = '<<CATEGORY_ID>>'\\ntime_pd_class_code = '<<TIME_PERD_CLASS_CODE>>'\\ntime_pd_type_cd = '<<TIME_PERD_TYPE_CODE>>'\\n\\npath = '<@@PATH1@@>'\\n\\n#Summary of Report\\ndf_file_struct_summary = dict_all_dfs['df_file_struct_summary'][\\\"df_object\\\"]\\ndf_ref_vendors_summary = dict_all_dfs['df_ref_vendors_summary'][\\\"df_object\\\"]\\ndf_fyi_summary = dict_all_dfs['df_fyi_summary'][\\\"df_object\\\"]\\ndf_ref_summary = dict_all_dfs['df_ref_summary'][\\\"df_object\\\"]\\n# Dataframes from Business Validation Step\\n\\ntier1_dqm_cntrt_mkt = dict_all_dfs['df_dqm_cntrt_mkt'][\\\"df_object\\\"]\\ntier1_dqm_cntrt_mkt.createOrReplaceTempView('tier1_dqm_cntrt_mkt')\\n\\ntier1_dqm_calc_index = dict_all_dfs['df_dqm_calc_index'][\\\"df_object\\\"]\\ntier1_dqm_calc_index.createOrReplaceTempView('tier1_dqm_calc_index')\\n\\n# Dataframes from prior steps\\n\\ntier1_prod_gav = dict_all_dfs['tier1_prod_gav'][\\\"df_object\\\"]\\ntier1_prod_gav.createOrReplaceTempView('tier1_prod_gav')\\n\\ntier1_fct_skid = dict_all_dfs['tier1_fct_skid'][\\\"df_object\\\"]\\ntier1_fct_skid.createOrReplaceTempView('tier1_fct_skid')\\n\\ntier1_fct_smn_m = dict_all_dfs['tier1_fct_smn_m'][\\\"df_object\\\"]\\ntier1_fct_smn_m.createOrReplaceTempView('tier1_fct_smn_m')\\n\\ntier1_fct_dvm_100_measr = dict_all_dfs['tier1_fct_dvm_100_measr'][\\\"df_object\\\"]\\ntier1_fct_dvm_100_measr.createOrReplaceTempView('tier1_fct_dvm_100_measr')\\n\\ntier1_measr_mtrlz_tbl = dict_all_dfs['tier1_measr_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_measr_mtrlz_tbl.createOrReplaceTempView('tier1_measr_mtrlz_tbl')\\n\\ntier1_time_mtrlz_tbl = dict_all_dfs['tier1_time_mtrlz_tbl'][\\\"df_object\\\"]\\ntier1_time_mtrlz_tbl.createOrReplaceTempView('tier1_time_mtrlz_tbl')\\n\\n\\ntier1_prod_cxref =  dict_all_dfs['tier1_prod_cxref'][\\\"df_object\\\"]\\ntier1_prod_cxref.createOrReplaceTempView('tier1_prod_cxref')\\n\\ntier1_mkt_dsdim =  dict_all_dfs['tier1_mkt_dsdim'][\\\"df_object\\\"]\\ntier1_mkt_dsdim.createOrReplaceTempView('tier1_mkt_dsdim') #df_mkt_as\\n\\n#que = \\\"\\\"\\\"select *, (cast(nvl(mkt_skid_2,mkt_skid_1) as INTEGER)) as mkt_skid from tier1_mkt_dsdim\\\"\\\"\\\"\\n#tier1_mkt_dsdim = spark.sql(que)\\n#tier1_mkt_dsdim.createOrReplaceTempView('tier1_mkt_dsdim') #df_mkt_as\\n\\n# Tables to be loaded\\n\\nmm_mkt_dim = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_MKT_DIM_VW/')\\nmm_mkt_dim.createOrReplaceTempView('mm_mkt_dim')\\n\\nmm_time_perd_fdim = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_TIME_PERD_FDIM_VW/')\\nmm_time_perd_fdim.createOrReplaceTempView('mm_time_perd_fdim')\\n\\n#mm_time_perd_assoc_type = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_TYPE_VW/')\\ndf_mm_time_perd_assoc_type =  dict_all_dfs['df_mm_time_perd_assoc_type'][\\\"df_object\\\"]\\ndf_mm_time_perd_assoc_type.createOrReplaceTempView('mm_time_perd_assoc_type')\\n\\n#mm_time_perd_assoc = spark.read.format('parquet').load(f'/mnt/{path}/MM_TIME_PERD_ASSOC_VW/')\\ndf_mm_time_perd_assoc =  dict_all_dfs['df_mm_time_perd_assoc'][\\\"df_object\\\"]\\ndf_mm_time_perd_assoc.createOrReplaceTempView('mm_time_perd_assoc')\\n\\nmm_dvm_run_strct_lvl_plc = spark.read.format('delta').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/mm_dvm_run_strct_lvl_plc/')\\nmm_dvm_run_strct_lvl_plc.createOrReplaceTempView('mm_dvm_run_strct_lvl_plc')\\n\\nmm_time_perd = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/TIME_PERD_SDADS/')\\nmm_time_perd.createOrReplaceTempView('mm_time_perd')\\n\\nmm_dvm_run_strct_plc = spark.read.format('delta').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/mm_dvm_run_strct_plc/')\\nmm_dvm_run_strct_plc.createOrReplaceTempView('mm_dvm_run_strct_plc')\\n\\nmm_run_prttn_plc = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_RUN_PRTTN_PLC/')\\nmm_run_prttn_plc.createOrReplaceTempView('mm_run_prttn_plc')\\n\\n#mm_tp_mth_fct = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_TP_MTH_FCT/')\\nmm_tp_fct = dict_all_dfs['df_fact'][\\\"df_object\\\"]\\nmm_tp_fct.createOrReplaceTempView('mm_tp_mth_fct')\\n\\nmm_prod_dim = spark.read.format('parquet').option(\\\"ignoreCorruptFiles\\\", True).option('ignoreMissingFiles', True).load(f'/mnt/{path}/MM_PROD_DIM_VW/')\\nmm_prod_dim.createOrReplaceTempView('mm_prod_dim')\\n\\n# Tables from PostgreSQL\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\n# mm_strct_lkp\\nmm_strct_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_strct_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_strct_lkp.createOrReplaceTempView('mm_strct_lkp')\\n\\n# mm_strct_lvl_lkp\\nmm_strct_lvl_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_strct_lvl_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\n# mm_attr_lkp\\nmm_attr_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_attr_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_attr_lkp.createOrReplaceTempView('mm_attr_lkp')\\n\\n# mm_process_run_lkp_vw\\ndpf_all_run_vw = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_process_run_lkp_vw\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\ndpf_all_run_vw.createOrReplaceTempView('dpf_all_run_vw')\\n\\n# mm_time_perd_id_lkp\\nmm_time_perd_id_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_time_perd_id_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_time_perd_id_lkp.createOrReplaceTempView('mm_time_perd_id_lkp')\\n\\n# Create mm_time_perd_assoc_tier1_vw\\n\\nquery = f\\\"\\\"\\\"with CAL_TYPE_2 as (\\nSELECT   2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_b,\\n          tb.time_perd_start_date time_perd_start_date_b,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_a,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          ta.time_perd_end_date time_perd_end_date_a,\\n          ta.time_perd_start_date time_perd_start_date_a\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n     WHERE assoc.CAL_TYPE_ID=2),\\nBIMTH_2_MTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_B TIME_PERD_ID_A,\\n          assoc.TIME_PERD_ID_A TIME_PERD_ID_B,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_a,\\n          tb.time_perd_end_date time_perd_end_date_A,\\n          tb.time_perd_start_date time_perd_start_date_A\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\nMTH_2_BIMTH AS (\\n SELECT  2 CAL_TYPE_ID,\\n          assoc.TIME_PERD_ID_A ,\\n          assoc.TIME_PERD_ID_B ,\\n          assoc.TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_A,\\n          ta.time_perd_end_date time_perd_end_date_A,\\n          ta.time_perd_start_date time_perd_start_date_A,\\n          TB.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          TB.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          tb.time_perd_end_date time_perd_end_date_B,\\n          tb.time_perd_start_date time_perd_start_date_B\\n     FROM mm_time_perd_assoc assoc\\n          JOIN mm_time_perd_fdim ta ON ta.time_perd_id = assoc.time_perd_id_a\\n          JOIN mm_time_perd_fdim tb ON tb.time_perd_id = assoc.time_perd_id_b\\n          JOIN mm_time_perd_assoc_type asty\\n             ON asty.time_perd_assoc_type_id = assoc.time_perd_assoc_type_id\\n    WHERE\\n    (TA.TIME_PERD_TYPE_CODE in ('EB','OB')   AND TB.TIME_PERD_CLASS_CODE = 'MTH' AND TB.TIME_PERD_TYPE_CODE = 'MH')\\n AND assoc.CAL_TYPE_ID =2 AND assoc.TIME_PERD_ASSOC_TYPE_ID=1\\n),\\n\\nBW_2_EB AS (SELECT  2 CAL_TYPE_ID,\\n          ta.EVEN_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.EVEN_BIMTH_TIME_PERD_CLASS_COD TIME_PERD_CLASS_CODE_A,\\n          ta.EVEN_BIMTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.EVEN_BIMTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.EVEN_BIMTH_START_DATE TIME_PERD_START_DATE_A\\n     FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='EB'\\n    ),\\n\\nBW_2_MTH AS (SELECT  2 CAL_TYPE_ID,\\n          ta.ODD_BIMTH_TIME_PERD_ID TIME_PERD_ID_A,\\n          ta.TIME_PERD_ID TIME_PERD_ID_B,\\n          1 TIME_PERD_ASSOC_TYPE_ID ,\\n          ta.TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_B,\\n          ta.TIME_PERD_TYPE_CODE TIME_PERD_type_CODE_B,\\n          ta.time_perd_end_date time_perd_end_date_B,\\n          ta.time_perd_start_date time_perd_start_date_B,\\n          ta.MTH_TIME_PERD_CLASS_CODE TIME_PERD_CLASS_CODE_A,\\n          ta.MTH_TIME_PERD_TYPE_CODE TIME_PERD_TYPE_CODE_A,\\n          ta.MTH_END_DATE TIME_PERD_END_DATE_A,\\n          ta.MTH_START_DATE TIME_PERD_START_DATE_A\\n               FROM mm_time_perd_fdim ta\\n    WHERE\\n    TA.TIME_PERD_TYPE_CODE in ('BW') AND  TA.EVEN_BIMTH_TIME_PERD_TYPE_CODE ='MTH'\\n    )\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM CAL_TYPE_2\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BIMTH_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_EB\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID, CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM BW_2_MTH\\nUNION\\nSELECT TIME_PERD_ASSOC_TYPE_ID,CAL_TYPE_ID ,TIME_PERD_ID_A,TIME_PERD_CLASS_CODE_A,TIME_PERD_TYPE_CODE_A,TIME_PERD_START_DATE_A,TIME_PERD_END_DATE_A,\\nTIME_PERD_ID_B,TIME_PERD_CLASS_CODE_B,TIME_PERD_TYPE_CODE_B,TIME_PERD_START_DATE_B,TIME_PERD_END_DATE_B\\nFROM MTH_2_BIMTH\\\"\\\"\\\"\\ndf_mm_time_perd_assoc_tier1_vw= spark.sql(query)\\ndf_mm_time_perd_assoc_tier1_vw.createOrReplaceTempView('mm_time_perd_assoc_tier1_vw')\\n\\n# Validations\\n\\n#1 Unexpected change vs. previous period or year ago\\n\\nquery1 = f\\\"\\\"\\\"SELECT * FROM (\\nWITH fct_detail AS (SELECT fct_val.*,dvm_strct_lvl.IPP_CHECK_VAL,dvm_strct_lvl.IYA_CHECK_VAL\\n  FROM  tier1_dqm_calc_index fct_val\\n                JOIN tier1_prod_cxref xref ON xref.prod_skid = fct_val.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id\\n       JOIN mm_dvm_run_strct_lvl_plc dvm_strct_lvl\\n          ON     prod.prod_lvl_id = dvm_strct_lvl.strct_lvl_id\\n             AND fct_val.run_id = dvm_strct_lvl.run_id\\n WHERE     upper(NEW_TIME_PERD_IND) = 'Y'\\n       AND (    ABS (SALES_MSU_QTY) >= ABSLT_THSHD_VAL\\n            AND ABS (SALES_MLC_AMT) >= ABSLT_THSHD_VAL)\\n       AND (   (ABS (IPP_SU_PCT) >= IPP_CHECK_VAL)\\n            OR (ABS (IYA_SU_PCT) >= IYA_CHECK_VAL)\\n            OR (ABS (IPP_LC_PCT) >= IPP_CHECK_VAL)\\n--            OR (ABS (IYA_LC_PCT) >= IYA_CHECK_VAL)\\n)),\\n fct\\n     AS (SELECT 'IPP' index_type,\\n                'Volume Sales MSU' measure_name,\\n                ipp_su_pct index_value,\\n                SALES_MSU_QTY_PP Previous_value,\\n                SALES_MSU_QTY Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPP_CHECK_VAL CHECK_VAL\\n           FROM fct_detail\\n           WHERE ABS (IPP_SU_PCT) >= IPP_CHECK_VAL\\n         UNION ALL\\n         SELECT 'IPP' index_type,\\n                'Value Sales MLC' measure_name,\\n                ipp_LC_pct,\\n                SALES_MLC_AMT_PP Previous_value,\\n                SALES_MLC_AMT Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPP_CHECK_VAL CHECK_VAL\\n           FROM fct_detail\\n           WHERE ABS (IPP_LC_PCT) >= IPP_CHECK_VAL\\n         UNION ALL\\n         SELECT 'IYA' index_type,\\n                'Volume Sales MSU' measure_name,\\n                IYA_su_pct index_value,\\n                SALES_MSU_QTY_YA Previous_value,\\n                SALES_MSU_QTY Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IYA_CHECK_VAL CHECK_VAL\\n           FROM fct_detail\\n           WHERE ABS (IYA_SU_PCT) >= IYA_CHECK_VAL\\n--         UNION ALL\\n--         SELECT 'IYA' index_type,\\n--                'Value Sales MLC' measure_name,\\n--                IYA_LC_pct index_value,\\n--                SALES_MLC_AMT_YA Previous_value,\\n--                SALES_MLC_AMT Current_Value,\\n--                time_perd_id,\\n--                mkt_skid,\\n--                prod_skid,\\n--                IYA_CHECK_VAL CHECK_VAL\\n--           FROM fct_detail\\n--           WHERE ABS (IYA_LC_PCT) >= IYA_CHECK_VAL\\n)\\n  SELECT \\n  ('Unexpected change vs. previous period or year ago') DQ,\\n  time_perd.time_perd_long_name,                           --Time Period\\n       mkt.mkt_name,                                              --MAP Area Name\\n       mkt_map.extrn_code mkt_extrn_code,                         --Vendor Area Tag\\n       prod.extrn_prod_name prod_long_name,                       --long\\n       prod.attr_code_list prod_attr_code_list,                   --Attributes\\n       index_type,\\n       check_val tolerance_level,\\n       measure_name,                                              -- Measure name\\n       round(index_value,5) INDEX_VALUE,                                               -- Tolerance Level\\n       previous_value,                                            -- Calculated index value\\n       Current_Value\\n  FROM fct\\n       JOIN mm_time_perd_fdim time_perd\\n          ON fct.time_perd_id = time_perd.time_perd_id\\n       JOIN tier1_mkt_dsdim mkt_map ON mkt_map.mkt_skid = fct.mkt_skid\\n       JOIN mm_mkt_dim mkt\\n          ON     mkt.mkt_skid = mkt_map.mkt_skid\\n              JOIN tier1_prod_cxref xref ON xref.prod_skid = fct.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id)\\n\\t   WHERE limit 100\\n\\\"\\\"\\\"\\n\\ntier1_fact_upd_prperd_dev = spark.sql(query1)\\n\\n#2 Unexpected backdata difference\\n\\nquery2 = f\\\"\\\"\\\"SELECT\\n('Unexpected backdata difference')  DQ,\\ntime_perd_long_name as time_perd_long_name,                 \\nmkt_name as mkt_name,                            \\nmkt_extrn_code as mkt_extrn_code,                      \\nprod_long_name as prod_long_name,                      \\nprod_attr_code_list as prod_attr_code_list,                 \\nindex_type,\\ntolerance_level,\\nmeasure_name as measure_name,                        \\nINDEX_VALUE,    \\nprevious_value,                      \\nCurrent_Value\\nFROM (\\nWITH fct_detail AS (SELECT fct_val.*,dvm_strct_lvl.IPD_CHECK_VAL\\n  FROM tier1_dqm_calc_index fct_val\\n             JOIN tier1_prod_cxref xref ON xref.prod_skid = fct_val.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id\\n       JOIN mm_dvm_run_strct_lvl_plc dvm_strct_lvl\\n          ON     prod.prod_lvl_id = dvm_strct_lvl.strct_lvl_id\\n             AND fct_val.run_id = dvm_strct_lvl.run_id\\n WHERE    upper( PD_TIME_PERD_IND) = 'Y'\\n       AND (    ABS (SALES_MSU_QTY) >= ABSLT_THSHD_VAL\\n            AND ABS (SALES_MLC_AMT) >= ABSLT_THSHD_VAL)\\n       AND (   (ABS (IPD_SU_PCT) >= IPD_CHECK_VAL)\\n            OR (ABS (IPD_LC_PCT) >= IPD_CHECK_VAL))),\\n fct\\n     AS (SELECT 'IPD' index_type,\\n                'Volume Sales MSU' measure_name,\\n                ipd_su_pct \\n                index_value,\\n                SALES_MSU_QTY_PD Previous_value,\\n                SALES_MSU_QTY Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPD_CHECK_VAL CHECK_VAL\\n           FROM fct_detail \\n           WHERE ABS (IPD_SU_PCT) >= IPD_CHECK_VAL\\n         UNION ALL\\n         SELECT 'IPD' index_type,\\n                'Value Sales MLC' measure_name,\\n                ipd_lc_pct index_value,\\n                SALES_MLC_AMT_PD Previous_value,\\n                SALES_MLC_AMT Current_Value,\\n                time_perd_id,\\n                mkt_skid,\\n                prod_skid,\\n                IPD_CHECK_VAL CHECK_VAL\\n           FROM fct_detail \\n           WHERE ABS (IPD_LC_PCT) >= IPD_CHECK_VAL)         \\nSELECT \\ntime_perd.time_perd_long_name,                             --Time Period\\n       mkt.mkt_name,                                              --MAP Area Name\\n       mkt_map.extrn_code mkt_extrn_code,                         --Vendor Area Tag\\n       prod.extrn_prod_name prod_long_name,                       --long\\n       prod.attr_code_list prod_attr_code_list,                   --Attributes\\n       index_type,\\n       check_val tolerance_level,\\n       measure_name,                                           -- Measure name\\n       round(index_value,5) INDEX_VALUE,                                            -- Tolerance Level\\n       previous_value,                                         -- Calculated index value\\n       Current_Value\\n  FROM fct\\n       JOIN mm_time_perd_fdim time_perd\\n          ON fct.time_perd_id = time_perd.time_perd_id\\n       JOIN tier1_mkt_dsdim mkt_map ON mkt_map.mkt_skid = fct.mkt_skid\\n       JOIN mm_mkt_dim mkt\\n          ON     mkt.mkt_skid = mkt_map.mkt_skid\\n              JOIN tier1_prod_cxref xref ON xref.prod_skid = fct.prod_skid\\n             JOIN tier1_prod_gav prod on prod.extrn_prod_id = xref.extrn_prod_id)\\n       WHERE limit 100\\\"\\\"\\\"\\n\\ntier1_back_data_upd_dev = spark.sql(query2)\\n\\n# Product Parent-Children mismatch on Volume Sales (MSU)\\n\\nquery3 = f\\\"\\\"\\\" SELECT ('Product Parent-Children mismatch on Volume Sales (MSU)')  DQ, * FROM (\\n  WITH thr AS\\n  (SELECT MM_DVM_RUN_STRCT_PLC.PARNT_CHILD_CHECK_VAL FROM mm_dvm_run_strct_plc where run_id = {run_id}),\\n   mkt_top_node\\n     AS (SELECT /*+ materialize */ \\n               cntrt_id, mkt_top_node_skid\\n           FROM tier1_dqm_cntrt_mkt\\n          WHERE cntrt_id = {cntrt_id}),\\n     prod\\n     AS (SELECT /*+ materialize */\\n               EXTRN_PROD_ATTR_VAL_LIST,\\n\\t\\t\\t   extrn_prod_name,\\n                extrn_code,\\n                substring_index(extrn_prod_attr_val_list,' ' ,length(extrn_prod_attr_val_list)-length(replace(extrn_prod_attr_val_list,\\\" \\\",\\\"\\\"))) parnt_extrn_prod_attr_val_list\\n           FROM tier1_prod_gav),\\n     fct\\n     AS (SELECT fct.time_perd_id,\\n\\t            fct.mkt_skid,\\n\\t            fct.prod_Extrn_code,\\n                fct.mkt_Extrn_code,\\n                fct.TIME_EXTRN_CODE,\\n              fct.srce_sys_id,\\n              fct.cntrt_id,\\n\\t\\t\\t\\tprod.extrn_prod_name,\\n                prod.EXTRN_PROD_ATTR_VAL_LIST,\\n                prod.PARNT_EXTRN_PROD_ATTR_VAL_LIST,\\n                SALES_MSU_QTY\\n           FROM tier1_fct_skid fct\\n                JOIN prod ON prod.extrn_code = fct.prod_Extrn_code\\n          WHERE fct.mkt_skid = (SELECT  mkt_top_node_skid FROM mkt_top_node)),\\n     fct_agg \\n     AS (  SELECT fct.mkt_Extrn_code,\\n                  fct.TIME_EXTRN_CODE,\\n                  prod.PARNT_EXTRN_PROD_ATTR_VAL_LIST,\\n                  SUM (SALES_MSU_QTY) SALES_MSU_QTY\\n             FROM tier1_fct_skid fct\\n                  JOIN prod ON prod.extrn_code = fct.prod_Extrn_code\\n            WHERE fct.mkt_skid = (SELECT mkt_top_node_skid FROM mkt_top_node)\\n         GROUP BY fct.mkt_Extrn_code,\\n                  fct.TIME_EXTRN_CODE,\\n                  prod.PARNT_EXTRN_PROD_ATTR_VAL_LIST)\\n SELECT                                                       /* parallel(8) */\\n       tp.long_name,                           --Time Period\\n       mkt.mkt_name,                                              --MAP Area Name\\n       fct_parnt.mkt_Extrn_code mkt_extrn_code,                         --Vendor Area Tag\\n       fct_parnt.extrn_prod_name parent_prod_long_name,                       --long\\n       fct_parnt.EXTRN_PROD_ATTR_VAL_LIST parent_prod_attr_code_list,                   --Attributes\\n       fct_child.extrn_prod_name child_prod_long_name,                       --long\\n       fct_child.EXTRN_PROD_ATTR_VAL_LIST child_prod_attr_code_list,                   --Attributes\\n       fct_child.SALES_MSU_QTY child_SALES_MSU_QTY,\\n\\t   fct_parnt.SALES_MSU_QTY PARENT_SALES_MSU_QTY,\\n\\t   fct_agg.SALES_MSU_QTY sum_SALES_MSU_QTY,\\n\\t   ABS(fct_parnt.SALES_MSU_QTY - fct_agg.SALES_MSU_QTY) diff_SALES_MSU_QTY,\\n\\t   DECODE(fct_parnt.SALES_MSU_QTY,0,'-',round(ABS(fct_parnt.SALES_MSU_QTY - fct_agg.SALES_MSU_QTY)/fct_parnt.SALES_MSU_QTY*100,6)) PER_diff_SALES_MSU_QTY,\\n       PARNT_CHILD_CHECK_VAL tolerance_level\\n   FROM fct fct_parnt\\n     LEFT JOIN thr ON 1=1\\n     JOIN fct_agg\\n          ON     fct_parnt.mkt_extrn_code = fct_agg.mkt_extrn_code\\n             AND fct_parnt.time_extrn_code = fct_agg.time_extrn_code\\n             AND fct_parnt.extrn_prod_attr_val_list =\\n                    fct_agg.PARNT_EXTRN_PROD_ATTR_VAL_LIST\\n             AND (ABS(fct_parnt.SALES_MSU_QTY - fct_agg.SALES_MSU_QTY) >  PARNT_CHILD_CHECK_VAL)\\n     JOIN fct fct_child ON fct_parnt.mkt_skid = fct_child.mkt_skid AND fct_parnt.time_perd_id = fct_child.time_perd_id and fct_child.PARNT_EXTRN_PROD_ATTR_VAL_LIST = fct_parnt.extrn_prod_attr_val_list\\n\\t   JOIN mm_time_perd tp ON fct_parnt.time_perd_id = tp.time_perd_id\\n\\t   JOIN mm_mkt_dim mkt ON fct_parnt.mkt_skid = mkt.mkt_skid AND mkt.cntrt_id = 0 AND\\n     fct_parnt.srce_sys_id = mkt.srce_sys_id \\n   ORDER BY diff_SALES_MSU_QTY DESC, mkt_name, long_name, parent_prod_attr_code_list\\t \\n)\\n\\t    WHERE limit 100\\\"\\\"\\\"\\n     \\ntier1_fact_parnt_child_tlr = spark.sql(query3)\\n\\n# 4 - Top level Volume/Value Sales mismatch between hierarchies\\n\\nquery4 = f\\\"\\\"\\\"SELECT\\n('Top level Volume/Value Sales mismatch between hierarchies') DQ,\\nTIME_EXTRN_CODE as TIME_EXTRN_CODE,\\nEXTRN_MKT_NAME as EXTRN_MKT_NAME,\\nMKT_EXTRN_CODE as MKT_EXTRN_CODE,\\nHIER as HIER,\\nSALES_MLC_AMT,\\nSALES_MSU_QTY\\nFROM (SELECT DISTINCT fct.TIME_EXTRN_CODE, mdim.EXTRN_MKT_NAME, fct.MKT_EXTRN_CODE, prod.ATTR_CODE_1||'_H'||prod.ATTR_CODE_0 HIER, fct.SALES_MLC_AMT, fct.SALES_MSU_QTY \\n    from tier1_fct_smn_m fct join tier1_prod_gav prod\\n    on prod.extrn_code= fct.prod_Extrn_code\\n    AND prod.lvl_num=1 JOIN  tier1_fct_smn_m fct2 on\\n    fct2.mkt_Extrn_code = fct.mkt_Extrn_code\\n    and fct2.TIME_EXTRN_CODE = fct.TIME_EXTRN_CODE\\n    and( round(fct.SALES_MLC_AMT,3) <> round(fct2.SALES_MLC_AMT,3)\\n    or round(fct.SALES_MSU_QTY,3) <> round(fct2.SALES_MSU_QTY,3))\\n    join tier1_prod_gav prod2 on prod2.extrn_code= fct2.prod_Extrn_code\\n    join tier1_mkt_dsdim mdim on mdim.extrn_code = fct.mkt_extrn_code\\n    where prod2.attr_Code_0!= prod.attr_Code_0 -- another hirarchy\\n    and prod2.lvl_num = 1)\\n\\tWHERE limit 100\\\"\\\"\\\"\\n \\ntier1_fact_top_lvl_msm = spark.sql(query4)\\n\\n\\n#5 - Negative fact values\\n\\nquery5 = f\\\"\\\"\\\"\\nSELECT \\n('Negative fact values')  DQ,\\nLINE_NUM,\\nTIME_EXTRN_CODE TIME_EXTRN_CODE,\\nMKT_EXTRN_CODE MKT_EXTRN_CODE,\\nPROD_EXTRN_CODE PROD_EXTRN_CODE,\\nMEASURE MEASURE,\\nVALUE,\\nMINIM,\\nRNV\\nFROM (\\nWITH neg AS (\\nSELECT mm_dvm_run_strct_plc.NEG_CHECK_VAL FROM mm_dvm_run_strct_plc where run_id = {run_id}\\n),\\nwrg AS (SELECT * FROM (\\nSELECT * FROM tier1_fct_dvm_100_measr LEFT JOIN neg ON 1=1 WHERE\\nFACT_AMT_1<NEG_CHECK_VAL OR FACT_AMT_2<NEG_CHECK_VAL OR FACT_AMT_3<NEG_CHECK_VAL OR FACT_AMT_4<NEG_CHECK_VAL OR\\nFACT_AMT_5<NEG_CHECK_VAL OR FACT_AMT_6<NEG_CHECK_VAL OR FACT_AMT_7<NEG_CHECK_VAL OR FACT_AMT_8<NEG_CHECK_VAL OR\\nFACT_AMT_9<NEG_CHECK_VAL OR FACT_AMT_10<NEG_CHECK_VAL OR FACT_AMT_11<NEG_CHECK_VAL OR FACT_AMT_12<NEG_CHECK_VAL OR\\nFACT_AMT_13<NEG_CHECK_VAL OR FACT_AMT_14<NEG_CHECK_VAL OR FACT_AMT_15<NEG_CHECK_VAL OR FACT_AMT_16<NEG_CHECK_VAL OR\\nFACT_AMT_17<NEG_CHECK_VAL OR FACT_AMT_18<NEG_CHECK_VAL OR FACT_AMT_19<NEG_CHECK_VAL OR FACT_AMT_20<NEG_CHECK_VAL OR\\nFACT_AMT_21<NEG_CHECK_VAL OR FACT_AMT_22<NEG_CHECK_VAL OR FACT_AMT_23<NEG_CHECK_VAL OR FACT_AMT_24<NEG_CHECK_VAL OR\\nFACT_AMT_25<NEG_CHECK_VAL OR FACT_AMT_26<NEG_CHECK_VAL OR FACT_AMT_27<NEG_CHECK_VAL OR FACT_AMT_28<NEG_CHECK_VAL OR\\nFACT_AMT_29<NEG_CHECK_VAL OR FACT_AMT_30<NEG_CHECK_VAL OR FACT_AMT_31<NEG_CHECK_VAL OR FACT_AMT_32<NEG_CHECK_VAL OR\\nFACT_AMT_33<NEG_CHECK_VAL OR FACT_AMT_34<NEG_CHECK_VAL OR FACT_AMT_35<NEG_CHECK_VAL OR FACT_AMT_36<NEG_CHECK_VAL OR\\nFACT_AMT_37<NEG_CHECK_VAL OR FACT_AMT_38<NEG_CHECK_VAL OR FACT_AMT_39<NEG_CHECK_VAL OR FACT_AMT_40<NEG_CHECK_VAL OR\\nFACT_AMT_41<NEG_CHECK_VAL OR FACT_AMT_42<NEG_CHECK_VAL OR FACT_AMT_43<NEG_CHECK_VAL OR FACT_AMT_44<NEG_CHECK_VAL OR\\nFACT_AMT_45<NEG_CHECK_VAL OR FACT_AMT_46<NEG_CHECK_VAL OR FACT_AMT_47<NEG_CHECK_VAL OR FACT_AMT_48<NEG_CHECK_VAL OR\\nFACT_AMT_49<NEG_CHECK_VAL OR FACT_AMT_50<NEG_CHECK_VAL OR FACT_AMT_51<NEG_CHECK_VAL OR FACT_AMT_52<NEG_CHECK_VAL OR\\nFACT_AMT_53<NEG_CHECK_VAL OR FACT_AMT_54<NEG_CHECK_VAL OR FACT_AMT_55<NEG_CHECK_VAL OR FACT_AMT_56<NEG_CHECK_VAL OR\\nFACT_AMT_57<NEG_CHECK_VAL OR FACT_AMT_58<NEG_CHECK_VAL OR FACT_AMT_59<NEG_CHECK_VAL OR FACT_AMT_60<NEG_CHECK_VAL OR\\nFACT_AMT_61<NEG_CHECK_VAL OR FACT_AMT_62<NEG_CHECK_VAL OR FACT_AMT_63<NEG_CHECK_VAL OR FACT_AMT_64<NEG_CHECK_VAL OR\\nFACT_AMT_65<NEG_CHECK_VAL OR FACT_AMT_66<NEG_CHECK_VAL OR FACT_AMT_67<NEG_CHECK_VAL OR FACT_AMT_68<NEG_CHECK_VAL OR\\nFACT_AMT_69<NEG_CHECK_VAL OR FACT_AMT_70<NEG_CHECK_VAL OR FACT_AMT_71<NEG_CHECK_VAL OR FACT_AMT_72<NEG_CHECK_VAL OR\\nFACT_AMT_73<NEG_CHECK_VAL OR FACT_AMT_74<NEG_CHECK_VAL OR FACT_AMT_75<NEG_CHECK_VAL OR FACT_AMT_76<NEG_CHECK_VAL OR\\nFACT_AMT_77<NEG_CHECK_VAL OR FACT_AMT_78<NEG_CHECK_VAL OR FACT_AMT_79<NEG_CHECK_VAL OR FACT_AMT_80<NEG_CHECK_VAL OR\\nFACT_AMT_81<NEG_CHECK_VAL OR FACT_AMT_82<NEG_CHECK_VAL OR FACT_AMT_83<NEG_CHECK_VAL OR FACT_AMT_84<NEG_CHECK_VAL OR\\nFACT_AMT_85<NEG_CHECK_VAL OR FACT_AMT_86<NEG_CHECK_VAL OR FACT_AMT_87<NEG_CHECK_VAL OR FACT_AMT_88<NEG_CHECK_VAL OR\\nFACT_AMT_89<NEG_CHECK_VAL OR FACT_AMT_90<NEG_CHECK_VAL OR FACT_AMT_91<NEG_CHECK_VAL OR FACT_AMT_92<NEG_CHECK_VAL OR\\nFACT_AMT_93<NEG_CHECK_VAL OR FACT_AMT_94<NEG_CHECK_VAL OR FACT_AMT_95<NEG_CHECK_VAL OR FACT_AMT_96<NEG_CHECK_VAL OR\\nFACT_AMT_97<NEG_CHECK_VAL OR FACT_AMT_98<NEG_CHECK_VAL OR FACT_AMT_99<NEG_CHECK_VAL OR FACT_AMT_100<NEG_CHECK_VAL)\\nWHERE limit 100\\n),\\nmsrs AS (\\nSELECT msr.*, ROW_NUMBER() OVER (ORDER BY LINE_NUM) rn FROM tier1_measr_mtrlz_tbl msr\\n)\\n\\nSELECT * FROM (\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 1) AS MEASURE, FACT_AMT_1 AS VALUE FROM wrg WHERE FACT_AMT_1<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 2) AS MEASURE, FACT_AMT_2 AS VALUE FROM wrg WHERE FACT_AMT_2<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 3) AS MEASURE, FACT_AMT_3 AS VALUE FROM wrg WHERE FACT_AMT_3<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 4) AS MEASURE, FACT_AMT_4 AS VALUE FROM wrg WHERE FACT_AMT_4<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 5) AS MEASURE, FACT_AMT_5 AS VALUE FROM wrg WHERE FACT_AMT_5<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 6) AS MEASURE, FACT_AMT_6 AS VALUE FROM wrg WHERE FACT_AMT_6<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 7) AS MEASURE, FACT_AMT_7 AS VALUE FROM wrg WHERE FACT_AMT_7<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 8) AS MEASURE, FACT_AMT_8 AS VALUE FROM wrg WHERE FACT_AMT_8<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 9) AS MEASURE, FACT_AMT_9 AS VALUE FROM wrg WHERE FACT_AMT_9<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 10) AS MEASURE, FACT_AMT_10 AS VALUE FROM wrg WHERE FACT_AMT_10<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 11) AS MEASURE, FACT_AMT_11 AS VALUE FROM wrg WHERE FACT_AMT_11<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 12) AS MEASURE, FACT_AMT_12 AS VALUE FROM wrg WHERE FACT_AMT_12<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 13) AS MEASURE, FACT_AMT_13 AS VALUE FROM wrg WHERE FACT_AMT_13<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 14) AS MEASURE, FACT_AMT_14 AS VALUE FROM wrg WHERE FACT_AMT_14<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 15) AS MEASURE, FACT_AMT_15 AS VALUE FROM wrg WHERE FACT_AMT_15<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 16) AS MEASURE, FACT_AMT_16 AS VALUE FROM wrg WHERE FACT_AMT_16<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 17) AS MEASURE, FACT_AMT_17 AS VALUE FROM wrg WHERE FACT_AMT_17<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 18) AS MEASURE, FACT_AMT_18 AS VALUE FROM wrg WHERE FACT_AMT_18<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 19) AS MEASURE, FACT_AMT_19 AS VALUE FROM wrg WHERE FACT_AMT_19<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 20) AS MEASURE, FACT_AMT_20 AS VALUE FROM wrg WHERE FACT_AMT_20<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 21) AS MEASURE, FACT_AMT_21 AS VALUE FROM wrg WHERE FACT_AMT_21<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 22) AS MEASURE, FACT_AMT_22 AS VALUE FROM wrg WHERE FACT_AMT_22<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 23) AS MEASURE, FACT_AMT_23 AS VALUE FROM wrg WHERE FACT_AMT_23<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 24) AS MEASURE, FACT_AMT_24 AS VALUE FROM wrg WHERE FACT_AMT_24<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 25) AS MEASURE, FACT_AMT_25 AS VALUE FROM wrg WHERE FACT_AMT_25<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 26) AS MEASURE, FACT_AMT_26 AS VALUE FROM wrg WHERE FACT_AMT_26<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 27) AS MEASURE, FACT_AMT_27 AS VALUE FROM wrg WHERE FACT_AMT_27<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 28) AS MEASURE, FACT_AMT_28 AS VALUE FROM wrg WHERE FACT_AMT_28<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 29) AS MEASURE, FACT_AMT_29 AS VALUE FROM wrg WHERE FACT_AMT_29<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 30) AS MEASURE, FACT_AMT_30 AS VALUE FROM wrg WHERE FACT_AMT_30<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 31) AS MEASURE, FACT_AMT_31 AS VALUE FROM wrg WHERE FACT_AMT_31<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 32) AS MEASURE, FACT_AMT_32 AS VALUE FROM wrg WHERE FACT_AMT_32<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 33) AS MEASURE, FACT_AMT_33 AS VALUE FROM wrg WHERE FACT_AMT_33<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 34) AS MEASURE, FACT_AMT_34 AS VALUE FROM wrg WHERE FACT_AMT_34<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 35) AS MEASURE, FACT_AMT_35 AS VALUE FROM wrg WHERE FACT_AMT_35<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 36) AS MEASURE, FACT_AMT_36 AS VALUE FROM wrg WHERE FACT_AMT_36<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 37) AS MEASURE, FACT_AMT_37 AS VALUE FROM wrg WHERE FACT_AMT_37<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 38) AS MEASURE, FACT_AMT_38 AS VALUE FROM wrg WHERE FACT_AMT_38<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 39) AS MEASURE, FACT_AMT_39 AS VALUE FROM wrg WHERE FACT_AMT_39<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 40) AS MEASURE, FACT_AMT_40 AS VALUE FROM wrg WHERE FACT_AMT_40<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 41) AS MEASURE, FACT_AMT_41 AS VALUE FROM wrg WHERE FACT_AMT_41<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 42) AS MEASURE, FACT_AMT_42 AS VALUE FROM wrg WHERE FACT_AMT_42<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 43) AS MEASURE, FACT_AMT_43 AS VALUE FROM wrg WHERE FACT_AMT_43<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 44) AS MEASURE, FACT_AMT_44 AS VALUE FROM wrg WHERE FACT_AMT_44<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 45) AS MEASURE, FACT_AMT_45 AS VALUE FROM wrg WHERE FACT_AMT_45<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 46) AS MEASURE, FACT_AMT_46 AS VALUE FROM wrg WHERE FACT_AMT_46<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 47) AS MEASURE, FACT_AMT_47 AS VALUE FROM wrg WHERE FACT_AMT_47<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 48) AS MEASURE, FACT_AMT_48 AS VALUE FROM wrg WHERE FACT_AMT_48<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 49) AS MEASURE, FACT_AMT_49 AS VALUE FROM wrg WHERE FACT_AMT_49<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 50) AS MEASURE, FACT_AMT_50 AS VALUE FROM wrg WHERE FACT_AMT_50<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 51) AS MEASURE, FACT_AMT_51 AS VALUE FROM wrg WHERE FACT_AMT_51<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 52) AS MEASURE, FACT_AMT_52 AS VALUE FROM wrg WHERE FACT_AMT_52<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 53) AS MEASURE, FACT_AMT_53 AS VALUE FROM wrg WHERE FACT_AMT_53<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 54) AS MEASURE, FACT_AMT_54 AS VALUE FROM wrg WHERE FACT_AMT_54<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 55) AS MEASURE, FACT_AMT_55 AS VALUE FROM wrg WHERE FACT_AMT_55<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 56) AS MEASURE, FACT_AMT_56 AS VALUE FROM wrg WHERE FACT_AMT_56<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 57) AS MEASURE, FACT_AMT_57 AS VALUE FROM wrg WHERE FACT_AMT_57<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 58) AS MEASURE, FACT_AMT_58 AS VALUE FROM wrg WHERE FACT_AMT_58<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 59) AS MEASURE, FACT_AMT_59 AS VALUE FROM wrg WHERE FACT_AMT_59<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 60) AS MEASURE, FACT_AMT_60 AS VALUE FROM wrg WHERE FACT_AMT_60<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 61) AS MEASURE, FACT_AMT_61 AS VALUE FROM wrg WHERE FACT_AMT_61<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 62) AS MEASURE, FACT_AMT_62 AS VALUE FROM wrg WHERE FACT_AMT_62<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 63) AS MEASURE, FACT_AMT_63 AS VALUE FROM wrg WHERE FACT_AMT_63<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 64) AS MEASURE, FACT_AMT_64 AS VALUE FROM wrg WHERE FACT_AMT_64<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 65) AS MEASURE, FACT_AMT_65 AS VALUE FROM wrg WHERE FACT_AMT_65<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 66) AS MEASURE, FACT_AMT_66 AS VALUE FROM wrg WHERE FACT_AMT_66<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 67) AS MEASURE, FACT_AMT_67 AS VALUE FROM wrg WHERE FACT_AMT_67<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 68) AS MEASURE, FACT_AMT_68 AS VALUE FROM wrg WHERE FACT_AMT_68<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 69) AS MEASURE, FACT_AMT_69 AS VALUE FROM wrg WHERE FACT_AMT_69<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 70) AS MEASURE, FACT_AMT_70 AS VALUE FROM wrg WHERE FACT_AMT_70<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 71) AS MEASURE, FACT_AMT_71 AS VALUE FROM wrg WHERE FACT_AMT_71<NEG_CHECK_VAL) ms  \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 72) AS MEASURE, FACT_AMT_72 AS VALUE FROM wrg WHERE FACT_AMT_72<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 73) AS MEASURE, FACT_AMT_73 AS VALUE FROM wrg WHERE FACT_AMT_73<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 74) AS MEASURE, FACT_AMT_74 AS VALUE FROM wrg WHERE FACT_AMT_74<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 75) AS MEASURE, FACT_AMT_75 AS VALUE FROM wrg WHERE FACT_AMT_75<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 76) AS MEASURE, FACT_AMT_76 AS VALUE FROM wrg WHERE FACT_AMT_76<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 77) AS MEASURE, FACT_AMT_77 AS VALUE FROM wrg WHERE FACT_AMT_77<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 78) AS MEASURE, FACT_AMT_78 AS VALUE FROM wrg WHERE FACT_AMT_78<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 79) AS MEASURE, FACT_AMT_79 AS VALUE FROM wrg WHERE FACT_AMT_79<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 80) AS MEASURE, FACT_AMT_80 AS VALUE FROM wrg WHERE FACT_AMT_80<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 81) AS MEASURE, FACT_AMT_81 AS VALUE FROM wrg WHERE FACT_AMT_81<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 82) AS MEASURE, FACT_AMT_82 AS VALUE FROM wrg WHERE FACT_AMT_82<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 83) AS MEASURE, FACT_AMT_83 AS VALUE FROM wrg WHERE FACT_AMT_83<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 84) AS MEASURE, FACT_AMT_84 AS VALUE FROM wrg WHERE FACT_AMT_84<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 85) AS MEASURE, FACT_AMT_85 AS VALUE FROM wrg WHERE FACT_AMT_85<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 86) AS MEASURE, FACT_AMT_86 AS VALUE FROM wrg WHERE FACT_AMT_86<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 87) AS MEASURE, FACT_AMT_87 AS VALUE FROM wrg WHERE FACT_AMT_87<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 88) AS MEASURE, FACT_AMT_88 AS VALUE FROM wrg WHERE FACT_AMT_88<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 89) AS MEASURE, FACT_AMT_89 AS VALUE FROM wrg WHERE FACT_AMT_89<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 90) AS MEASURE, FACT_AMT_90 AS VALUE FROM wrg WHERE FACT_AMT_90<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 91) AS MEASURE, FACT_AMT_91 AS VALUE FROM wrg WHERE FACT_AMT_91<NEG_CHECK_VAL) ms  \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 92) AS MEASURE, FACT_AMT_92 AS VALUE FROM wrg WHERE FACT_AMT_92<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 93) AS MEASURE, FACT_AMT_93 AS VALUE FROM wrg WHERE FACT_AMT_93<NEG_CHECK_VAL) ms   \\nUNION ALL\\n\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 94) AS MEASURE, FACT_AMT_94 AS VALUE FROM wrg WHERE FACT_AMT_94<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 95) AS MEASURE, FACT_AMT_95 AS VALUE FROM wrg WHERE FACT_AMT_95<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 96) AS MEASURE, FACT_AMT_96 AS VALUE FROM wrg WHERE FACT_AMT_96<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 97) AS MEASURE, FACT_AMT_97 AS VALUE FROM wrg WHERE FACT_AMT_97<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 98) AS MEASURE, FACT_AMT_98 AS VALUE FROM wrg WHERE FACT_AMT_98<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 99) AS MEASURE, FACT_AMT_99 AS VALUE FROM wrg WHERE FACT_AMT_99<NEG_CHECK_VAL) ms   \\nUNION ALL\\nSELECT ms.*, MIN(VALUE) OVER (PARTITION BY MEASURE) minim, ROW_NUMBER() OVER (ORDER BY VALUE) rnv  FROM (SELECT LINE_NUM, TIME_EXTRN_CODE, MKT_EXTRN_CODE, PROD_EXTRN_CODE, (SELECT EXTRN_NAME FROM msrs WHERE rn = 100) AS MEASURE, FACT_AMT_100 AS VALUE FROM wrg WHERE FACT_AMT_100<NEG_CHECK_VAL) ms  )\\nWHERE rnv<51\\nORDER BY minim, measure, rnv)\\nWHERE limit 1000 \\\"\\\"\\\"\\n\\ntier1_map_fact_vld_data_neg = spark.sql(query5)\\n\\n\\n# 6 - Missing fact data for parent product level\\nquery6 = f\\\"\\\"\\\"with prod as (\\nselect \\n       extrn_prod_attr_val_list,\\n       extrn_code,\\n       extrn_prod_name,\\n       substring_index(extrn_prod_attr_val_list,' ' ,length(extrn_prod_attr_val_list)-length(replace(extrn_prod_attr_val_list,\\\" \\\",\\\"\\\"))) parnt_extrn_prod_attr_val_list\\n  from tier1_prod_gav\\n),\\nfct as (\\nselect fct.time_perd_id,\\n       fct.mkt_skid,\\n       fct.mkt_extrn_code,\\n       prod.extrn_prod_attr_val_list,\\n       prod.parnt_extrn_prod_attr_val_list,\\n       prod.extrn_prod_name,\\n       fct.sales_msu_qty,\\n       fct.srce_sys_id\\n  from tier1_fct_skid fct\\n  join prod on prod.extrn_code = fct.prod_extrn_code\\n  join tier1_dqm_cntrt_mkt mkt on mkt.mkt_top_node_skid = fct.mkt_skid and mkt.cntrt_id = {cntrt_id}\\n),\\nfct_agg as (\\nselect mkt_skid, time_perd_id, parnt_extrn_prod_attr_val_list,\\n       sum (sales_msu_qty) sales_msu_qty\\n  from fct\\n where instr(parnt_extrn_prod_attr_val_list, ' ') > 0 --exclude top prod lvl as parent\\ngroup by mkt_skid, time_perd_id, parnt_extrn_prod_attr_val_list\\n)\\nselect \\n('Missing fact data for parent product level')  DQ,\\nt.long_name as long_name,\\n       m.mkt_name as mkt_name,\\n       fc.mkt_extrn_code as mkt_extrn_code,\\n       fc.extrn_prod_name as child_prod_long_name,\\n       fc.extrn_prod_attr_val_list as child_prod_attr_code_list,\\n       nvl(fp.extrn_prod_name, '<no parent record is source file>') parent_prod_long_name,\\n       fc.parnt_extrn_prod_attr_val_list as parent_prod_attr_code_list,\\n       fc.sales_msu_qty as child_sales_msu_qty,\\n       fp.sales_msu_qty as parent_sales_msu_qty,\\n       fa.sales_msu_qty as sum_sales_msu_qty\\n  from fct_agg fa\\n  left join fct fc on fa.mkt_skid = fc.mkt_skid and fa.time_perd_id = fc.time_perd_id and fa.parnt_extrn_prod_attr_val_list = fc.parnt_extrn_prod_attr_val_list \\n  left join fct fp on fp.mkt_skid = fa.mkt_skid and fp.time_perd_id = fa.time_perd_id and fp.extrn_prod_attr_val_list = fa.parnt_extrn_prod_attr_val_list \\n  left join mm_time_perd t on fc.time_perd_id = t.time_perd_id\\n  left join mm_mkt_dim m   on fc.mkt_skid = m.mkt_skid and fc.srce_sys_id = m.srce_sys_id and m.cntrt_id = 0 \\n where fp.sales_msu_qty is null and fa.sales_msu_qty is not null\\n order by m.mkt_name, t.long_name, parent_prod_attr_code_list \\\"\\\"\\\"\\n\\ntier1_miss_fact_parnt_data = spark.sql(query6)\\n\\n\\n\\n# 7 - Missing/delivered product level\\n\\nquery7 = f\\\"\\\"\\\"WITH curr_run AS\\n (SELECT /*+ materialize */\\n         DISTINCT \\n         CASE\\n           WHEN tf.time_perd_class_code IN ('{time_pd_class_code}') THEN\\n             tf.time_perd_end_date\\n           ELSE\\n             ta.time_perd_end_date_a\\n         END time_perd_end_date,\\n         {srce_sys_id} srce_sys_id,\\n         {cntrt_id} cntrt_id,\\n         '{tier1_fact_type_code}' fact_type_code,\\n         '{tier1_categ_id}' prod_prttn_code\\n    FROM tier1_time_mtrlz_tbl st\\n    JOIN mm_time_perd_id_lkp l\\n      ON l.extrn_time_perd_id = st.extrn_code\\n     and l.vendr_id = {tier1_vendr_id}\\n    JOIN mm_time_perd_fdim tf\\n      on tf.time_perd_id = l.time_perd_id\\n    LEFT OUTER JOIN mm_time_perd_assoc_tier1_vw ta\\n      ON ta.time_perd_id_b = tf.time_perd_id\\n     AND ta.time_perd_type_code_b = tf.time_perd_type_code\\n     AND ta.time_perd_type_code_a = '{time_pd_type_cd}'),\\nall_finished_run AS\\n (SELECT plc.*\\n    FROM mm_run_prttn_plc plc\\n    JOIN dpf_all_run_vw run\\n      ON run.run_id = plc.run_id\\n   WHERE plc.cntrt_id = {cntrt_id}\\n     AND plc.time_perd_class_code = '{time_pd_class_code}'\\n     AND run.process_status IN( 'FINISHED', 'COMPLETED')),\\ntime_perd_before AS\\n (SELECT MAX(mm_time_perd_end_date) mm_time_perd_end_date,\\n         MAX(srce_sys_id) srce_sys_id,\\n         MAX(cntrt_id) cntrt_id,\\n         MAX(fact_Type_code) fact_Type_code,\\n         MAX(prod_prttn_code) prod_prttn_code\\n    FROM all_finished_run\\n   WHERE mm_time_perd_end_date <\\n         (SELECT MIN(time_perd_end_date) FROM curr_run)),\\ntime_perds AS\\n (SELECT \\n                 time_perd_end_date AS mm_time_perd_end_date,\\n                 srce_sys_id,\\n                 cntrt_id,\\n                 fact_type_code,\\n                 prod_prttn_code\\n            FROM curr_run\\n          UNION ALL\\n          SELECT mm_time_perd_end_date,\\n                 srce_sys_id,\\n                 cntrt_id,\\n                 fact_type_code,\\n                 prod_prttn_code\\n            FROM time_perd_before),\\nloaded_prod AS\\n (SELECT \\n  DISTINCT fct.prod_skid, p.prod_lvl_id\\n    FROM mm_tp_mth_fct fct\\n    JOIN mm_prod_dim p \\n      ON p.srce_sys_id = fct.srce_sys_id \\n     AND p.prod_skid = fct.prod_skid\\n    JOIN time_perds tp\\n      ON fct.mm_time_perd_end_date = tp.mm_time_perd_end_date\\n     AND fct.srce_sys_id = tp.srce_sys_id\\n     AND fct.cntrt_id = tp.cntrt_id\\n     AND fct.fact_Type_code = tp.fact_type_code\\n     AND fct.prod_prttn_code = tp.prod_prttn_code),\\nxref AS\\n (SELECT DISTINCT prod_lvl_id\\n    FROM tier1_prod_cxref xref\\n    JOIN loaded_prod\\n      ON xref.prod_skid = loaded_prod.prod_skid),\\nprod_cur AS\\n (SELECT DISTINCT prod_lvl_id\\n    FROM tier1_prod_gav),\\nhier_strct AS \\n (SELECT s.strct_code, \\n         s.strct_name, \\n         sl.lvl_num, \\n         a.attr_name,\\n         sl.strct_lvl_id\\n    FROM mm_strct_lkp s\\n    JOIN mm_strct_lvl_lkp sl on s.strct_id = sl.strct_id\\n    JOIN mm_attr_lkp a on a.attr_id = sl.attr_id\\n   WHERE s.dmnsn_id = 2)\\nSELECT \\n('Missing/delivered product level')  DQ,\\nrow_number() OVER(ORDER BY strct_code, s.lvl_num) AS row_number,\\n       s.strct_code as strct_code, \\n       s.attr_name AS prod_lvl_name,\\n       CASE \\n         WHEN xref.prod_lvl_id IS NULL THEN \\n           'NEW'\\n         WHEN prod_cur.prod_lvl_id IS NULL THEN \\n           'MISSING'\\n         ELSE \\n           'CONTINUE'\\n       END AS sttus_vs_last_time_perd\\n  FROM xref\\n  FULL JOIN prod_cur\\n    ON xref.prod_lvl_id = prod_cur.prod_lvl_id\\n  LEFT JOIN hier_strct  s\\n    ON s.strct_lvl_id = nvl(xref.prod_lvl_id, prod_cur.prod_lvl_id)\\n ORDER BY 1 \\\"\\\"\\\"\\n\\ntier1_miss_dlvrd_prod_lvl = spark.sql(query7)\\n\\n\\n# Combine dataframes and KPI\\ndq1 = tier1_fact_upd_prperd_dev\\ndq2 = tier1_back_data_upd_dev\\ndq3 = tier1_fact_parnt_child_tlr # Product Parent-Children mismatch on Volume Sales (MSU)\\ndq4 = tier1_fact_top_lvl_msm  #  Top level Volume/Value Sales mismatch between hierarchies\\ndq5 = tier1_map_fact_vld_data_neg  # Negative fact values\\ndq6 = tier1_miss_fact_parnt_data #Missing fact data for parent product level\\ndq7 = tier1_miss_dlvrd_prod_lvl.filter('sttus_vs_last_time_perd != \\\"CONTINUE\\\"') # Missing/delivered product level\\n\\ndq_combine = dq1.unionByName(dq2, True).unionByName(dq3, True).unionByName(dq4, True).unionByName(dq4, True).unionByName(dq5, True).unionByName(dq6, True).unionByName(dq7, True)\\n\\n\\n#Report Generation\\n\\nimport subprocess\\nimport os\\nimport shutil\\nimport subprocess\\nimport sys\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\nimport pandas as pd\\nsubprocess.check_call([sys.executable,\\\"-m\\\",\\\"pip\\\",\\\"install\\\",\\\"xlsxwriter\\\"])\\nsubprocess.check_call([sys.executable,\\\"-m\\\",\\\"pip\\\",\\\"install\\\",\\\"openpyxl\\\"])\\nimport xlsxwriter\\nimport openpyxl\\n\\nrun_id = <<PROCESS_RUN_KEY>>\\nrpt_path = '<@@PATH1@@>'\\n\\nwriter = pd.ExcelWriter(f'tp_dvm_rprt_{run_id}.xlsx', engine='xlsxwriter')\\n\\n# Prepare KPI\\ndata = []\\n\\ndq_bv_val = ('Business Validations','','')\\ndata.append(dq_bv_val)\\n\\nif dq1.count()==0:\\n  dq_val=('Unexpected change vs. previous period or year ago', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Unexpected change vs. previous period or year ago', 'FAILED', '=HYPERLINK(\\\"#BV_VAL1!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\nif dq2.count()==0:\\n  dq_val=('Unexpected backdata difference', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Unexpected backdata difference', 'FAILED', '=HYPERLINK(\\\"#BV_VAL2!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\nif dq3.count()==0:\\n  dq_val=('Product Parent-Children mismatch on Volume Sales (MSU)', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Product Parent-Children mismatch on Volume Sales (MSU)', 'FAILED', '=HYPERLINK(\\\"#BV_VAL3!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq4.count()==0:\\n  dq_val=('Top level Volume/Value Sales mismatch between hierarchies', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Top level Volume/Value Sales mismatch between hierarchies', 'FAILED', '=HYPERLINK(\\\"#BV_VAL4!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n  \\nif dq5.count()==0:\\n  dq_val=('Negative fact values', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Negative fact values', 'FAILED', '=HYPERLINK(\\\"#BV_VAL5!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n  \\nif dq6.count()==0:\\n  dq_val=('Missing fact data for parent product level', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Missing fact data for parent product level', 'FAILED', '=HYPERLINK(\\\"#BV_VAL6!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\nif dq7.filter('sttus_vs_last_time_perd in (\\\"NEW\\\",\\\"MISSING\\\")').count()==0:\\n  dq_val=('Missing/delivered product level', 'PASSED', '' )\\n  data.append(dq_val)\\nelse:\\n  dq_val=('Missing/delivered product level', 'FAILED', '=HYPERLINK(\\\"#BV_VAL7!A1\\\",\\\"click_here\\\")' )\\n  data.append(dq_val)\\n\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\n#Prepare Summary Report dataframe\\n\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n\\nschema_for_kpi = StructType([ \\n    StructField(\\\"Validation\\\",StringType(),True),\\n    StructField(\\\"Result\\\",StringType(),True),\\n    StructField(\\\"Details\\\",StringType(),True)\\n  ])\\n\\n# Creation of Summary Tab\\n\\n\\n\\ndf_bv_summary = spark.createDataFrame(data, schema_for_kpi)\\ndf_bv_summary = df_bv_summary.orderBy('Result')\\nsummary = df_file_struct_summary.unionByName(df_ref_vendors_summary, True).unionByName(df_fyi_summary, True).unionByName(df_ref_summary, True).unionByName(df_bv_summary, True)\\n\\n\\nSUMMARY = summary.toPandas()\\nSUMMARY.to_excel(writer,sheet_name=\\\"SUMMARY\\\",index=False)\\n\\n# Creation of other tabs\\n\\nlst_dfs = [dq1, dq2, dq3, dq4, dq5, dq6, dq7]\\nc = 1\\nfor i in lst_dfs:\\n  if i.count()>0:\\n    i = i.toPandas()\\n    i.to_excel(writer,sheet_name=f\\\"BV_VAL{c}\\\",index=False)\\n  c= c+1\\n\\n# Close Excel Report and Save\\nwriter.close()\\n\\nfiles = [f for f in os.listdir('.') if os.path.isfile(f)]\\nfor f in files:\\n  if f==f'tp_dvm_rprt_{run_id}.xlsx':\\n    shutil.copyfile(f, f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}.xlsx')\\n\\n# Read and combine the report\\nwriter = pd.ExcelWriter(f'tp_dvm_rprt_{run_id}_summary.xlsx', engine='xlsxwriter')\\n\\n# Creation of Summary Tab Once again\\n\\ndf_bv_summary = df_bv_summary.orderBy('Result')\\ndf_file_struct_summary = df_file_struct_summary.orderBy('Result')\\ndf_ref_vendors_summary = df_ref_vendors_summary.orderBy('Result')\\ndf_fyi_summary = df_fyi_summary.orderBy('Result')\\ndf_ref_summary = df_ref_summary.orderBy('Result')\\n\\nsummary = df_file_struct_summary.unionByName(df_ref_vendors_summary, True).unionByName(df_fyi_summary, True).unionByName(df_ref_summary, True).unionByName(df_bv_summary, True)\\n\\nSUMMARY = summary.toPandas()\\nSUMMARY.to_excel(writer,sheet_name=\\\"SUMMARY\\\",index=False)\\n\\n#Read Summary Report for prior reports\\ndf_rpt_summary = pd.read_excel(f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}_summary.xlsx', sheet_name=None)\\n\\nfor key, value in df_rpt_summary.items():\\n  if (key!='SUMMARY'):\\n    df_i = df_rpt_summary[key]\\n    df_i.to_excel(writer,sheet_name=f\\\"{key}\\\",index=False)\\n\\n#Read Current report\\ndf_rpt_curr = pd.read_excel(f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}.xlsx', sheet_name=None)\\n\\nfor key, value in df_rpt_curr.items():\\n  if (key!='SUMMARY'):\\n    df_i = df_rpt_curr[key]\\n    df_i.to_excel(writer,sheet_name=f\\\"{key}\\\",index=False)\\n\\nwriter.close()\\n\\nfiles = [f for f in os.listdir('.') if os.path.isfile(f)]\\nfor f in files:\\n  if f==f'tp_dvm_rprt_{run_id}_summary.xlsx':\\n    shutil.move(f, f'/dbfs/mnt/{rpt_path}/tp_dvm_rpt/tp_dvm_rprt_{run_id}_summary.xlsx')\\n\\ndict_all_dfs['dq_combine_bv'] = {\\\"df_object\\\" :dq_combine}\\ndf_output_dict['dq_combine_bv'] = dq_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dqm_cntrt_mkt\"\n    },\n    {\n      \"name\": \"df_dqm_calc_index\"\n    },\n    {\n      \"name\": \"tier1_prod_gav\"\n    },\n    {\n      \"name\": \"tier1_fct_skid\"\n    },\n    {\n      \"name\": \"tier1_fct_smn_m\"\n    },\n    {\n      \"name\": \"tier1_fct_dvm_100_measr\"\n    },\n    {\n      \"name\": \"tier1_measr_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_time_mtrlz_tbl\"\n    },\n    {\n      \"name\": \"tier1_prod_cxref\"\n    },\n    {\n      \"name\": \"tier1_mkt_dsdim\"\n    },\n    {\n      \"name\": \"df_ref_summary\"\n    },\n    {\n      \"name\": \"df_file_struct_summary\"\n    },\n    {\n      \"name\": \"df_ref_vendors_summary\"\n    },\n    {\n      \"name\": \"df_fyi_summary\"\n    },\n    {\n      \"name\": \"df_fact\"\n    },\n    {\n      \"name\": \"df_mm_time_perd_assoc_type\"\n    },\n    {\n      \"name\": \"df_mm_time_perd_assoc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FP] - Business Validation KPI",
      "predecessorName": "Business Validations and Report Generation",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"format\": \"csv\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"path\": \"<@@PATH1@@>/KPI/<<PROCESS_RUN_KEY>>_bvr.csv\",\n  \"mode\": \"overwrite\",\n  \"compression\": \"None\",\n  \"coalesceByNumber\": 1,\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_business_val\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "update delivery status - phase id 6 status id 2",
      "predecessorName": "[FP] - Business Validation KPI",
      "jsonSpecification": "{\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\nrows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 6, 1, 2, <<PROCESS_RUN_KEY>>]]\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.MM_DLVRY_RUN_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").mode(\\\"append\\\").save()\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Mail Sender",
      "predecessorName": "update delivery status - phase id 6 status id 2",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nfrom pyspark.sql.functions import *\\n\\n# Run information from Postgres\\nrun_id = <<PROCESS_RUN_KEY>>\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\n# mm_process_run_lkp_vw\\nmm_process_run_lkp_vw = spark.read.format(\\\"jdbc\\\").option(\\\"driver\\\", \\\"org.postgresql.Driver\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"query\\\", f\\\"select * from adwgp_mm.mm_process_run_lkp_vw where run_id = {run_id}\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").option(\\\"ssl\\\", True).option(\\\"sslmode\\\", \\\"require\\\").option(\\\"sslfactory\\\",\\\"org.postgresql.ssl.NonValidatingFactory\\\").load()\\nmm_process_run_lkp_vw.createOrReplaceTempView('mm_process_run_lkp_vw')\\n\\nmm_process_run_lkp_vw = mm_process_run_lkp_vw.select('file_name', 'start_date_time')\\nrun_info = mm_process_run_lkp_vw.collect()\\n\\n\\n#Mail Sender\\n\\nimport smtplib\\nfrom email.mime.text import MIMEText\\nfrom email.mime.multipart import MIMEMultipart\\nfrom email.mime.base import MIMEBase\\nfrom email import encoders\\n# Setup port number and server name\\n\\nsmtp_port = 587                 # Standard secure SMTP port\\nsmtp_server = \\\"smtp.office365.com\\\"  # Google SMTP Server\\n\\ncontacts = '<<CONTACTS>>'\\n#lst_of_contacts = [i.strip() for i in contacts.split(\\\";\\\")]\\n#lst_of_contacts = [\\\"michalska.mb@pg.com\\\", \\\"ulbrych.b@pg.com\\\"]\\nlst_of_contacts = [\\\"michalska.mb@pg.com\\\", \\\"ulbrych.b@pg.com\\\", \\\"kumtepe.o@pg.com\\\"]\\n\\n# Set up the email lists\\nemail_from = \\\"cpnotification.im@pg.com\\\"\\n\\n#email_list = [\\\"Gopi.C@lntinfotech.com\\\", \\\"jagdish.sahu@lntinfotech.com\\\", \\\"poltoratskyi.i@pg.com\\\"]\\nemail_list = [\\\"Gopi.C@lntinfotech.com\\\"]\\n\\nfor c in lst_of_contacts:\\n  email_list.append(c)\\n\\npswd = dbutils.secrets.get('tp_dpf2cdl', 'cpnotification-password')\\n\\nrun_id = <<PROCESS_RUN_KEY>>\\nfile_name = run_info[0]['file_name']\\nfile_timestamp= run_info[0]['start_date_time']\\nreport_name = f\\\"tp_dvm_rprt_{run_id}_summary.xlsx\\\"\\nrpt_path = '<@@PATH1@@>/tp_dvm_rpt/'\\n\\n# name the email subject\\nsubject = f\\\"TP Business Validation Report for run {run_id}\\\"\\n\\n# Define the email function (dont call it email!)\\ndef send_emails(email_list):\\n\\n    for person in email_list:\\n\\n        # Make the body of the email\\n        body = f\\\"\\\"\\\"\\n\\nValidation summary:\\n\\nSource File Name: {file_name} \\n\\\\nRun id: {run_id} \\n\\nPlease find the attachments for detailed validation report\\n\\nRegards,\\nTradepanel Team    \\n        \\\"\\\"\\\"\\n        print(body)\\n        # make a MIME object to define parts of the email\\n        msg = MIMEMultipart()\\n        msg['From'] = email_from\\n        msg['To'] = person\\n        msg['Subject'] = subject\\n\\n        # Attach the body of the message\\n        msg.attach(MIMEText(body, 'plain'))\\n\\n        # Define the file to attach\\n        filename_path = f\\\"/dbfs/mnt/{rpt_path}/tp_dvm_rprt_{run_id}_summary.xlsx\\\"\\n\\n        # Open the file in python as a binary\\n        attachment= open(filename_path, 'rb')  # r for read and b for binary\\n\\n        # Encode as base 64\\n        attachment_package = MIMEBase('application', 'octet-stream')\\n        attachment_package.set_payload((attachment).read())\\n        encoders.encode_base64(attachment_package)\\n        attachment_package.add_header('Content-Disposition', \\\"attachment; filename= \\\" + report_name)\\n        msg.attach(attachment_package)\\n\\n        # Cast as string\\n        text = msg.as_string()\\n\\n        # Connect with the server\\n        print(\\\"Connecting to server...\\\")\\n        TIE_server = smtplib.SMTP(smtp_server, smtp_port)\\n        TIE_server.starttls()\\n        TIE_server.login(email_from, pswd)\\n        print(\\\"Succesfully connected to server\\\")\\n        print()\\n\\n\\n        # Send emails to \\\"person\\\" as list is iterated\\n        print(f\\\"Sending email to: {person}...\\\")\\n        TIE_server.sendmail(email_from, person, text)\\n        print(f\\\"Email sent to: {person}\\\")\\n        print()\\n\\n    # Close the port\\n    TIE_server.quit()\\n\\n\\n# Run the function\\nsend_emails(email_list)\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Business Validations",
      "predecessorName": "Mail Sender",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"documentation\": \"https://jira-pg-ds.atlassian.net/wiki/spaces/CDLBOK/pages/3676897284/Turbine+DQ+Operations\",\n  \"inputType\": \"Input using uploaded file\",\n  \"path\": \"<@@PATH1@@>/KPI/<<PROCESS_RUN_KEY>>_bvr.csv\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv_chk\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "DataQualityValidation",
      "overridableIndicator": false
    },
    {
      "operationName": "Report Generation",
      "predecessorName": "Business Validations",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"documentation\": \"https://jira-pg-ds.atlassian.net/wiki/spaces/CDLBOK/pages/3676897284/Turbine+DQ+Operations\",\n  \"saveToCSV\": \"true\",\n  \"generateHTMLReport\": \"true\",\n  \"generatePDFReport\": \"false\",\n  \"includeDetailedValidationResults\": \"failed rows only\",\n  \"numberOfRowsToDisplay\": 100,\n  \"reportTemplate\": \"default\"\n}",
      "operationVersionName": "DataQualityReport",
      "overridableIndicator": false
    },
    {
      "operationName": "Stop Calc - Business Validation",
      "predecessorName": "Report Generation",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"true\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf = dict_all_dfs['dq_combine_bv'][\\\"df_object\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\n\\ncnt = df.count()\\n\\nif (cnt>0):\\n  rows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 12, 1, 4, <<PROCESS_RUN_KEY>>]]\\nelse:\\n  rows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 13, 1, 3, <<PROCESS_RUN_KEY>>]]\\n\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.MM_DLVRY_RUN_LKP\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").mode(\\\"append\\\").save()\\n\\ndict_all_dfs['dq_combine_bv_chk'] = {\\\"df_object\\\" :df}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Conditional Stop if DQ Fails",
      "predecessorName": "Stop Calc - Business Validation",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"expression\": \"DQ IS NOT NULL\",\n  \"processStatus\": \"DQ_ISSUE\",\n  \"conditionValue\": \"true\",\n  \"milestone\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"dq_combine_bv\"\n    }\n  ]\n}",
      "operationVersionName": "ConditionalStop",
      "overridableIndicator": false
    }
  ],
  "graphName": "t1_dq_business_validations"
}