{
  "applicationName": "TURBINE_INTERNAL",
  "nodes": [
    {
      "operationName": "[File Load] MM_PROD_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SKID_LKP/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[sem] release MM_PROD_SKID_LKP",
      "predecessorName": "[File Load] MM_PROD_SKID_LKP",
      "jsonSpecification": "{\r\n  \"active\": \"true\",\r\n  \"actionType\": \"release\",\r\n  \"itemType\": \"path\",\r\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_SKID_LKP/\"\r\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] Set Parent Natural Key",
      "predecessorName": "[sem] release MM_PROD_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport csv\\nimport pandas as pd\\nfrom pyspark.sql.functions import *\\n\\n\\ndf_mm_prod_skid_lkp = dict_all_dfs['df_mm_prod_skid_lkp'][\\\"df_object\\\"]\\ndf_mm_prod_skid_lkp.createOrReplaceTempView(\\\"mm_prod_skid_lkp\\\")\\nrefresh = \\\"REFRESH table mm_prod_skid_lkp\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from mm_prod_skid_lkp\\\"\\nprod_skid_df = spark.sql(query)\\nprod_skid_df.createOrReplaceTempView(\\\"mm_prod_skid_lkp\\\")\\n\\ndf_prod_addskid = dict_all_dfs['df_prod_addskid'][\\\"df_object\\\"]\\ndf_prod_addskid.createOrReplaceTempView(\\\"mm_prod_addskid\\\")\\nrefresh1 = \\\"REFRESH table mm_prod_addskid\\\"\\nspark.sql(refresh1)\\nquery = \\\"select * from mm_prod_addskid\\\"\\nstrct_lvl_df = spark.sql(query)\\nstrct_lvl_df.createOrReplaceTempView(\\\"mm_prod_addskid\\\")\\n\\nctequery = \\\"\\\"\\\"WITH input AS (\\n                           SELECT  \\n                               srce_sys_id,\\n                               prod_match_attr_list,\\n                               prod_prttn_code,\\n                               prod_skid\\n                             FROM \\n                               mm_prod_skid_lkp\\n                           ),\\n                           map_a2i AS (\\n                           select  * from mm_prod_addskid\\n                           where 1=1 \\n                           )\\n                           SELECT \\n                             input.srce_sys_id,input.prod_match_attr_list,input.prod_prttn_code,input.prod_skid\\n                           , SUBSTRING_INDEX (input.prod_match_attr_list, ' ', map_a2i.lvl_num) parnt_prod_match_attr_list\\n                           FROM  input\\n                            INNER JOIN map_a2i ON input.prod_skid = map_a2i.prod_skid\\\"\\\"\\\"\\n\\ndf_prod_assoc_pslt = spark.sql(ctequery)\\n\\ndict_all_dfs['df_prod_assoc_pslt'] = {\\\"df_object\\\" :df_prod_assoc_pslt}\\ndf_output_dict['df_prod_assoc_pslt'] = df_prod_assoc_pslt\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_skid_lkp\"\n    },\n    {\n      \"name\": \"df_prod_addskid\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_assoc_pslt\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen]  Set Parent Prod Skid",
      "operationDescription": "16-Apr",
      "predecessorName": "[Gen] Set Parent Natural Key",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\nfrom pyspark.sql.types import IntegerType,StringType,DateType\\n\\ndf_prod_assoc_pslt = dict_all_dfs['df_prod_assoc_pslt'][\\\"df_object\\\"]\\ndf_prod_assoc_pslt.createOrReplaceTempView(\\\"prod_assoc_pslt\\\")\\ndf_prod_addskid = dict_all_dfs['df_prod_addskid'][\\\"df_object\\\"]\\ndf_prod_addskid.createOrReplaceTempView(\\\"prod_addskid\\\")\\n\\ndf5 = spark.sql('''\\n\\twith input as (\\n                           select  \\n                               prod_prttn_code,\\n                               prod_skid,\\n                               srce_sys_id,\\n                               prod_match_attr_list,\\n                               parnt_prod_match_attr_list\\n                             from \\n                               prod_assoc_pslt\\n                           ),\\n                           input_parnt as (\\n                           select  * from input\\n                           where 1=1 \\n                           ),\\n                           prod_child as (\\n                           select  * from prod_addskid\\n                           where 1=1 \\n                           ),\\n                           prod_parnt as (\\n                           select  * from prod_addskid\\n                           where 1=1 \\n                           )\\n                           select \\n                             input.prod_prttn_code,input.prod_skid,input.srce_sys_id,input.prod_match_attr_list,input.parnt_prod_match_attr_list\\n                           , nvl(input_parnt.prod_skid, prod_child.prod_skid) parnt_prod_skid,prod_child.prod_skid child_prod_skid,prod_child.prod_lvl_id child_strct_lvl_id,nvl(prod_parnt.prod_lvl_id,prod_child.prod_lvl_id) parnt_strct_lvl_id,1 seq_num\\n                           from  input\\n                            left outer join input_parnt on input.parnt_prod_match_attr_list = input_parnt.prod_match_attr_list\\n                            inner join prod_child on input.srce_sys_id = prod_child.srce_sys_id and input.prod_skid = prod_child.prod_skid\\n                            left outer join prod_parnt on input.srce_sys_id = prod_parnt.srce_sys_id and input_parnt.prod_skid = prod_parnt.prod_skid\\n                            order by prod_skid\\n                            ''')\\n\\ndf_mm_prod_assoc_tran = df5\\n\\ndf_output_dict['df_mm_prod_assoc_tran'] = df_mm_prod_assoc_tran\\ndict_all_dfs['df_mm_prod_assoc_tran'] = {\\\"df_object\\\" :df_mm_prod_assoc_tran}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_addskid\"\n    },\n    {\n      \"name\": \"df_prod_assoc_pslt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_assoc_tran\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[Mul Join]  Set Parent Prod Skid",
      "predecessorName": "[Gen]  Set Parent Prod Skid",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_assoc_pslt\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_prod_assoc_pslt\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"input_parnt\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_prod_addskid\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"prod_child\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"child_prod_skid\"\n        },\n        {\n          \"columnName\": \"prod_lvl_id\",\n          \"columnAlias\": \"child_strct_lvl_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_prod_addskid\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"prod_parnt\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_lvl_id\",\n          \"columnAlias\": \"prod_lvl_id\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"input_parnt\",\n      \"joinExpression\": \"input.parnt_prod_match_attr_list = input_parnt.parnt_prod_match_attr_list\"\n    },\n    {\n      \"joinType\": \"INNER\",\n      \"joinDataframeAlias\": \"prod_child\",\n      \"joinExpression\": \"input.srce_sys_id = prod_child.srce_sys_id and input.prod_skid = prod_child.prod_skid\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"prod_parnt\",\n      \"joinExpression\": \"input.srce_sys_id = prod_parnt.srce_sys_id and input.prod_skid = prod_parnt.prod_skid\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_assoc_tran\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] Set Parent Prod Skid",
      "predecessorName": "[Mul Join]  Set Parent Prod Skid",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_assoc_tran\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"nvl(prod_skid, child_prod_skid)\",\n      \"columnName\": \"parnt_prod_skid\"\n    },\n    {\n      \"transformation\": \"nvl(prod_lvl_id,child_strct_lvl_id)\",\n      \"columnName\": \"parnt_strct_lvl_id\"\n    },\n    {\n      \"transformation\": \"CAST(1 AS INTEGER)\",\n      \"columnName\": \"seq_num\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_assoc_tran\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    }
  ],
  "graphName": "T1 Integrated TP Product Association Loading_v1"
}