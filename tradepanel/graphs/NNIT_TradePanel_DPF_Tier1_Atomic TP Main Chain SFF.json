{
  "applicationName": "TURBINE_INTERNAL",
  "jsonSpecification": "{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \"T1 Atomic TP Main Chain\",\r\n    \"description\": \"T1 Atomic TP Main Chain\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n\t\t\"DATA_TIER\": {\r\n            \"title\": \"DATA_TIER\",\r\n            \"description\": \"DATA_TIER\",\r\n\t\t\t\"enum\": [\r\n                \"Tier1\",\r\n                \"Tier2\",\r\n\t\t\t\t\"HHP\"\r\n            ],\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"TEST_PRODUCTION\": {\r\n            \"title\": \"TEST_PRODUCTION\",\r\n            \"description\": \"TEST_PRODUCTION\",\r\n\t\t\t\"enum\": [\r\n                \"Test\",\r\n                \"Production\"\r\n            ],\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"FACT_TYPE_CODE\": {\r\n            \"title\": \"FACT_TYPE_CODE\",\r\n            \"description\": \"FACT_TYPE_CODE\",\r\n\t\t\t\"enum\": [\r\n                \"HHP\",\r\n                \"SF\",\r\n\t\t\t\t\"TP\"\r\n            ],\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"GEOGRAPHY\": {\r\n            \"title\": \"GEOGRAPHY\",\r\n            \"description\": \"GEOGRAPHY\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"GEO_ID\": {\r\n            \"title\": \"GEO_ID\",\r\n            \"description\": \"GEO_ID\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"AREA_BREAKDOWN\": {\r\n            \"title\": \"AREA_BREAKDOWN\",\r\n            \"description\": \"AREA_BREAKDOWN\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"MARKET\": {\r\n            \"title\": \"MARKET\",\r\n            \"description\": \"MARKET\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CURRENCY\": {\r\n            \"title\": \"CURRENCY\",\r\n            \"description\": \"CURRENCY\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CURRENCY_CODE\": {\r\n            \"title\": \"CURRENCY_CODE\",\r\n            \"description\": \"CURRENCY_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CATEGORY\": {\r\n            \"title\": \"CATEGORY\",\r\n            \"description\": \"CATEGORY\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CATEGORY_ID\": {\r\n            \"title\": \"CATEGORY_ID\",\r\n            \"description\": \"CATEGORY_ID\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"PERIOD_TYPE\": {\r\n            \"title\": \"PERIOD_TYPE\",\r\n            \"description\": \"PERIOD_TYPE\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"PERIOD_TYPE_CODE\": {\r\n            \"title\": \"PERIOD_TYPE_CODE\",\r\n            \"description\": \"PERIOD_TYPE_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"VENDOR\": {\r\n            \"title\": \"VENDOR\",\r\n            \"description\": \"VENDOR\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"VENDOR_ID\": {\r\n            \"title\": \"VENDOR_ID\",\r\n            \"description\": \"VENDOR_ID\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CONTRACT_NAME\": {\r\n            \"title\": \"CONTRACT_NAME\",\r\n            \"description\": \"CONTRACT_NAME\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CONTRACT_CODE\": {\r\n            \"title\": \"CONTRACT_CODE\",\r\n            \"description\": \"CONTRACT_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"RETENTION_PERIOD\": {\r\n            \"title\": \"NO_OF_WEEKS\",\r\n            \"description\": \"Retention period in number of weeks\",\r\n            \"type\": \"integer\"\r\n        },\r\n\t\t\"VENDOR_FILE_PATTERN\": {\r\n            \"title\": \"VENDOR_FILE_PATTERN\",\r\n            \"description\": \"VENDOR_FILE_PATTERN\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"STEP_FILE_PATTERN_COMMON\": {\r\n            \"title\": \"STEP_FILE_PATTERN_COMMON\",\r\n            \"description\": \"STEP_FILE_PATTERN_COMMON\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"STEP_DVM\": {\r\n            \"title\": \"DVM\",\r\n            \"description\": \"DVM\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"DATA_AUTO_VAL_IND\": {\r\n            \"title\": \"DATA_AUTO_VAL_IND\",\r\n            \"description\": \"DATA_AUTO_VAL_IND\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"SRCE_SYS_ID\": {\r\n            \"title\": \"SRCE_SYS_ID\",\r\n            \"description\": \"SRCE_SYS_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n        \"IGRTD_PUBLISH_FILE_PATTERN\": {\r\n            \"title\": \"IGRTD_PUBLISH_FILE_PATTERN\",\r\n            \"description\": \"File pattern to create a file from atomic contract that will trigger integrated layer publishing\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"CNTRT_ID\": {\r\n            \"title\": \"CNTRT_ID\",\r\n            \"description\": \"CNTRT_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n         \"CNTRY_NAME\": {\r\n            \"title\": \"CNTRY_NAME\",\r\n            \"description\": \"CNTRY_NAME\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"ISO_CNTRY_CODE\": {\r\n            \"title\": \"ISO_CNTRY_CODE\",\r\n            \"description\": \"ISO_CNTRY_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"PROD_PRTTN_CODE\": {\r\n            \"title\": \"PROD_PRTTN_CODE\",\r\n            \"description\": \"PROD_PRTTN_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"ISO_CRNCY_CODE\": {\r\n            \"title\": \"ISO_CRNCY_CODE\",\r\n            \"description\": \"ISO_CRNCY_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"TIME_PERD_TYPE_CODE\": {\r\n            \"title\": \"TIME_PERD_TYPE_CODE\",\r\n            \"description\": \"TIME_PERD_TYPE_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"TIME_PERD_CLASS_CODE\": {\r\n            \"title\": \"TIME_PERD_CLASS_CODE\",\r\n            \"description\": \"TIME_PERD_CLASS_CODE\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CONTACTS\": {\r\n            \"title\": \"CONTACTS\",\r\n            \"description\": \"CONTACTS\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"EXTRACT_REFRESH\": {\r\n            \"title\": \"EXTRACT_REFRESH\",\r\n            \"description\": \"EXTRACT_REFRESH\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"RAW_FILE_PATH\": {\r\n            \"title\": \"RAW_FILE_PATH\",\r\n            \"description\": \"Raw File Path\",\r\n            \"default\": \"turbinev1/WORK/\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"PUBLISH_PATH\": {\r\n            \"title\": \"PUBLISH_PATH\",\r\n            \"description\": \"Publishing Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf/\",\r\n            \"type\": \"string\"\r\n        }, \r\n         \"IN_FILE_PATH\": {\r\n            \"title\": \"IN_FILE_PATH\",\r\n            \"description\": \"Input File Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf/\",\r\n            \"type\": \"string\"\r\n        }, \r\n         \"MAPPINGS_PATH\": {\r\n            \"title\": \"MAPPINGS_PATH\",\r\n            \"description\": \"Mappings Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf/\",\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"BUSINESS_DVM\": {\r\n            \"title\": \"BUSINESS_DVM\",\r\n            \"description\": \"Business Validations needed\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ1\": {\r\n            \"title\": \"CHK_DQ1\",\r\n            \"description\": \"Missing or delivered product level\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ2\": {\r\n            \"title\": \"CHK_DQ2\",\r\n            \"description\": \"Unexpected change vs previous period or year ago\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ3\": {\r\n            \"title\": \"CHK_DQ3\",\r\n            \"description\": \"Unexpected backdata difference\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ4\": {\r\n            \"title\": \"CHK_DQ4\",\r\n            \"description\": \"Product Parent-Children mismatch on Volume Sales MSU\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ5\": {\r\n            \"title\": \"CHK_DQ5\",\r\n            \"description\": \"Top level Volume or Value Sales mismatch between hierarchies\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ6\": {\r\n            \"title\": \"CHK_DQ6\",\r\n            \"description\": \"Missing fact data for parent product level\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"CHK_DQ7\": {\r\n            \"title\": \"CHK_DQ7\",\r\n            \"description\": \"Negative fact values\",\r\n            \"default\": \"true\",\r\n            \"type\": \"string\"\r\n        }\r\n   },\r\n    \"required\": [],\r\n    \"configurable\": [\"DATA_TIER\", \"TEST_PRODUCTION\", \"FACT_TYPE_CODE\", \"GEOGRAPHY\", \"GEO_ID\", \"AREA_BREAKDOWN\", \"MARKET\", \"CURRENCY\", \"CURRENCY_CODE\", \"CATEGORY\", \"CATEGORY_ID\", \"PERIOD_TYPE\", \"PERIOD_TYPE_CODE\", \"VENDOR\", \"VENDOR_ID\", \"CONTRACT_NAME\", \"CONTRACT_CODE\", \"RETENTION_PERIOD\", \"VENDOR_FILE_PATTERN\", \"STEP_FILE_PATTERN_COMMON\", \"STEP_DVM\", \"DATA_AUTO_VAL_IND\", \"SRCE_SYS_ID\",  \"IGRTD_PUBLISH_FILE_PATTERN\", \"CNTRT_ID\", \"CNTRY_NAME\", \"ISO_CNTRY_CODE\", \"PROD_PRTTN_CODE\", \"ISO_CRNCY_CODE\", \"TIME_PERD_TYPE_CODE\", \"TIME_PERD_CLASS_CODE\", \"CONTACTS\", \"EXTRACT_REFRESH\", \"BUSINESS_DVM\", \"CHK_DQ1\", \"CHK_DQ2\", \"CHK_DQ3\", \"CHK_DQ4\", \"CHK_DQ5\", \"CHK_DQ6\", \"CHK_DQ7\"]\r\n}",
  "nodes": [
    {
      "operationName": "Unzip the file",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"DPF2CDL_TradePanel_MFT\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "dummy operator",
      "predecessorName": "Unzip the file",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"manualSchema\": \"true\",\n  \"transformations\": [\n    {\n      \"columnType\": \"string\",\n      \"columnName\": \"test\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "CreateSchema",
      "overridableIndicator": false
    },
    {
      "operationName": "Update File Names and Row count",
      "predecessorName": "dummy operator",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql import Window, functions as fn\\nfrom pyspark.sql.functions import *\\n\\n# File Name\\nimport os\\nimport pathlib\\nimport fnmatch\\nfrom IPython import get_ipython\\n\\nraw_file_path = '/<@@RAW_PATH@@>/'\\n\\nPK = str(<<PROCESS_RUN_KEY>>)\\nfiles = dbutils.fs.ls(f'/mnt/{raw_file_path}/')\\n\\nfor fi in files:\\n  filename = fi.name\\n  if (PK in filename): # If input file is a ZIP file\\n    file_name = filename\\n\\t\\n\\n\\n#Update the common file name\\ncommon_pattern = '*fact_data*'\\n\\ncntrt_id = <<CNTRT_ID>>\\nrun_id = <<PROCESS_RUN_KEY>>\\n\\ndf = spark.read.format('csv').option('delimiter', '|').load('/mnt/<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*fact_data*.csv')\\nrow_cnt = df.count()\\n\\nrows = [(run_id,cntrt_id,row_cnt,file_name, file_name)]\\ncols = ['run_id','cntrt_id','rows_cnt','filename', 'comn_filename']\\n\\njdbcDF2 = spark.createDataFrame(rows,cols)\\n\\njdbcDF2.write.format(\\\"parquet\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_RUN_DTL_PLC\\\")\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Update Delivery Details - status id 2, phase id 2",
      "predecessorName": "Update File Names and Row count",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\n\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\nrows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 2, 1, 2, <<PROCESS_RUN_KEY>>]]\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"parquet\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_DLVRY_RUN_LKP\\\")\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] file load pg_brd_fr_prod",
      "predecessorName": "Update Delivery Details - status id 2, phase id 2",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"csv\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"columnSelectionType\": \"name\",\n  \"path\": \"<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*PROD*.csv\",\n  \"addInputFileName\": \"false\",\n  \"milestone\": \"false\",\n  \"header\": \"true\",\n  \"delimiter\": \"|\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\",\n  \"parserLib\": \"commons\",\n  \"mode\": \"PERMISSIVE\",\n  \"charset\": \"UTF-8\",\n  \"inferSchema\": \"false\",\n  \"comment\": \"#\",\n  \"nullValue\": \"null\",\n  \"dateFormat\": \"yyyy-MM-dd\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"columns\": [\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"TAG\",\n      \"targetName\": \"extrn_code\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"SHORT\",\n      \"targetName\": \"attr_code_list\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"LONG\",\n      \"targetName\": \"extrn_name\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"integer\",\n      \"sourceName\": \"DISPLAY_ORDER\",\n      \"targetName\": \"line_num\",\n      \"nullable\": \"true\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_prod\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] Materialize Product External Table",
      "predecessorName": "[FL] file load pg_brd_fr_prod",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\n\\n# Read - MM_CATEG_STRCT_ASSOC\\nmm_categ_strct_assoc = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_CATEG_STRCT_ASSOC\\\")\\nmm_categ_strct_assoc.createOrReplaceTempView('MM_CATEG_STRCT_ASSOC')\\n\\n# Read - MM_STRCT_LVL_LKP\\nmm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_STRCT_LVL_LKP\\\")\\nmm_strct_lvl_lkp.createOrReplaceTempView('MM_STRCT_LVL_LKP')\\n\\n# Read - MM_ATTR_LKP\\nmm_attr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_ATTR_LKP\\\")\\nmm_attr_lkp.createOrReplaceTempView('MM_ATTR_LKP')\\n\\ncntrt_code = '<<CONTRACT_CODE>>'\\n# Read - mm_cntrt_lkp_VW1\\nmm_cntrt_lkp_VW1 = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_CNTRT_LKP_VW3\\\")\\ndf_vw1=mm_cntrt_lkp_VW1.filter(f\\\"cntrt_code ='{cntrt_code}'\\\")\\nfor i in df_vw1.collect():\\n  cntrt_code=i[\\\"cntrt_code\\\"]\\n  fileformat=i[\\\"fileformat\\\"]\\n  if fileformat == 'SFF2':\\n   import pyspark\\n   from pyspark.sql import SparkSession\\n   from pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n   from pyspark.sql.functions import *\\n\\n   prod_prttn_code = '<<PROD_PRTTN_CODE>>'\\n   srce_sys_id = <<SRCE_SYS_ID>>\\n   cntrt_id = <<CNTRT_ID>>\\n   run_id = <<PROCESS_RUN_KEY>>\\n   df_max_lvl = spark.sql('''\\n   select round(max(sll.lvl_num)) max_lvl from MM_CATEG_STRCT_ASSOC csa \\n   join MM_STRCT_LVL_LKP sll \\n   on sll.strct_id = csa.strct_id \\n   join MM_ATTR_LKP al \\n   on al.attr_id = sll.attr_id\\n   where csa.categ_id = '<<CATEGORY_ID>>' and csa.STRCT_NUM = '1' and al.attr_name = 'ITEM'\\n   ''')\\n   df_max_lvl = df_max_lvl.withColumn(\\\"max_lvl\\\",col(\\\"max_lvl\\\").cast(IntegerType())).withColumn('srce_sys_id',lit(srce_sys_id))\\n\\n\\n   df_srce_prod = spark.read.format('csv').option('header', True).option('delimiter', '|').load('/mnt/<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*PROD*.csv')\\n   #df_srce_prod = spark.read.format('csv').option('header', True).option('delimiter', '|').load('/mnt/unrefined/cloudpanel-test-unref/Tier1/5000/RawFile/PG_BRD_FR_PROD_08032022.csv')\\n\\n   df_srce_prod = df_srce_prod.select(col(\\\"TAG\\\"),col(\\\"SHORT\\\"),col(\\\"LONG\\\"),col(\\\"DISPLAY_ORDER\\\"))\\n\\n   df_srce_prod = df_srce_prod.withColumnRenamed(\\\"TAG\\\", \\\"extrn_code\\\").withColumnRenamed(\\\"SHORT\\\", \\\"attr_code_list\\\").withColumnRenamed(\\\"LONG\\\", \\\"extrn_name\\\").withColumnRenamed(\\\"DISPLAY_ORDER\\\", \\\"line_num\\\")\\n\\n\\n   split_col = pyspark.sql.functions.split(df_srce_prod['attr_code_list'], ' ')\\n   df_srce_prod = df_srce_prod.withColumn('lvl_num', size(split(col(\\\"attr_code_list\\\"), r\\\"\\\\ \\\")) - 1) \\\\\\n       .withColumn(\\\"extrn_prod_id\\\", col(\\\"extrn_code\\\")) \\\\\\n       .withColumn(\\\"extrn_prod_attr_val_list\\\", col(\\\"attr_code_list\\\")) \\\\\\n       .withColumn(\\\"extrn_prod_name\\\", col(\\\"extrn_name\\\").cast(\\\"String\\\")) \\\\\\n       .withColumn(\\\"extrn_name\\\", col(\\\"extrn_name\\\").cast(\\\"String\\\")) \\\\\\n       .withColumn(\\\"prod_name\\\", col(\\\"extrn_name\\\")) \\\\\\n       .withColumn(\\\"prod_desc\\\", col(\\\"extrn_name\\\")) \\\\\\n       .withColumn('attr_code_0', split_col.getItem(0)) \\\\\\n       .withColumn('attr_code_1', split_col.getItem(1)) \\\\\\n       .withColumn('attr_code_2', split_col.getItem(2)) \\\\\\n       .withColumn('attr_code_3', split_col.getItem(3)) \\\\\\n       .withColumn('attr_code_4', split_col.getItem(4)) \\\\\\n       .withColumn('attr_code_5', split_col.getItem(5)) \\\\\\n       .withColumn('attr_code_6', split_col.getItem(6)) \\\\\\n       .withColumn('attr_code_7', split_col.getItem(7)) \\\\\\n       .withColumn('attr_code_8', split_col.getItem(8)) \\\\\\n       .withColumn('attr_code_9', split_col.getItem(9)) \\\\\\n       .withColumn('attr_code_10', split_col.getItem(10)) \\\\\\n       .withColumn('categ_id', lit(prod_prttn_code)) \\\\\\n       .withColumn('cntrt_id', lit(cntrt_id)) \\\\\\n       .withColumn('srce_sys_id', lit(srce_sys_id)) \\\\\\n       .withColumn('prod_prttn_code', lit(prod_prttn_code)) \\\\\\n       .withColumn('run_id', lit(run_id))\\n\\n\\n   df_join = df_srce_prod.join(df_max_lvl,df_srce_prod.srce_sys_id ==  df_max_lvl.srce_sys_id,\\\"inner\\\")\\n\\n   cols = (\\\"srce_sys_id\\\",\\\"max_lvl\\\")\\n\\n\\n   df_srce_mprod = df_join.withColumn('prod_match_attr_list',when(df_join.lvl_num == df_join.max_lvl,concat(df_join.attr_code_list,lit(' '),df_join.extrn_name)).otherwise(df_join.attr_code_list)).drop(*cols).withColumn('srce_sys_id', lit(srce_sys_id))\\n\\n  else:\\n   import pyspark\\n   from pyspark.sql import SparkSession\\n   from pyspark.sql.types import StructType,StructField, StringType, IntegerType\\n   from pyspark.sql.functions import *\\n\\n   prod_prttn_code = '<<PROD_PRTTN_CODE>>'\\n   srce_sys_id = <<SRCE_SYS_ID>>\\n   cntrt_id = <<CNTRT_ID>>\\n   run_id = <<PROCESS_RUN_KEY>>\\n   df_max_lvl = spark.sql('''\\n   select round(max(sll.lvl_num)) max_lvl from MM_CATEG_STRCT_ASSOC csa \\n   join MM_STRCT_LVL_LKP sll \\n   on sll.strct_id = csa.strct_id \\n   join MM_ATTR_LKP al \\n   on al.attr_id = sll.attr_id\\n   where csa.categ_id = '<<CATEGORY_ID>>' and csa.STRCT_NUM = '1' and al.attr_name = 'ITEM'\\n   ''')\\n   df_max_lvl = df_max_lvl.withColumn(\\\"max_lvl\\\",col(\\\"max_lvl\\\").cast(IntegerType())).withColumn('srce_sys_id',lit(srce_sys_id))\\n\\n\\n   df_srce_prod = spark.read.format('csv').option('header', True).option('delimiter', '|').load('/mnt/<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*PROD*.csv')\\n   #df_srce_prod = spark.read.format('csv').option('header', True).option('delimiter', '|').load('/mnt/unrefined/cloudpanel-test-unref/Tier1/5000/RawFile/PG_BRD_FR_PROD_08032022.csv')\\n\\n   df_srce_prod = df_srce_prod.select(col(\\\"TAG\\\"),col(\\\"SHORT\\\"),col(\\\"LONG\\\"),col(\\\"DISPLAY_ORDER\\\"))\\n\\n   df_srce_prod = df_srce_prod.withColumnRenamed(\\\"TAG\\\", \\\"extrn_code\\\").withColumnRenamed(\\\"LONG\\\", \\\"attr_code_list\\\").withColumnRenamed(\\\"SHORT\\\", \\\"extrn_name\\\").withColumnRenamed(\\\"DISPLAY_ORDER\\\", \\\"line_num\\\")\\n\\n\\n   split_col = pyspark.sql.functions.split(df_srce_prod['attr_code_list'], ' ')\\n   df_srce_prod = df_srce_prod.withColumn('lvl_num', size(split(col(\\\"attr_code_list\\\"), r\\\"\\\\ \\\")) - 1) \\\\\\n       .withColumn(\\\"extrn_prod_id\\\", col(\\\"extrn_code\\\")) \\\\\\n       .withColumn(\\\"extrn_prod_attr_val_list\\\", col(\\\"attr_code_list\\\")) \\\\\\n       .withColumn(\\\"extrn_prod_name\\\", col(\\\"extrn_name\\\").cast(\\\"String\\\")) \\\\\\n       .withColumn(\\\"extrn_name\\\", col(\\\"extrn_name\\\").cast(\\\"String\\\")) \\\\\\n       .withColumn(\\\"prod_name\\\", col(\\\"extrn_name\\\")) \\\\\\n       .withColumn(\\\"prod_desc\\\", col(\\\"extrn_name\\\")) \\\\\\n       .withColumn('attr_code_0', split_col.getItem(0)) \\\\\\n       .withColumn('attr_code_1', split_col.getItem(1)) \\\\\\n       .withColumn('attr_code_2', split_col.getItem(2)) \\\\\\n       .withColumn('attr_code_3', split_col.getItem(3)) \\\\\\n       .withColumn('attr_code_4', split_col.getItem(4)) \\\\\\n       .withColumn('attr_code_5', split_col.getItem(5)) \\\\\\n       .withColumn('attr_code_6', split_col.getItem(6)) \\\\\\n       .withColumn('attr_code_7', split_col.getItem(7)) \\\\\\n       .withColumn('attr_code_8', split_col.getItem(8)) \\\\\\n       .withColumn('attr_code_9', split_col.getItem(9)) \\\\\\n       .withColumn('attr_code_10', split_col.getItem(10)) \\\\\\n       .withColumn('categ_id', lit(prod_prttn_code)) \\\\\\n       .withColumn('cntrt_id', lit(cntrt_id)) \\\\\\n       .withColumn('srce_sys_id', lit(srce_sys_id)) \\\\\\n       .withColumn('prod_prttn_code', lit(prod_prttn_code)) \\\\\\n       .withColumn('run_id', lit(run_id))\\n\\n\\n   df_join = df_srce_prod.join(df_max_lvl,df_srce_prod.srce_sys_id ==  df_max_lvl.srce_sys_id,\\\"inner\\\")\\n\\n   cols = (\\\"srce_sys_id\\\",\\\"max_lvl\\\")\\n\\n\\n   df_srce_mprod = df_join.withColumn('prod_match_attr_list',when(df_join.lvl_num == df_join.max_lvl,concat(df_join.attr_code_list,lit(' '),df_join.extrn_name)).otherwise(df_join.attr_code_list)).drop(*cols).withColumn('srce_sys_id', lit(srce_sys_id))\\n  \\n\\t\\n\\t\\ndf_output_dict['df_srce_mprod'] = df_srce_mprod\\ndict_all_dfs['df_srce_mprod'] = {\\\"df_object\\\" :df_srce_mprod}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_prod\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mprod\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "load prod xref",
      "predecessorName": "[Gen] Materialize Product External Table",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_XREF/part_srce_sys_id=<<SRCE_SYS_ID>>/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_pre_prod_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release prod xref sem",
      "predecessorName": "load prod xref",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_XREF/part_srce_sys_id=<<SRCE_SYS_ID>>/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "filter cntrt id",
      "predecessorName": "release prod xref sem",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"cntrt_id=<<CNTRT_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_pre_prod_xref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_pre_prod_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "update extrn prod names in srce mprod",
      "predecessorName": "filter cntrt id",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_srce_mprod= dict_all_dfs['df_srce_mprod'][\\\"df_object\\\"]\\ndf_pre_prod_xref= dict_all_dfs['df_pre_prod_xref'][\\\"df_object\\\"]\\n\\ndf_srce_mprod.createOrReplaceTempView('srce_mprod')\\ndf_pre_prod_xref.createOrReplaceTempView('xref')\\n\\ndf_srce_mprod_drvd = spark.sql('''with multiple_prods as \\n(select extrn_prod_id,\\nprod_match_attr_list|| ' ('|| extrn_prod_id ||')' prod_match_attr_list,\\nextrn_prod_name || ' ('|| extrn_prod_id ||')' extrn_prod_name,\\nextrn_name || ' ('|| extrn_code ||')' extrn_name\\nfrom\\n(select T.prod_match_attr_list,T.extrn_prod_id,T.extrn_code,T.extrn_name,T.extrn_prod_name,T.extrn_prod_attr_val_list,COUNT(1) OVER (PARTITION BY T.extrn_prod_name, T.extrn_prod_attr_val_list) cnt from srce_mprod T)\\nwhere cnt > 1),\\nxref_compare_prods as\\n(select p.extrn_prod_id,\\np.prod_match_attr_list|| ' ('|| p.extrn_prod_id ||')' prod_match_attr_list,\\np.extrn_prod_name || ' ('|| p.extrn_prod_id ||')' extrn_prod_name,\\np.extrn_name || ' ('|| p.extrn_code ||')' extrn_name\\n                                        from xref x\\n                                        join srce_mprod p\\n                                        where x.srce_sys_id = <<SRCE_SYS_ID>> and x.cntrt_id = <<CNTRT_ID>> and p.extrn_prod_id = x.extrn_prod_id and p.extrn_prod_attr_val_list = x.extrn_prod_attr_val_list and x.extrn_prod_name = p.extrn_prod_name|| ' ('|| p.extrn_prod_id ||')')\\nselect m.extrn_code,\\ncoalesce(xp.extrn_name,mp.extrn_name,m.extrn_name) extrn_name,\\nm.attr_code_list,\\nm.line_num,\\nm.lvl_num,\\nm.extrn_prod_id,\\nm.extrn_prod_attr_val_list,\\ncoalesce(xp.extrn_prod_name,mp.extrn_prod_name,m.extrn_prod_name) extrn_prod_name,\\nm.prod_name,\\nm.prod_desc,\\nm.attr_code_0,\\nm.attr_code_1,\\nm.attr_code_2,\\nm.attr_code_3,\\nm.attr_code_4,\\nm.attr_code_5,\\nm.attr_code_6,\\nm.attr_code_7,\\nm.attr_code_8,\\nm.attr_code_9,\\nm.attr_code_10,\\nm.categ_id,\\nm.cntrt_id,\\nm.prod_prttn_code,\\nm.run_id,\\ncoalesce(xp.prod_match_attr_list,mp.prod_match_attr_list,m.prod_match_attr_list) prod_match_attr_list,\\nm.srce_sys_id\\nfrom srce_mprod  m\\nleft join multiple_prods mp\\non m.extrn_prod_id = mp.extrn_prod_id\\nleft join xref_compare_prods xp\\non m.extrn_prod_id = xp.extrn_prod_id''')\\n\\n\\ndict_all_dfs['df_srce_mprod'] = {\\\"df_object\\\" :df_srce_mprod_drvd}\\ndf_output_dict['df_srce_mprod'] = df_srce_mprod_drvd\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_mprod\"\n    },\n    {\n      \"name\": \"df_pre_prod_xref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mprod\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] file load pg_brd_fr_mkt",
      "predecessorName": "update extrn prod names in srce mprod",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"csv\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"columnSelectionType\": \"name\",\n  \"path\": \"<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*MKT*.csv\",\n  \"addInputFileName\": \"false\",\n  \"milestone\": \"false\",\n  \"header\": \"true\",\n  \"delimiter\": \"|\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\",\n  \"parserLib\": \"commons\",\n  \"mode\": \"PERMISSIVE\",\n  \"charset\": \"UTF-8\",\n  \"inferSchema\": \"false\",\n  \"comment\": \"#\",\n  \"nullValue\": \"null\",\n  \"dateFormat\": \"yyyy-MM-dd\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"columns\": [\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"TAG\",\n      \"targetName\": \"extrn_code\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"SHORT\",\n      \"targetName\": \"attr_code_list\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"LONG\",\n      \"targetName\": \"extrn_name\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"integer\",\n      \"sourceName\": \"DISPLAY_ORDER\",\n      \"targetName\": \"line_num\",\n      \"nullable\": \"true\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mkt\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[generic] materialize market ",
      "predecessorName": "[FL] file load pg_brd_fr_mkt",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\nfrom pyspark.sql.functions import *\\n\\ncateg_id = '<<CATEGORY_ID>>'\\nsrce_sys_id = <<SRCE_SYS_ID>>\\ncntrt_id = <<CNTRT_ID>>\\nrun_id = <<PROCESS_RUN_KEY>>\\nstrct_code = 'TP_H1'\\n\\n \\ndf_srce_mkt = spark.read.format('csv').option('header', True).option('delimiter', '|').load('/mnt/<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*MKT*.csv')\\n# df_srce_mkt = spark.read.format('csv').option('header', True).option('delimiter', '|').load('/mnt/unrefined/cloudpanel-test-unref/Tier1/5000/RawFile/PG_BRD_FR_MKT_08032022.csv')\\n\\ndf_srce_mkt = df_srce_mkt.select(col(\\\"TAG\\\"),col(\\\"SHORT\\\"),col(\\\"LONG\\\"),col(\\\"DISPLAY_ORDER\\\"))\\n\\ndf_srce_mkt = df_srce_mkt.withColumnRenamed(\\\"TAG\\\", \\\"extrn_code\\\").withColumnRenamed(\\\"SHORT\\\", \\\"attr_code_list\\\").withColumnRenamed(\\\"LONG\\\", \\\"extrn_name\\\").withColumnRenamed(\\\"DISPLAY_ORDER\\\", \\\"line_num\\\")\\n\\nsplit_col = pyspark.sql.functions.split(df_srce_mkt['attr_code_list'], ' ')\\ndf_srce_mkt = df_srce_mkt.withColumn('lvl_num', size(split(col(\\\"attr_code_list\\\"), r\\\"\\\\ \\\")) - 1) \\\\\\n       .withColumn(\\\"mkt_match_attr_list\\\", when (col(\\\"lvl_num\\\") == 9, (concat_ws(' ',df_srce_mkt.attr_code_list,df_srce_mkt.extrn_name))).otherwise(df_srce_mkt.attr_code_list)) \\\\\\n       .withColumn(\\\"extrn_code\\\", col(\\\"extrn_code\\\")) \\\\\\n       .withColumn(\\\"extrn_mkt_id\\\", col(\\\"extrn_code\\\")) \\\\\\n       .withColumn(\\\"extrn_mkt_attr_val_list\\\", col(\\\"attr_code_list\\\")) \\\\\\n       .withColumn(\\\"extrn_mkt_name\\\", col(\\\"extrn_name\\\")) \\\\\\n       .withColumn('attr_code_0', split_col.getItem(0)) \\\\\\n       .withColumn('attr_code_1', split_col.getItem(1)) \\\\\\n       .withColumn('attr_code_2', split_col.getItem(2)) \\\\\\n       .withColumn('attr_code_3', split_col.getItem(3)) \\\\\\n       .withColumn('attr_code_4', split_col.getItem(4)) \\\\\\n       .withColumn('attr_code_5', split_col.getItem(5)) \\\\\\n       .withColumn('attr_code_6', split_col.getItem(6)) \\\\\\n       .withColumn('attr_code_7', split_col.getItem(7)) \\\\\\n       .withColumn('attr_code_8', split_col.getItem(8)) \\\\\\n       .withColumn('attr_code_9', split_col.getItem(9)) \\\\\\n       .withColumn('attr_code_10', split_col.getItem(10)) \\\\\\n       .withColumn('categ_id', lit(categ_id)) \\\\\\n       .withColumn('cntrt_id', lit(cntrt_id)) \\\\\\n       .withColumn('srce_sys_id', lit(srce_sys_id)) \\\\\\n       .withColumn('run_id', lit(run_id)) \\\\\\n       .withColumn('strct_code', lit(strct_code)) \\ndf_srce_mmkt = df_srce_mkt\\n\\ndf_output_dict['df_srce_mmkt'] = df_srce_mmkt\\ndict_all_dfs['df_srce_mmkt'] = {\\\"df_object\\\" :df_srce_mmkt}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_mkt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mmkt\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] file load pg_brd_fr_per",
      "predecessorName": "[generic] materialize market ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"csv\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"columnSelectionType\": \"name\",\n  \"path\": \"<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*PER*.csv\",\n  \"addInputFileName\": \"false\",\n  \"milestone\": \"false\",\n  \"header\": \"true\",\n  \"delimiter\": \"|\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\",\n  \"parserLib\": \"commons\",\n  \"mode\": \"PERMISSIVE\",\n  \"charset\": \"UTF-8\",\n  \"inferSchema\": \"false\",\n  \"comment\": \"#\",\n  \"nullValue\": \"null\",\n  \"dateFormat\": \"yyyy-MM-dd\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"columns\": [\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"TAG\",\n      \"targetName\": \"extrn_code\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"LONG\",\n      \"targetName\": \"extrn_name\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"integer\",\n      \"sourceName\": \"DISPLAY_ORDER\",\n      \"targetName\": \"line_num\",\n      \"nullable\": \"true\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_time\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] Materialize time external table",
      "predecessorName": "[FL] file load pg_brd_fr_per",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_time\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"cast( 0 as integer)\",\n      \"columnName\": \"mm_time_perd_id\"\n    },\n    {\n      \"transformation\": \"extrn_code\",\n      \"columnName\": \"extrn_code\"\n    },\n    {\n      \"transformation\": \"extrn_name\",\n      \"columnName\": \"extrn_name\"\n    },\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mtime\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] mm_time_perd_id_lkp",
      "predecessorName": "[CET] Materialize time external table",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"csv\",\n  \"inferSchema\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"columnSelectionType\": \"name\",\n  \"path\": \"bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_time_perd_id_lkp.csv\",\n  \"addInputFileName\": \"false\",\n  \"milestone\": \"false\",\n  \"header\": \"true\",\n  \"delimiter\": \",\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\",\n  \"parserLib\": \"commons\",\n  \"mode\": \"PERMISSIVE\",\n  \"charset\": \"UTF-8\",\n  \"comment\": \"#\",\n  \"nullValue\": \"null\",\n  \"dateFormat\": \"yyyy-MM-dd\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"columns\": [\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"VENDR_ID\",\n      \"targetName\": \"vendr_id\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"EXTRN_TIME_PERD_ID\",\n      \"targetName\": \"extrn_time_perd_id\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"TIME_PERD_ID\",\n      \"targetName\": \"time_perd_id\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"AXLRY_RCD_ID\",\n      \"targetName\": \"axlry_rcd_id\",\n      \"nullable\": \"true\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd_id_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN] mm_time_perd_id_lkp",
      "predecessorName": "[FL] mm_time_perd_id_lkp",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.functions import *\\n\\n\\n\\ntime_id_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_TIME_PERD_ID_LKP\\\")\\n\\ndf_output_dict['df_time_perd_id_lkp'] = time_id_lkp\\ndict_all_dfs['df_time_perd_id_lkp'] = {\\\"df_object\\\" :time_id_lkp}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd_id_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] on df_time_perd_id_lkp",
      "predecessorName": "[GEN] mm_time_perd_id_lkp",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"vendr_id = <<VENDOR_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_perd_id_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd_id_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] mm_time_perd_fdim",
      "predecessorName": "[FIL] on df_time_perd_id_lkp",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_TIME_PERD_FDIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd_fdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_TIME_PERD_FDIM_VW/",
      "predecessorName": "[FL] mm_time_perd_fdim",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_TIME_PERD_FDIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Load TIME_PERD_SDADS",
      "predecessorName": "release MM_TIME_PERD_FDIM_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>TIME_PERD_SDADS/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd_fdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "Release TIME_PERD_SDADS",
      "predecessorName": "Load TIME_PERD_SDADS",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>TIME_PERD_SDADS/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[MJ] map input time period reference data",
      "predecessorName": "Release TIME_PERD_SDADS",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_mtime\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"mm_time_perd_id\",\n          \"columnAlias\": \"mm_time_perd_id\"\n        },\n        {\n          \"columnName\": \"extrn_code\",\n          \"columnAlias\": \"extrn_code\"\n        },\n        {\n          \"columnName\": \"extrn_name\",\n          \"columnAlias\": \"extrn_name\"\n        },\n        {\n          \"columnName\": \"line_num\",\n          \"columnAlias\": \"line_num\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_time_perd_id_lkp\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"time_lkp\",\n      \"columns\": [\n        {\n          \"columnName\": \"time_perd_id\",\n          \"columnAlias\": \"time_perd_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_time_perd_fdim\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"time_perd\",\n      \"columns\": [\n        {\n          \"columnName\": \"end_date\",\n          \"columnAlias\": \"mm_time_perd_end_date\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"time_lkp\",\n      \"joinExpression\": \"input.extrn_code = time_lkp.extrn_time_perd_id\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"time_perd\",\n      \"joinExpression\": \"time_lkp.time_perd_id = time_perd.time_perd_id\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_map\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] prepare data for run time periods",
      "predecessorName": "[MJ] map input time period reference data",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_map\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"<<PROCESS_RUN_KEY>>\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"time_perd_id\",\n      \"columnName\": \"time_perd_id\"\n    },\n    {\n      \"transformation\": \"'B'\",\n      \"columnName\": \"rcd_orign_code\"\n    },\n    {\n      \"transformation\": \"extrn_code\",\n      \"columnName\": \"extrn_time_perd_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_plc\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] prepare data for run partitions",
      "predecessorName": "[CET] prepare data for run time periods",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_map\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"<<PROCESS_RUN_KEY>>\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"'<<FACT_TYPE_CODE>>'\",\n      \"columnName\": \"fact_type_code\"\n    },\n    {\n      \"transformation\": \"'<<TIME_PERD_CLASS_CODE>>'\",\n      \"columnName\": \"time_perd_class_code\"\n    },\n    {\n      \"transformation\": \"<<SRCE_SYS_ID>>\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"<<CNTRT_ID>>\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"mm_time_perd_end_date\",\n      \"columnName\": \"mm_time_perd_end_date\"\n    },\n    {\n      \"transformation\": \"'<<PROD_PRTTN_CODE>>'\",\n      \"columnName\": \"prod_prttn_code\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] for prttn_plc",
      "predecessorName": "[CET] prepare data for run partitions",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nfrom pyspark.sql.functions import *\\n\\ndf_time_map = dict_all_dfs['df_time_map'][\\\"df_object\\\"]\\n\\ncntrt_id= <<CNTRT_ID>>\\nprod_prttn_code='<<PROD_PRTTN_CODE>>'\\nsrce_sys_id= <<SRCE_SYS_ID>>\\nrun_id= <<PROCESS_RUN_KEY>>\\ntime_perd_class_code='<<TIME_PERD_CLASS_CODE>>'\\nfact_type_code='TP'\\n\\nfrom pyspark.sql.functions import lit \\n\\ndf_time_map = df_time_map.withColumn(\\\"prod_prttn_code\\\",lit(prod_prttn_code))\\ndf_time_map = df_time_map.withColumn(\\\"cntrt_id\\\",lit(cntrt_id))\\ndf_time_map = df_time_map.withColumn(\\\"srce_sys_id\\\",lit(srce_sys_id))\\ndf_time_map = df_time_map.withColumn(\\\"run_id\\\",lit(run_id))\\ndf_time_map = df_time_map.withColumn(\\\"mm_time_perd_end_date\\\", col(\\\"mm_time_perd_end_date\\\"))\\ndf_time_map = df_time_map.withColumn(\\\"time_perd_class_code\\\",lit(time_perd_class_code))\\ndf_time_map = df_time_map.withColumn(\\\"fact_type_code\\\",lit(fact_type_code))\\ndf_prttn_plc=df_time_map \\n\\ndict_all_dfs['df_prttn_plc'] = {\\\"df_object\\\" :df_prttn_plc}\\ndf_output_dict['df_prttn_plc'] = df_prttn_plc\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_map\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] MM_RUN_TIME_PERD_PLC  ",
      "predecessorName": "[gen] for prttn_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"exclusive\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_run_time_perd_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[join] time_plc and time_perd_plc",
      "predecessorName": "[FL] MM_RUN_TIME_PERD_PLC  ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_run_time_perd_plc\",\n  \"joinExpression\": \"ref.run_id=in.run_id\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_plc\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_run_time_perd_plc\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_plc_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN_CC]",
      "predecessorName": "[join] time_plc and time_perd_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_time_plc_1 = dict_all_dfs['df_time_plc_1'][\\\"df_object\\\"]\\ndf_run_time_perd_plc = dict_all_dfs['df_run_time_perd_plc'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_time_plc_1.columns\\nsdim_cols = df_run_time_perd_plc.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_time_plc_1 = df_time_plc_1.withColumn(i,lit(None).cast('string'))\\n\\ndf_time_plc_1 = df_time_plc_1.select(*sdim_cols)\\ncols = df_time_plc_1.columns\\n\\nfor j in cols:\\n  if dict(df_time_plc_1.dtypes)[j] != dict(df_run_time_perd_plc.dtypes)[j]:\\n    df_time_plc_1 = df_time_plc_1.withColumn(j, col(j).cast(dict(df_run_time_perd_plc.dtypes)[j]))\\n\\ndict_all_dfs['df_time_plc_1'] = {\\\"df_object\\\" :df_time_plc_1}\\ndf_output_dict['df_time_plc_1'] = df_time_plc_1\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_run_time_perd_plc\"\n    },\n    {\n      \"name\": \"df_time_plc_1\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_plc_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[PUB] MM_RUN_TIME_PERD_PLC",
      "predecessorName": "[GEN_CC]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"semaphoreOption\": \"already acquired\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\",\n  \"mode\": \"append\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_plc_1\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "release sem for MM_RUN_TIME_PERD_PLC",
      "predecessorName": "[PUB] MM_RUN_TIME_PERD_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_TIME_PERD_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] MM_RUN_PRTTN_PLC ",
      "predecessorName": "release sem for MM_RUN_TIME_PERD_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_PRTTN_PLC/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"exclusive\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_run_prttn_plc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[join] prttn_plc and eun_prttn_plc",
      "predecessorName": "[FL] MM_RUN_PRTTN_PLC ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_run_prttn_plc\",\n  \"joinExpression\": \"ref.run_id=in.run_id\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_run_prttn_plc\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-cc]",
      "predecessorName": "[join] prttn_plc and eun_prttn_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prttn_plc_1 = dict_all_dfs['df_prttn_plc_1'][\\\"df_object\\\"]\\ndf_run_prttn_plc = dict_all_dfs['df_run_prttn_plc'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prttn_plc_1.columns\\nsdim_cols = df_run_prttn_plc.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prttn_plc_1 = df_prttn_plc_1.withColumn(i,lit(None).cast('string'))\\n\\ndf_prttn_plc_1 = df_prttn_plc_1.select(*sdim_cols)\\ncols = df_prttn_plc_1.columns\\n\\nfor j in cols:\\n  if dict(df_prttn_plc_1.dtypes)[j] != dict(df_run_prttn_plc.dtypes)[j]:\\n    df_prttn_plc_1 = df_prttn_plc_1.withColumn(j, col(j).cast(dict(df_run_prttn_plc.dtypes)[j]))\\n\\ndict_all_dfs['df_prttn_plc_1'] = {\\\"df_object\\\" :df_prttn_plc_1}\\ndf_output_dict['df_prttn_plc_1'] = df_prttn_plc_1\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc_1\"\n    },\n    {\n      \"name\": \"df_run_prttn_plc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[PUB] MM_RUN_PRTTN_PLC",
      "predecessorName": "[GEN-cc]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"semaphoreOption\": \"already acquired\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_RUN_PRTTN_PLC/\",\n  \"mode\": \"append\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prttn_plc_1\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "release sem for MM_RUN_PRTTN_PLC ",
      "predecessorName": "[PUB] MM_RUN_PRTTN_PLC",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_RUN_PRTTN_PLC/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] PG_BRD_FR_FCT",
      "predecessorName": "release sem for MM_RUN_PRTTN_PLC ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"csv\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"columnSelectionType\": \"name\",\n  \"path\": \"<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*FCT*.csv\",\n  \"addInputFileName\": \"false\",\n  \"milestone\": \"false\",\n  \"header\": \"true\",\n  \"delimiter\": \"|\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\",\n  \"parserLib\": \"commons\",\n  \"mode\": \"PERMISSIVE\",\n  \"charset\": \"UTF-8\",\n  \"inferSchema\": \"false\",\n  \"comment\": \"#\",\n  \"nullValue\": \"null\",\n  \"dateFormat\": \"yyyy-MM-dd\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"columns\": [\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"TAG\",\n      \"targetName\": \"extrn_code\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"SHORT\",\n      \"targetName\": \"extrn_name\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"LONG\",\n      \"targetName\": \"extrn_long_name\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"integer\",\n      \"sourceName\": \"DISPLAY_ORDER\",\n      \"targetName\": \"line_num\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"integer\",\n      \"sourceName\": \"PRECISION\",\n      \"targetName\": \"precision_val\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"integer\",\n      \"sourceName\": \"DENOMINATOR\",\n      \"targetName\": \"denominator_val\",\n      \"nullable\": \"true\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_measr\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] materialize measure external table",
      "predecessorName": "[FL] PG_BRD_FR_FCT",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_measr\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"extrn_code\",\n      \"columnName\": \"extrn_code\"\n    },\n    {\n      \"transformation\": \"extrn_name\",\n      \"columnName\": \"extrn_name\"\n    },\n    {\n      \"transformation\": \"extrn_long_name\",\n      \"columnName\": \"extrn_long_name\"\n    },\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    },\n    {\n      \"transformation\": \"precision_val\",\n      \"columnName\": \"precision_val\"\n    },\n    {\n      \"transformation\": \"denominator_val\",\n      \"columnName\": \"denominator_val\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mmeasr\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] PG_BRD_FR_fact_data",
      "predecessorName": "[CET] materialize measure external table",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"csv\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"columnSelectionType\": \"name\",\n  \"path\": \"<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*fact_data*.csv\",\n  \"addInputFileName\": \"false\",\n  \"milestone\": \"false\",\n  \"header\": \"false\",\n  \"delimiter\": \"|\",\n  \"quote\": \"\\\"\",\n  \"escape\": \"\\\\\",\n  \"parserLib\": \"commons\",\n  \"mode\": \"PERMISSIVE\",\n  \"charset\": \"UTF-8\",\n  \"inferSchema\": \"false\",\n  \"comment\": \"#\",\n  \"nullValue\": \"null\",\n  \"dateFormat\": \"yyyy-MM-dd\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"columns\": [\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"MKT_TAG\",\n      \"targetName\": \"mkt_tag\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"PROD_TAG\",\n      \"targetName\": \"prod_tag\",\n      \"nullable\": \"true\"\n    },\n    {\n      \"type\": \"string\",\n      \"sourceName\": \"PER_TAG\",\n      \"targetName\": \"per_tag\",\n      \"nullable\": \"true\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_fct\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[cs]",
      "predecessorName": "[FL] PG_BRD_FR_fact_data",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"manualSchema\": \"true\",\n  \"transformations\": [\n    {\n      \"columnType\": \"string\",\n      \"columnName\": \"test\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "CreateSchema",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen]",
      "operationDescription": "11-jan-24  -added code to filter rows with all measure columns null",
      "predecessorName": "[cs]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf = dict_all_dfs['df_dummy'][\\\"df_object\\\"]\\n\\nschema = StructType([\\nStructField(\\\"col1\\\",StringType(),True),\\nStructField(\\\"col2\\\",StringType(),True),\\nStructField(\\\"col3\\\",StringType(),True),\\nStructField(\\\"col4\\\",StringType(),True),\\nStructField(\\\"col5\\\",StringType(),True),\\nStructField(\\\"col6\\\",StringType(),True),\\nStructField(\\\"col7\\\",StringType(),True),\\nStructField(\\\"col8\\\",StringType(),True),\\nStructField(\\\"col9\\\",StringType(),True),\\nStructField(\\\"col10\\\",StringType(),True),\\nStructField(\\\"col11\\\",StringType(),True),\\nStructField(\\\"col12\\\",StringType(),True),\\nStructField(\\\"col13\\\",StringType(),True),\\nStructField(\\\"col14\\\",StringType(),True),\\nStructField(\\\"col15\\\",StringType(),True),\\nStructField(\\\"col16\\\",StringType(),True),\\nStructField(\\\"col17\\\",StringType(),True),\\nStructField(\\\"col18\\\",StringType(),True),\\nStructField(\\\"col19\\\",StringType(),True),\\nStructField(\\\"col20\\\",StringType(),True),\\nStructField(\\\"col21\\\",StringType(),True),\\nStructField(\\\"col22\\\",StringType(),True),\\nStructField(\\\"col23\\\",StringType(),True),\\nStructField(\\\"col24\\\",StringType(),True),\\nStructField(\\\"col25\\\",StringType(),True),\\nStructField(\\\"col26\\\",StringType(),True),\\nStructField(\\\"col27\\\",StringType(),True),\\nStructField(\\\"col28\\\",StringType(),True),\\nStructField(\\\"col29\\\",StringType(),True),\\nStructField(\\\"col30\\\",StringType(),True),\\nStructField(\\\"col31\\\",StringType(),True),\\nStructField(\\\"col32\\\",StringType(),True),\\nStructField(\\\"col33\\\",StringType(),True),\\nStructField(\\\"col34\\\",StringType(),True),\\nStructField(\\\"col35\\\",StringType(),True),\\nStructField(\\\"col36\\\",StringType(),True),\\nStructField(\\\"col37\\\",StringType(),True),\\nStructField(\\\"col38\\\",StringType(),True),\\nStructField(\\\"col39\\\",StringType(),True),\\nStructField(\\\"col40\\\",StringType(),True),\\nStructField(\\\"col41\\\",StringType(),True),\\nStructField(\\\"col42\\\",StringType(),True),\\nStructField(\\\"col43\\\",StringType(),True),\\nStructField(\\\"col44\\\",StringType(),True),\\nStructField(\\\"col45\\\",StringType(),True),\\nStructField(\\\"col46\\\",StringType(),True),\\nStructField(\\\"col47\\\",StringType(),True),\\nStructField(\\\"col48\\\",StringType(),True),\\nStructField(\\\"col49\\\",StringType(),True),\\nStructField(\\\"col50\\\",StringType(),True),\\nStructField(\\\"col51\\\",StringType(),True),\\nStructField(\\\"col52\\\",StringType(),True),\\nStructField(\\\"col53\\\",StringType(),True),\\nStructField(\\\"col54\\\",StringType(),True),\\nStructField(\\\"col55\\\",StringType(),True),\\nStructField(\\\"col56\\\",StringType(),True),\\nStructField(\\\"col57\\\",StringType(),True),\\nStructField(\\\"col58\\\",StringType(),True),\\nStructField(\\\"col59\\\",StringType(),True),\\nStructField(\\\"col60\\\",StringType(),True),\\nStructField(\\\"col61\\\",StringType(),True),\\nStructField(\\\"col62\\\",StringType(),True),\\nStructField(\\\"col63\\\",StringType(),True),\\nStructField(\\\"col64\\\",StringType(),True),\\nStructField(\\\"col65\\\",StringType(),True),\\nStructField(\\\"col66\\\",StringType(),True),\\nStructField(\\\"col67\\\",StringType(),True),\\nStructField(\\\"col68\\\",StringType(),True),\\nStructField(\\\"col69\\\",StringType(),True),\\nStructField(\\\"col70\\\",StringType(),True),\\nStructField(\\\"col71\\\",StringType(),True),\\nStructField(\\\"col72\\\",StringType(),True),\\nStructField(\\\"col73\\\",StringType(),True),\\nStructField(\\\"col74\\\",StringType(),True),\\nStructField(\\\"col75\\\",StringType(),True),\\nStructField(\\\"col76\\\",StringType(),True),\\nStructField(\\\"col77\\\",StringType(),True),\\nStructField(\\\"col78\\\",StringType(),True),\\nStructField(\\\"col79\\\",StringType(),True),\\nStructField(\\\"col80\\\",StringType(),True),\\nStructField(\\\"col81\\\",StringType(),True),\\nStructField(\\\"col82\\\",StringType(),True),\\nStructField(\\\"col83\\\",StringType(),True),\\nStructField(\\\"col84\\\",StringType(),True),\\nStructField(\\\"col85\\\",StringType(),True),\\nStructField(\\\"col86\\\",StringType(),True),\\nStructField(\\\"col87\\\",StringType(),True),\\nStructField(\\\"col88\\\",StringType(),True),\\nStructField(\\\"col89\\\",StringType(),True),\\nStructField(\\\"col90\\\",StringType(),True),\\nStructField(\\\"col91\\\",StringType(),True),\\nStructField(\\\"col92\\\",StringType(),True),\\nStructField(\\\"col93\\\",StringType(),True),\\nStructField(\\\"col94\\\",StringType(),True),\\nStructField(\\\"col95\\\",StringType(),True),\\nStructField(\\\"col96\\\",StringType(),True),\\nStructField(\\\"col97\\\",StringType(),True),\\nStructField(\\\"col98\\\",StringType(),True),\\nStructField(\\\"col99\\\",StringType(),True),\\nStructField(\\\"col100\\\",StringType(),True),\\nStructField(\\\"col101\\\",StringType(),True),\\nStructField(\\\"col102\\\",StringType(),True),\\nStructField(\\\"col103\\\",StringType(),True)\\n ])\\ndf = spark.read.format('csv').option('delimiter', '|').schema(schema).load('/mnt/<@@RAW_PATH@@>/*<<PROCESS_RUN_KEY>>*/*fact_data*.csv')\\n\\ncls = df.columns\\nj= 1\\nfor i in cls:\\n  df = df.withColumnRenamed(i, i.replace('_c', 'col')[:3]+str(j))\\n  j = j+1\\n\\nlst_excld_cols=[] \\nlst_check_cols = [col for col in df.columns if col not in lst_excld_cols]\\nstr_cond = ''\\nfor c in lst_check_cols:\\n  str_cond += f'{c} is not null or '\\nstr_cond = str_cond.rstrip('or ')\\n\\ndf.createOrReplaceTempView('fcts')\\ndf = spark.sql(f'''select * from fcts where {str_cond}''')\\n\\ndict_all_dfs['df_srce_fct'] = {\\\"df_object\\\" :df}\\ndf_output_dict['df_srce_fct'] = df\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_fct\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[filter]",
      "predecessorName": "[gen]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \" col1 != 'MKT_TAG' AND col2 != 'PROD_TAG' AND col3 != 'PER_TAG'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_fct\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_pre_mfct\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] initially materialize fact external",
      "predecessorName": "[filter]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_fct\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col85\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col86\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col87\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col88\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col89\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col90\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col91\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col92\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col93\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col94\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col95\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col96\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col97\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col98\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col99\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col100\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col101\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col102\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col103\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col1\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col2\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col3\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col4\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col5\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col6\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col7\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col8\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col9\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col10\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col11\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col12\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col13\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col14\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col15\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col16\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col17\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col18\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col19\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col20\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col21\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col22\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col23\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col24\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col25\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col26\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col27\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col28\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col29\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col30\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col31\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col32\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col33\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col34\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col35\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col36\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col37\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col38\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col39\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col40\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col41\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col42\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col43\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col44\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col45\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col46\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col47\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col48\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col49\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col50\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col51\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col52\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col53\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col54\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col55\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col56\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col57\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col58\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col59\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col60\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col61\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col62\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col63\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col64\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col65\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col66\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col67\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col68\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col69\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col70\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col71\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col72\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col73\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col74\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col75\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col76\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col77\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col78\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col79\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col80\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col81\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col82\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col83\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"col84\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_pre_mfct\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] finalize all fact data records",
      "predecessorName": "[CET] initially materialize fact external",
      "jsonSpecification": "{\r\n  \"active\": \"true\",\r\n  \"AddAllSourceColumns\": \"true\",\r\n  \"milestone\": \"false\",\r\n  \"saveOutputDfsToTempTable\": \"true\",\r\n  \"inputDataframes\": [\r\n    {\r\n      \"name\": \"df_srce_pre_mfct\"\r\n    }\r\n  ],\r\n  \"transformations\": [\r\n    {\r\n      \"transformation\": \"col1\",\r\n      \"columnName\": \"mkt_extrn_code\"\r\n    },\r\n    {\r\n      \"transformation\": \"col2\",\r\n      \"columnName\": \"prod_extrn_code\"\r\n    },\r\n    {\r\n      \"transformation\": \"col3\",\r\n      \"columnName\": \"time_extrn_code\"\r\n    },\r\n    {\r\n      \"transformation\": \"col4\",\r\n      \"columnName\": \"fact_amt_1\"\r\n    },\r\n    {\r\n      \"transformation\": \"col5\",\r\n      \"columnName\": \"fact_amt_2\"\r\n    },\r\n    {\r\n      \"transformation\": \"col6\",\r\n      \"columnName\": \"fact_amt_3\"\r\n    },\r\n    {\r\n      \"transformation\": \"col7\",\r\n      \"columnName\": \"fact_amt_4\"\r\n    },\r\n    {\r\n      \"transformation\": \"col8\",\r\n      \"columnName\": \"fact_amt_5\"\r\n    },\r\n    {\r\n      \"transformation\": \"col9\",\r\n      \"columnName\": \"fact_amt_6\"\r\n    },\r\n    {\r\n      \"transformation\": \"col10\",\r\n      \"columnName\": \"fact_amt_7\"\r\n    },\r\n    {\r\n      \"transformation\": \"col11\",\r\n      \"columnName\": \"fact_amt_8\"\r\n    },\r\n    {\r\n      \"transformation\": \"col12\",\r\n      \"columnName\": \"fact_amt_9\"\r\n    },\r\n    {\r\n      \"transformation\": \"col13\",\r\n      \"columnName\": \"fact_amt_10\"\r\n    },\r\n    {\r\n      \"transformation\": \"col14\",\r\n      \"columnName\": \"fact_amt_11\"\r\n    },\r\n    {\r\n      \"transformation\": \"col15\",\r\n      \"columnName\": \"fact_amt_12\"\r\n    },\r\n    {\r\n      \"transformation\": \"col16\",\r\n      \"columnName\": \"fact_amt_13\"\r\n    },\r\n    {\r\n      \"transformation\": \"col17\",\r\n      \"columnName\": \"fact_amt_14\"\r\n    },\r\n    {\r\n      \"transformation\": \"col18\",\r\n      \"columnName\": \"fact_amt_15\"\r\n    },\r\n    {\r\n      \"transformation\": \"col19\",\r\n      \"columnName\": \"fact_amt_16\"\r\n    },\r\n    {\r\n      \"transformation\": \"col20\",\r\n      \"columnName\": \"fact_amt_17\"\r\n    },\r\n    {\r\n      \"transformation\": \"col21\",\r\n      \"columnName\": \"fact_amt_18\"\r\n    },\r\n    {\r\n      \"transformation\": \"col22\",\r\n      \"columnName\": \"fact_amt_19\"\r\n    },\r\n    {\r\n      \"transformation\": \"col23\",\r\n      \"columnName\": \"fact_amt_20\"\r\n    },\r\n    {\r\n      \"transformation\": \"col24\",\r\n      \"columnName\": \"fact_amt_21\"\r\n    },\r\n    {\r\n      \"transformation\": \"col25\",\r\n      \"columnName\": \"fact_amt_22\"\r\n    },\r\n    {\r\n      \"transformation\": \"col26\",\r\n      \"columnName\": \"fact_amt_23\"\r\n    },\r\n    {\r\n      \"transformation\": \"col27\",\r\n      \"columnName\": \"fact_amt_24\"\r\n    },\r\n    {\r\n      \"transformation\": \"col28\",\r\n      \"columnName\": \"fact_amt_25\"\r\n    },\r\n    {\r\n      \"transformation\": \"col29\",\r\n      \"columnName\": \"fact_amt_26\"\r\n    },\r\n    {\r\n      \"transformation\": \"col30\",\r\n      \"columnName\": \"fact_amt_27\"\r\n    },\r\n    {\r\n      \"transformation\": \"col31\",\r\n      \"columnName\": \"fact_amt_28\"\r\n    },\r\n    {\r\n      \"transformation\": \"col32\",\r\n      \"columnName\": \"fact_amt_29\"\r\n    },\r\n    {\r\n      \"transformation\": \"col33\",\r\n      \"columnName\": \"fact_amt_30\"\r\n    },\r\n    {\r\n      \"transformation\": \"col34\",\r\n      \"columnName\": \"fact_amt_31\"\r\n    },\r\n    {\r\n      \"transformation\": \"col35\",\r\n      \"columnName\": \"fact_amt_32\"\r\n    },\r\n    {\r\n      \"transformation\": \"col36\",\r\n      \"columnName\": \"fact_amt_33\"\r\n    },\r\n    {\r\n      \"transformation\": \"col37\",\r\n      \"columnName\": \"fact_amt_34\"\r\n    },\r\n    {\r\n      \"transformation\": \"col38\",\r\n      \"columnName\": \"fact_amt_35\"\r\n    },\r\n    {\r\n      \"transformation\": \"col39\",\r\n      \"columnName\": \"fact_amt_36\"\r\n    },\r\n    {\r\n      \"transformation\": \"col40\",\r\n      \"columnName\": \"fact_amt_37\"\r\n    },\r\n    {\r\n      \"transformation\": \"col41\",\r\n      \"columnName\": \"fact_amt_38\"\r\n    },\r\n    {\r\n      \"transformation\": \"col42\",\r\n      \"columnName\": \"fact_amt_39\"\r\n    },\r\n    {\r\n      \"transformation\": \"col43\",\r\n      \"columnName\": \"fact_amt_40\"\r\n    },\r\n    {\r\n      \"transformation\": \"col44\",\r\n      \"columnName\": \"fact_amt_41\"\r\n    },\r\n    {\r\n      \"transformation\": \"col45\",\r\n      \"columnName\": \"fact_amt_42\"\r\n    },\r\n    {\r\n      \"transformation\": \"col46\",\r\n      \"columnName\": \"fact_amt_43\"\r\n    },\r\n    {\r\n      \"transformation\": \"col47\",\r\n      \"columnName\": \"fact_amt_44\"\r\n    },\r\n    {\r\n      \"transformation\": \"col48\",\r\n      \"columnName\": \"fact_amt_45\"\r\n    },\r\n    {\r\n      \"transformation\": \"col49\",\r\n      \"columnName\": \"fact_amt_46\"\r\n    },\r\n    {\r\n      \"transformation\": \"col50\",\r\n      \"columnName\": \"fact_amt_47\"\r\n    },\r\n    {\r\n      \"transformation\": \"col51\",\r\n      \"columnName\": \"fact_amt_48\"\r\n    },\r\n    {\r\n      \"transformation\": \"col52\",\r\n      \"columnName\": \"fact_amt_49\"\r\n    },\r\n    {\r\n      \"transformation\": \"col53\",\r\n      \"columnName\": \"fact_amt_50\"\r\n    },\r\n    {\r\n      \"transformation\": \"col54\",\r\n      \"columnName\": \"fact_amt_51\"\r\n    },\r\n    {\r\n      \"transformation\": \"col55\",\r\n      \"columnName\": \"fact_amt_52\"\r\n    },\r\n    {\r\n      \"transformation\": \"col56\",\r\n      \"columnName\": \"fact_amt_53\"\r\n    },\r\n    {\r\n      \"transformation\": \"col57\",\r\n      \"columnName\": \"fact_amt_54\"\r\n    },\r\n    {\r\n      \"transformation\": \"col58\",\r\n      \"columnName\": \"fact_amt_55\"\r\n    },\r\n    {\r\n      \"transformation\": \"col59\",\r\n      \"columnName\": \"fact_amt_56\"\r\n    },\r\n    {\r\n      \"transformation\": \"col60\",\r\n      \"columnName\": \"fact_amt_57\"\r\n    },\r\n    {\r\n      \"transformation\": \"col61\",\r\n      \"columnName\": \"fact_amt_58\"\r\n    },\r\n    {\r\n      \"transformation\": \"col62\",\r\n      \"columnName\": \"fact_amt_59\"\r\n    },\r\n    {\r\n      \"transformation\": \"col63\",\r\n      \"columnName\": \"fact_amt_60\"\r\n    },\r\n    {\r\n      \"transformation\": \"col64\",\r\n      \"columnName\": \"fact_amt_61\"\r\n    },\r\n    {\r\n      \"transformation\": \"col65\",\r\n      \"columnName\": \"fact_amt_62\"\r\n    },\r\n    {\r\n      \"transformation\": \"col66\",\r\n      \"columnName\": \"fact_amt_63\"\r\n    },\r\n    {\r\n      \"transformation\": \"col67\",\r\n      \"columnName\": \"fact_amt_64\"\r\n    },\r\n    {\r\n      \"transformation\": \"col68\",\r\n      \"columnName\": \"fact_amt_65\"\r\n    },\r\n    {\r\n      \"transformation\": \"col69\",\r\n      \"columnName\": \"fact_amt_66\"\r\n    },\r\n    {\r\n      \"transformation\": \"col70\",\r\n      \"columnName\": \"fact_amt_67\"\r\n    },\r\n    {\r\n      \"transformation\": \"col71\",\r\n      \"columnName\": \"fact_amt_68\"\r\n    },\r\n    {\r\n      \"transformation\": \"col72\",\r\n      \"columnName\": \"fact_amt_69\"\r\n    },\r\n    {\r\n      \"transformation\": \"col73\",\r\n      \"columnName\": \"fact_amt_70\"\r\n    },\r\n    {\r\n      \"transformation\": \"col74\",\r\n      \"columnName\": \"fact_amt_71\"\r\n    },\r\n    {\r\n      \"transformation\": \"col75\",\r\n      \"columnName\": \"fact_amt_72\"\r\n    },\r\n    {\r\n      \"transformation\": \"col76\",\r\n      \"columnName\": \"fact_amt_73\"\r\n    },\r\n    {\r\n      \"transformation\": \"col77\",\r\n      \"columnName\": \"fact_amt_74\"\r\n    },\r\n    {\r\n      \"transformation\": \"col78\",\r\n      \"columnName\": \"fact_amt_75\"\r\n    },\r\n    {\r\n      \"transformation\": \"col79\",\r\n      \"columnName\": \"fact_amt_76\"\r\n    },\r\n    {\r\n      \"transformation\": \"col80\",\r\n      \"columnName\": \"fact_amt_77\"\r\n    },\r\n    {\r\n      \"transformation\": \"col81\",\r\n      \"columnName\": \"fact_amt_78\"\r\n    },\r\n    {\r\n      \"transformation\": \"col82\",\r\n      \"columnName\": \"fact_amt_79\"\r\n    },\r\n    {\r\n      \"transformation\": \"col83\",\r\n      \"columnName\": \"fact_amt_80\"\r\n    },\r\n    {\r\n      \"transformation\": \"col84\",\r\n      \"columnName\": \"fact_amt_81\"\r\n    },\r\n    {\r\n      \"transformation\": \"col85\",\r\n      \"columnName\": \"fact_amt_82\"\r\n    },\r\n    {\r\n      \"transformation\": \"col86\",\r\n      \"columnName\": \"fact_amt_83\"\r\n    },\r\n    {\r\n      \"transformation\": \"col87\",\r\n      \"columnName\": \"fact_amt_84\"\r\n    },\r\n    {\r\n      \"transformation\": \"col88\",\r\n      \"columnName\": \"fact_amt_85\"\r\n    },\r\n    {\r\n      \"transformation\": \"col89\",\r\n      \"columnName\": \"fact_amt_86\"\r\n    },\r\n    {\r\n      \"transformation\": \"col90\",\r\n      \"columnName\": \"fact_amt_87\"\r\n    },\r\n    {\r\n      \"transformation\": \"col91\",\r\n      \"columnName\": \"fact_amt_88\"\r\n    },\r\n    {\r\n      \"transformation\": \"col92\",\r\n      \"columnName\": \"fact_amt_89\"\r\n    },\r\n    {\r\n      \"transformation\": \"col93\",\r\n      \"columnName\": \"fact_amt_90\"\r\n    },\r\n    {\r\n      \"transformation\": \"col94\",\r\n      \"columnName\": \"fact_amt_91\"\r\n    },\r\n    {\r\n      \"transformation\": \"col95\",\r\n      \"columnName\": \"fact_amt_92\"\r\n    },\r\n    {\r\n      \"transformation\": \"col96\",\r\n      \"columnName\": \"fact_amt_93\"\r\n    },\r\n    {\r\n      \"transformation\": \"col97\",\r\n      \"columnName\": \"fact_amt_94\"\r\n    },\r\n    {\r\n      \"transformation\": \"col98\",\r\n      \"columnName\": \"fact_amt_95\"\r\n    },\r\n    {\r\n      \"transformation\": \"col99\",\r\n      \"columnName\": \"fact_amt_96\"\r\n    },\r\n    {\r\n      \"transformation\": \"col100\",\r\n      \"columnName\": \"fact_amt_97\"\r\n    },\r\n    {\r\n      \"transformation\": \"col101\",\r\n      \"columnName\": \"fact_amt_98\"\r\n    },\r\n    {\r\n      \"transformation\": \"col102\",\r\n      \"columnName\": \"fact_amt_99\"\r\n    },\r\n    {\r\n      \"transformation\": \"col103\",\r\n      \"columnName\": \"fact_amt_100\"\r\n    }\r\n  ],\r\n  \"outputDataframes\": [\r\n    {\r\n      \"name\": \"df_srce_mfct\",\r\n      \"cache\": \"materialize\"\r\n    }\r\n  ]\r\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] line_num",
      "predecessorName": "[CET] finalize all fact data records",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_srce_mfct = dict_all_dfs['df_srce_mfct'][\\\"df_object\\\"]\\n\\ncntrt_id= <<CNTRT_ID>>\\nprod_prttn_code='<<PROD_PRTTN_CODE>>'\\nsrce_sys_id= <<SRCE_SYS_ID>>\\nrun_id= <<PROCESS_RUN_KEY>>\\nrcd_orign_code='B'\\n\\nfrom pyspark.sql.functions import lit \\nfrom pyspark.sql.window import Window\\n\\nfrom pyspark.sql.functions import monotonically_increasing_id,row_number\\n\\ndf_srce_mfct = df_srce_mfct.withColumn(\\\"line_num\\\",row_number().over(Window.orderBy(monotonically_increasing_id())))\\ndf_srce_mfct = df_srce_mfct.withColumn(\\\"prod_prttn_code\\\",lit(prod_prttn_code))\\ndf_srce_mfct = df_srce_mfct.withColumn(\\\"cntrt_id\\\",lit(cntrt_id))\\ndf_srce_mfct = df_srce_mfct.withColumn(\\\"srce_sys_id\\\",lit(srce_sys_id))\\ndf_srce_mfct = df_srce_mfct.withColumn(\\\"run_id\\\",lit(run_id))\\ndf_srce_mfct = df_srce_mfct.withColumn(\\\"rcd_orign_code\\\",lit(rcd_orign_code))\\n\\n\\ndict_all_dfs['df_srce_mfct'] = {\\\"df_object\\\" :df_srce_mfct}\\ndf_output_dict['df_srce_mfct'] = df_srce_mfct\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_mfct\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_srce_mfct\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Update Delivery Status(phase id 2, status id 3)",
      "predecessorName": "[Gen] line_num",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\n\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\nrows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 2, 1, 3, <<PROCESS_RUN_KEY>>]]\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"parquet\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_DLVRY_RUN_LKP\\\")\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "DVM - File Structure Validation - Inputs",
      "predecessorName": "Update Delivery Status(phase id 2, status id 3)",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_file_structure_inputs_sff\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "DVM - File Structure Validations",
      "predecessorName": "DVM - File Structure Validation - Inputs",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_file_structure_validation_sff\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "Update Delivery Status (phase id 5, status id 2)",
      "predecessorName": "DVM - File Structure Validations",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\n\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\nrows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 5, 1, 2, <<PROCESS_RUN_KEY>>]]\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"parquet\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_DLVRY_RUN_LKP\\\")\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] mm_prod_sdim",
      "predecessorName": "Update Delivery Status (phase id 5, status id 2)",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SDIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"partitions\": \"part_srce_sys_id=<<SRCE_SYS_ID>>\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "Load df_mm_prod_sdim_vw_schema",
      "operationDescription": "18-dec-23 --new step to load df_mm_prod_sdim_vw_schema",
      "predecessorName": "[FL] mm_prod_sdim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.functions import *\\n\\n\\n\\ndf_mm_prod_sdim_vw_schema = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_PROD_SDIM_VW_SCHEMA\\\")\\n\\ndf_output_dict['df_mm_prod_sdim_vw_schema'] = df_mm_prod_sdim_vw_schema\\ndict_all_dfs['df_mm_prod_sdim_vw_schema'] = {\\\"df_object\\\" :df_mm_prod_sdim_vw_schema}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim_vw_schema\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] mm_prod_sdim 1.1",
      "operationDescription": "18-dec-23 --changed this step to load prod sdim from part_srce_sys_id",
      "predecessorName": "Load df_mm_prod_sdim_vw_schema",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_SDIM_VW/part_srce_sys_id=<<SRCE_SYS_ID>>/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_PROD_SDIM_VW/",
      "operationDescription": "18-dec-23 --changed this step to release semaphore prod sdim from part_srce_sys_id",
      "predecessorName": "[FL] mm_prod_sdim 1.1",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_SDIM_VW/part_srce_sys_id=<<SRCE_SYS_ID>>/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[cet] add part srce sys id",
      "operationDescription": "18-dec-23 --new step to add part_srce_sys_id partition column",
      "predecessorName": "release MM_PROD_SDIM_VW/",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"round(srce_sys_id,0)\",\n      \"columnName\": \"part_srce_sys_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] cc mm_prod_sdim",
      "operationDescription": "18-dec-23 --new step to cc mm_prod_sdim with schema",
      "predecessorName": "[cet] add part srce sys id",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_mm_prod_sdim = dict_all_dfs['df_mm_prod_sdim'][\\\"df_object\\\"]\\ndf_mm_prod_sdim_vw_schema = dict_all_dfs['df_mm_prod_sdim_vw_schema'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_mm_prod_sdim.columns\\nsdim_cols = df_mm_prod_sdim_vw_schema.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_mm_prod_sdim = df_mm_prod_sdim.withColumn(i,lit(None).cast('string'))\\n\\ndf_mm_prod_sdim = df_mm_prod_sdim.select(*sdim_cols)\\ncols = df_mm_prod_sdim.columns\\n\\nfor j in cols:\\n  if dict(df_mm_prod_sdim.dtypes)[j] != dict(df_mm_prod_sdim_vw_schema.dtypes)[j]:\\n    df_mm_prod_sdim = df_mm_prod_sdim.withColumn(j, col(j).cast(dict(df_mm_prod_sdim_vw_schema.dtypes)[j]))\\n\\ndict_all_dfs['df_mm_prod_sdim'] = {\\\"df_object\\\" :df_mm_prod_sdim}\\ndf_output_dict['df_mm_prod_sdim'] = df_mm_prod_sdim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    },\n    {\n      \"name\": \"df_mm_prod_sdim_vw_schema\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Filter based on SSID",
      "predecessorName": "[Gen] cc mm_prod_sdim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"part_srce_sys_id=<<SRCE_SYS_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[distinct] to remove duplicates in sdim",
      "predecessorName": "Filter based on SSID",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\n \\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n \\n\\ndf_mm_prod_sdim = dict_all_dfs['df_mm_prod_sdim'][\\\"df_object\\\"]\\n\\n \\n\\ndf_mm_prod_sdim = df_mm_prod_sdim .distinct()\\n\\n \\n\\ndict_all_dfs['df_mm_prod_sdim'] = {\\\"df_object\\\" :df_mm_prod_sdim}\\ndf_output_dict['df_mm_prod_sdim'] = df_mm_prod_sdim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on MM_PROD_SDIM",
      "predecessorName": "[distinct] to remove duplicates in sdim",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"pg_plr_txt\",\n      \"columnName\": \"pg_plr_txt\"\n    },\n    {\n      \"transformation\": \"plr_txt\",\n      \"columnName\": \"plr_txt\"\n    },\n    {\n      \"transformation\": \"basic_size_txt\",\n      \"columnName\": \"basic_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_basic_size_txt\",\n      \"columnName\": \"pg_basic_size_txt\"\n    },\n    {\n      \"transformation\": \"aisle_txt\",\n      \"columnName\": \"aisle_txt\"\n    },\n    {\n      \"transformation\": \"categ_gift_set_txt\",\n      \"columnName\": \"categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"clnsg_exprc_txt\",\n      \"columnName\": \"clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"gca_top_sheet_def_txt\",\n      \"columnName\": \"gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"globl_pack_type_txt\",\n      \"columnName\": \"globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"grp_benft_txt\",\n      \"columnName\": \"grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_aisle_txt\",\n      \"columnName\": \"pg_aisle_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_gift_set_txt\",\n      \"columnName\": \"pg_categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"pg_clnsg_exprc_txt\",\n      \"columnName\": \"pg_clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"pg_gca_top_sheet_def_txt\",\n      \"columnName\": \"pg_gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"pg_globl_pack_type_txt\",\n      \"columnName\": \"pg_globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_grp_benft_txt\",\n      \"columnName\": \"pg_grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_scent_grp_txt\",\n      \"columnName\": \"pg_scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"pg_shelf_seg_txt\",\n      \"columnName\": \"pg_shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_style_txt\",\n      \"columnName\": \"pg_style_txt\"\n    },\n    {\n      \"transformation\": \"scent_grp_txt\",\n      \"columnName\": \"scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"shelf_seg_txt\",\n      \"columnName\": \"shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_us_offcl_txt\",\n      \"columnName\": \"pg_us_offcl_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_10_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_11_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_12_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_13_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_14_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_15_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"prod_16_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"pg_last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"pg_task_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"task_txt\"\n    },\n    {\n      \"transformation\": \"prod_skid\",\n      \"columnName\": \"prod_skid\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"extrn_prod_id\",\n      \"columnName\": \"extrn_prod_id\"\n    },\n    {\n      \"transformation\": \"prod_name\",\n      \"columnName\": \"prod_name\"\n    },\n    {\n      \"transformation\": \"prod_desc\",\n      \"columnName\": \"prod_desc\"\n    },\n    {\n      \"transformation\": \"prod_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"all_prod_name\",\n      \"columnName\": \"all_prod_name\"\n    },\n    {\n      \"transformation\": \"gbu_id\",\n      \"columnName\": \"gbu_id\"\n    },\n    {\n      \"transformation\": \"sub_gbu_id\",\n      \"columnName\": \"sub_gbu_id\"\n    },\n    {\n      \"transformation\": \"categ_id\",\n      \"columnName\": \"categ_id\"\n    },\n    {\n      \"transformation\": \"pg_age_txt\",\n      \"columnName\": \"pg_age_txt\"\n    },\n    {\n      \"transformation\": \"pg_stain_fight_txt\",\n      \"columnName\": \"pg_stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"pg_val_add_txt\",\n      \"columnName\": \"pg_val_add_txt\"\n    },\n    {\n      \"transformation\": \"pg_ozs_per_load_txt\",\n      \"columnName\": \"pg_ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"pg_mach_type_txt\",\n      \"columnName\": \"pg_mach_type_txt\"\n    },\n    {\n      \"transformation\": \"age_txt\",\n      \"columnName\": \"age_txt\"\n    },\n    {\n      \"transformation\": \"stain_fight_txt\",\n      \"columnName\": \"stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"val_add_txt\",\n      \"columnName\": \"val_add_txt\"\n    },\n    {\n      \"transformation\": \"ozs_per_load_txt\",\n      \"columnName\": \"ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"mach_type_txt\",\n      \"columnName\": \"mach_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_prmtd_prod_id\",\n      \"columnName\": \"pg_prmtd_prod_id\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"match_lvl_code\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"extrn_prod_seq_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"pg_sub_sectr_txt\"\n    },\n    {\n      \"transformation\": \"Cast(null as STRING)\",\n      \"columnName\": \"parnt_prod_skid\"\n    },\n    {\n      \"transformation\": \"pg_varnt\",\n      \"columnName\": \"pg_varnt\"\n    },\n    {\n      \"transformation\": \"pg_price_rottn\",\n      \"columnName\": \"pg_price_rottn\"\n    },\n    {\n      \"transformation\": \"pg_sub_brand_txt\",\n      \"columnName\": \"pg_sub_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_trgt_user\",\n      \"columnName\": \"pg_trgt_user\"\n    },\n    {\n      \"transformation\": \"pg_type_txt\",\n      \"columnName\": \"pg_type_txt\"\n    },\n    {\n      \"transformation\": \"custm_agg_ind\",\n      \"columnName\": \"custm_agg_ind\"\n    },\n    {\n      \"transformation\": \"pg_base_size_txt\",\n      \"columnName\": \"pg_base_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_brand_txt\",\n      \"columnName\": \"pg_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_txt\",\n      \"columnName\": \"pg_categ_txt\"\n    },\n    {\n      \"transformation\": \"pg_form_txt\",\n      \"columnName\": \"pg_form_txt\"\n    },\n    {\n      \"transformation\": \"pg_mfgr_txt\",\n      \"columnName\": \"pg_mfgr_txt\"\n    },\n    {\n      \"transformation\": \"pg_seg_txt\",\n      \"columnName\": \"pg_seg_txt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] on MM_PROD_SDIM",
      "predecessorName": "[CET] on MM_PROD_SDIM",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"cntrt_id= <<CNTRT_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_sdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_csdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] MM_PROD_XREF",
      "predecessorName": "[FIL] on MM_PROD_SDIM",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_XREF/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_PROD_XREF",
      "predecessorName": "[FL] MM_PROD_XREF",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_XREF/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[distinct] to remove duplicates in xref",
      "predecessorName": "release MM_PROD_XREF",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\n \\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n \\n\\ndf_mm_prod_xref = dict_all_dfs['df_mm_prod_xref'][\\\"df_object\\\"]\\n\\n \\n\\ndf_mm_prod_xref = df_mm_prod_xref .distinct()\\n\\n \\n\\ndict_all_dfs['df_mm_prod_xref'] = {\\\"df_object\\\" :df_mm_prod_xref}\\ndf_output_dict['df_mm_prod_xref'] = df_mm_prod_xref\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Refresh Xref",
      "predecessorName": "[distinct] to remove duplicates in xref",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf = dict_all_dfs['df_mm_prod_xref'][\\\"df_object\\\"]\\n\\ndf.createOrReplaceTempView('df_mm_prod_xref')\\nrefresh = \\\"REFRESH table df_mm_prod_xref\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from df_mm_prod_xref\\\"\\ndf_out = spark.sql(query)\\n\\ndf_output_dict['df_mm_prod_xref'] = df_out\\ndict_all_dfs['df_mm_prod_xref'] = {\\\"df_object\\\" :df_out}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[GE] Generic for prod_xref",
      "predecessorName": "Refresh Xref",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import StructType,StructField, StringType, IntegerType\\nfrom pyspark.sql.functions import *\\n\\nprod_prttn_code = '<<PROD_PRTTN_CODE>>'\\nsrce_sys_id = <<SRCE_SYS_ID>>\\ncntrt_id = <<CNTRT_ID>>\\nrun_id = <<PROCESS_RUN_KEY>>\\n\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\n\\n# Read - MM_CATEG_STRCT_ASSOC\\nmm_categ_strct_assoc = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_CATEG_STRCT_ASSOC\\\")\\nmm_categ_strct_assoc.createOrReplaceTempView('MM_CATEG_STRCT_ASSOC')\\n\\n# Read - MM_STRCT_LVL_LKP\\nmm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_STRCT_LVL_LKP\\\")\\nmm_strct_lvl_lkp.createOrReplaceTempView('MM_STRCT_LVL_LKP')\\n\\n# Read - MM_ATTR_LKP\\nmm_attr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_ATTR_LKP\\\")\\nmm_attr_lkp.createOrReplaceTempView('MM_ATTR_LKP')\\n\\ndf_max_lvl = spark.sql('''\\nselect round(max(sll.lvl_num)) max_lvl from MM_CATEG_STRCT_ASSOC csa \\njoin MM_STRCT_LVL_LKP sll \\non sll.strct_id = csa.strct_id \\njoin MM_ATTR_LKP al \\non al.attr_id = sll.attr_id\\nwhere csa.categ_id = '<<CATEGORY_ID>>' and csa.STRCT_NUM = '1'\\n''')\\n\\ndf_max_lvl = df_max_lvl.withColumn(\\\"prod_lvl_name\\\",col(\\\"max_lvl\\\").cast(IntegerType())).withColumn('srce_sys_id1',lit(srce_sys_id))\\n\\ndf_mm_prod_xref = spark.read.parquet('/mnt/<@@PATH1@@>MM_PROD_XREF/')\\n\\n#split_col = pyspark.sql.functions.split(df_mm_prod_xref['extrn_prod_attr_val_list'], ' ')\\n \\ndf_mm_prod_xref = df_mm_prod_xref.withColumn('prod_skid',when(col('prod_skid').isNull(),None).otherwise(df_mm_prod_xref.prod_skid)) \\\\\\n        .withColumn('extrn_prod_attr_val_list_old',when(col('extrn_prod_attr_val_list').isNull(),None).otherwise(col('extrn_prod_attr_val_list'))) \\\\\\n         .withColumn('prod_match_attr_list_old',when(col('prod_match_attr_list').isNull(),None).otherwise(col('prod_match_attr_list')))\\n\\n\\ndf_join = df_mm_prod_xref.join(df_max_lvl,df_mm_prod_xref.srce_sys_id ==  df_max_lvl.srce_sys_id1,\\\"inner\\\").drop(\\\"srce_sys_id1\\\")\\n\\ndf_mm_prod_xref = df_join\\n\\n\\n\\ndf_output_dict['df_mm_prod_xref2'] = df_mm_prod_xref\\ndict_all_dfs['df_mm_prod_xref2'] = {\\\"df_object\\\" :df_mm_prod_xref}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref2\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Refresh Xref2",
      "predecessorName": "[GE] Generic for prod_xref",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf = dict_all_dfs['df_mm_prod_xref2'][\\\"df_object\\\"]\\n\\ndf.createOrReplaceTempView('df_mm_prod_xref2')\\nrefresh = \\\"REFRESH table df_mm_prod_xref2\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from df_mm_prod_xref2\\\"\\ndf_out = spark.sql(query)\\n\\ndf_output_dict['df_mm_prod_xref2'] = df_out\\ndict_all_dfs['df_mm_prod_xref2'] = {\\\"df_object\\\" :df_out}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref2\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref2\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] on mm_prod_xref",
      "predecessorName": "Refresh Xref2",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"cntrt_id = <<CNTRT_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref2\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] mm_prod_dim",
      "predecessorName": "[FIL] on mm_prod_xref",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_DIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"partitions\": \"part_srce_sys_id=<<SRCE_SYS_ID>>\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] mm_prod_dim - 1.1",
      "predecessorName": "[FL] mm_prod_dim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_DIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"true\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "release MM_PROD_DIM_VW",
      "predecessorName": "[FL] mm_prod_dim - 1.1",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_DIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Filter SSID",
      "predecessorName": "release MM_PROD_DIM_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"part_srce_sys_id=<<SRCE_SYS_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[distinct] to remove duplicates ",
      "predecessorName": "Filter SSID",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\n \\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n \\n\\ndf_prod_dim = dict_all_dfs['df_prod_dim'][\\\"df_object\\\"]\\n\\n \\n\\ndf_prod_dim = df_prod_dim .distinct()\\n\\n \\n\\ndict_all_dfs['df_prod_dim'] = {\\\"df_object\\\" :df_prod_dim}\\ndf_output_dict['df_prod_dim'] = df_prod_dim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Refresh Prod DIM",
      "predecessorName": "[distinct] to remove duplicates ",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf = dict_all_dfs['df_prod_dim'][\\\"df_object\\\"]\\n\\ndf.createOrReplaceTempView('df_prod_dim')\\nrefresh = \\\"REFRESH table df_prod_dim\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from df_prod_dim\\\"\\ndf_out = spark.sql(query)\\n\\ndf_output_dict['df_prod_dim'] = df_out\\ndict_all_dfs['df_prod_dim'] = {\\\"df_object\\\" :df_out}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on mm_prod_dim",
      "predecessorName": "Refresh Prod DIM",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"task_txt\"\n    },\n    {\n      \"transformation\": \"pg_age_txt\",\n      \"columnName\": \"pg_age_txt\"\n    },\n    {\n      \"transformation\": \"pg_stain_fight_txt\",\n      \"columnName\": \"pg_stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"pg_val_add_txt\",\n      \"columnName\": \"pg_val_add_txt\"\n    },\n    {\n      \"transformation\": \"pg_ozs_per_load_txt\",\n      \"columnName\": \"pg_ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"pg_mach_type_txt\",\n      \"columnName\": \"pg_mach_type_txt\"\n    },\n    {\n      \"transformation\": \"age_txt\",\n      \"columnName\": \"age_txt\"\n    },\n    {\n      \"transformation\": \"stain_fight_txt\",\n      \"columnName\": \"stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"val_add_txt\",\n      \"columnName\": \"val_add_txt\"\n    },\n    {\n      \"transformation\": \"ozs_per_load_txt\",\n      \"columnName\": \"ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"mach_type_txt\",\n      \"columnName\": \"mach_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_prmtd_prod_id\",\n      \"columnName\": \"pg_prmtd_prod_id\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"match_lvl_code\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"extrn_prod_seq_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"pg_sub_sectr_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"parnt_prod_skid\"\n    },\n    {\n      \"transformation\": \"pg_price_rottn\",\n      \"columnName\": \"pg_price_rottn\"\n    },\n    {\n      \"transformation\": \"pg_plr_txt\",\n      \"columnName\": \"pg_plr_txt\"\n    },\n    {\n      \"transformation\": \"plr_txt\",\n      \"columnName\": \"plr_txt\"\n    },\n    {\n      \"transformation\": \"basic_size_txt\",\n      \"columnName\": \"basic_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_basic_size_txt\",\n      \"columnName\": \"pg_basic_size_txt\"\n    },\n    {\n      \"transformation\": \"aisle_txt\",\n      \"columnName\": \"aisle_txt\"\n    },\n    {\n      \"transformation\": \"categ_gift_set_txt\",\n      \"columnName\": \"categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"clnsg_exprc_txt\",\n      \"columnName\": \"clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"gca_top_sheet_def_txt\",\n      \"columnName\": \"gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"globl_pack_type_txt\",\n      \"columnName\": \"globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"grp_benft_txt\",\n      \"columnName\": \"grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_aisle_txt\",\n      \"columnName\": \"pg_aisle_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_gift_set_txt\",\n      \"columnName\": \"pg_categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"pg_clnsg_exprc_txt\",\n      \"columnName\": \"pg_clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"pg_gca_top_sheet_def_txt\",\n      \"columnName\": \"pg_gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"pg_globl_pack_type_txt\",\n      \"columnName\": \"pg_globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_grp_benft_txt\",\n      \"columnName\": \"pg_grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_scent_grp_txt\",\n      \"columnName\": \"pg_scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"pg_shelf_seg_txt\",\n      \"columnName\": \"pg_shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_style_txt\",\n      \"columnName\": \"pg_style_txt\"\n    },\n    {\n      \"transformation\": \"scent_grp_txt\",\n      \"columnName\": \"scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"shelf_seg_txt\",\n      \"columnName\": \"shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_us_offcl_txt\",\n      \"columnName\": \"pg_us_offcl_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_10_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_11_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_12_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_13_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_14_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_15_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"prod_16_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"pg_last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"pg_task_txt\",\n      \"columnName\": \"pg_task_txt\"\n    },\n    {\n      \"transformation\": \"pg_seg_txt\",\n      \"columnName\": \"pg_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_sub_brand_txt\",\n      \"columnName\": \"pg_sub_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_trgt_user\",\n      \"columnName\": \"pg_trgt_user\"\n    },\n    {\n      \"transformation\": \"pg_type_txt\",\n      \"columnName\": \"pg_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_varnt\",\n      \"columnName\": \"pg_varnt\"\n    },\n    {\n      \"transformation\": \"prod_skid\",\n      \"columnName\": \"prod_skid\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"prod_name\",\n      \"columnName\": \"prod_name\"\n    },\n    {\n      \"transformation\": \"prod_desc\",\n      \"columnName\": \"prod_desc\"\n    },\n    {\n      \"transformation\": \"prod_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"all_prod_name\",\n      \"columnName\": \"all_prod_name\"\n    },\n    {\n      \"transformation\": \"gbu_id\",\n      \"columnName\": \"gbu_id\"\n    },\n    {\n      \"transformation\": \"sub_gbu_id\",\n      \"columnName\": \"sub_gbu_id\"\n    },\n    {\n      \"transformation\": \"categ_id\",\n      \"columnName\": \"categ_id\"\n    },\n    {\n      \"transformation\": \"custm_agg_ind\",\n      \"columnName\": \"custm_agg_ind\"\n    },\n    {\n      \"transformation\": \"pg_base_size_txt\",\n      \"columnName\": \"pg_base_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_brand_txt\",\n      \"columnName\": \"pg_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_txt\",\n      \"columnName\": \"pg_categ_txt\"\n    },\n    {\n      \"transformation\": \"pg_form_txt\",\n      \"columnName\": \"pg_form_txt\"\n    },\n    {\n      \"transformation\": \"pg_mfgr_txt\",\n      \"columnName\": \"pg_mfgr_txt\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] on mm_prod_dim",
      "predecessorName": "[CET] on mm_prod_dim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"cntrt_id = <<CNTRT_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_cdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL]MM_CATEG_STRCT_ATTR_ASSOC_VW",
      "predecessorName": "[FIL] on mm_prod_dim",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"parquet\",\n  \"path\": \"bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_CATEG_STRCT_ATTR_ASSOC_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-load]  mm_categ_strct_attr_assoc_vw",
      "predecessorName": "[FL]MM_CATEG_STRCT_ATTR_ASSOC_VW",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\n\\ndf_categ_strct_attr_assoc_vw = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_CATEG_STRCT_ATTR_ASSOC_VW\\\")\\n\\n\\ndict_all_dfs['df_categ_strct_attr_assoc_vw'] = {\\\"df_object\\\" :df_categ_strct_attr_assoc_vw}\\ndf_output_dict['df_categ_strct_attr_assoc_vw'] = df_categ_strct_attr_assoc_vw\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_cdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR1 df_categ_.._vw",
      "predecessorName": "[GEN-load]  mm_categ_strct_attr_assoc_vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=1\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_1",
      "predecessorName": "[FL] ATTR1 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_1\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_1\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_1\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_1\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR2 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_1",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=2\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_2\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_2",
      "predecessorName": "[FL] ATTR2 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_2\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_2\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_2\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_2\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_2\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR3 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_2",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=3\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_3\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_3",
      "predecessorName": "[FL] ATTR3 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_3\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_3\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_3\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_3\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_3\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR4 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_3",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=4\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_4\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_4",
      "predecessorName": "[FL] ATTR4 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_4\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_4\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_4\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_4\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_4\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR5 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_4",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=5\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_5\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_5",
      "predecessorName": "[FL] ATTR5 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_5\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_5\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_5\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_5\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_5\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR6 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_5",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=6\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_6\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_6",
      "predecessorName": "[FL] ATTR6 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_6\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_6\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_6\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_6\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_6\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR7 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_6",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=7\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_7\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_7",
      "predecessorName": "[FL] ATTR7 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_7\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_7\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_7\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_7\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_7\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR8 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_7",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=8\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_8\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_8",
      "predecessorName": "[FL] ATTR8 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_8\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_8\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_8\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_8\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_8\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] ATTR9 df_categ_.._vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_8",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"lvl_num=9\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_9\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on df_categ_strct_attr_assoc_vw_9",
      "predecessorName": "[FL] ATTR9 df_categ_.._vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_9\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_phys_name\",\n      \"columnName\": \"attr_phys_name_9\"\n    },\n    {\n      \"transformation\": \"attr_id\",\n      \"columnName\": \"attr_id_9\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"attr_name_9\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_9\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] prod_lvl df_categ_strct_attr_assoc_vw",
      "predecessorName": "[CET] on df_categ_strct_attr_assoc_vw_9",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"strct_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"attr_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"cast(null as STRING)\",\n      \"columnName\": \"row_chng_desc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_categ_strct_attr_assoc_prod_lvl_vw\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[MJ] get product attr names,column names",
      "predecessorName": "[CET] prod_lvl df_categ_strct_attr_assoc_vw",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_mprod\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"lvl_num\",\n          \"columnAlias\": \"lvl_num\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_1\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr1\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_1\",\n          \"columnAlias\": \"attr_phys_name_1\"\n        },\n        {\n          \"columnName\": \"attr_id_1\",\n          \"columnAlias\": \"attr_id_1\"\n        },\n        {\n          \"columnName\": \"attr_name_1\",\n          \"columnAlias\": \"attr_name_1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_2\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr2\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_2\",\n          \"columnAlias\": \"attr_phys_name_2\"\n        },\n        {\n          \"columnName\": \"attr_id_2\",\n          \"columnAlias\": \"attr_id_2\"\n        },\n        {\n          \"columnName\": \"attr_name_2\",\n          \"columnAlias\": \"attr_name_2\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_3\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr3\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_3\",\n          \"columnAlias\": \"attr_phys_name_3\"\n        },\n        {\n          \"columnName\": \"attr_id_3\",\n          \"columnAlias\": \"attr_id_3\"\n        },\n        {\n          \"columnName\": \"attr_name_3\",\n          \"columnAlias\": \"attr_name_3\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_4\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr4\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_4\",\n          \"columnAlias\": \"attr_phys_name_4\"\n        },\n        {\n          \"columnName\": \"attr_id_4\",\n          \"columnAlias\": \"attr_id_4\"\n        },\n        {\n          \"columnName\": \"attr_name_4\",\n          \"columnAlias\": \"attr_name_4\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_5\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr5\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_5\",\n          \"columnAlias\": \"attr_phys_name_5\"\n        },\n        {\n          \"columnName\": \"attr_id_5\",\n          \"columnAlias\": \"attr_id_5\"\n        },\n        {\n          \"columnName\": \"attr_name_5\",\n          \"columnAlias\": \"attr_name_5\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_6\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr6\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_6\",\n          \"columnAlias\": \"attr_phys_name_6\"\n        },\n        {\n          \"columnName\": \"attr_id_6\",\n          \"columnAlias\": \"attr_id_6\"\n        },\n        {\n          \"columnName\": \"attr_name_6\",\n          \"columnAlias\": \"attr_name_6\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_7\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr7\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_7\",\n          \"columnAlias\": \"attr_phys_name_7\"\n        },\n        {\n          \"columnName\": \"attr_id_7\",\n          \"columnAlias\": \"attr_id_7\"\n        },\n        {\n          \"columnName\": \"attr_name_7\",\n          \"columnAlias\": \"attr_name_7\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_8\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr8\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_8\",\n          \"columnAlias\": \"attr_phys_name_8\"\n        },\n        {\n          \"columnName\": \"attr_id_8\",\n          \"columnAlias\": \"attr_id_8\"\n        },\n        {\n          \"columnName\": \"attr_name_8\",\n          \"columnAlias\": \"attr_name_8\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_vw_9\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"attr9\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_phys_name_9\",\n          \"columnAlias\": \"attr_phys_name_9\"\n        },\n        {\n          \"columnName\": \"attr_id_9\",\n          \"columnAlias\": \"attr_id_9\"\n        },\n        {\n          \"columnName\": \"attr_name_9\",\n          \"columnAlias\": \"attr_name_9\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_categ_strct_attr_assoc_prod_lvl_vw\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"prod_lvl\",\n      \"columns\": [\n       {\n          \"columnName\": \"prod_lvl_id\",\n          \"columnAlias\": \"prod_lvl_id\"\n        },\n        {\n          \"columnName\": \"prod_lvl_name\",\n          \"columnAlias\": \"prod_lvl_name\"\n        },\n        {\n          \"columnName\": \"row_chng_desc\",\n          \"columnAlias\": \"row_chng_desc\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr1\",\n      \"joinExpression\": \"input.attr_code_1 = attr1.categ_id and input.attr_code_0 = attr1.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr2\",\n      \"joinExpression\": \"input.attr_code_1 = attr2.categ_id and input.attr_code_0 = attr2.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr3\",\n      \"joinExpression\": \"input.attr_code_1 = attr3.categ_id and input.attr_code_0 = attr3.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr4\",\n      \"joinExpression\": \"input.attr_code_1 = attr4.categ_id and input.attr_code_0 = attr4.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr5\",\n      \"joinExpression\": \"input.attr_code_1 = attr5.categ_id and input.attr_code_0 = attr5.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr6\",\n      \"joinExpression\": \"input.attr_code_1 = attr6.categ_id and input.attr_code_0 = attr6.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr7\",\n      \"joinExpression\": \"input.attr_code_1 = attr7.categ_id and input.attr_code_0 = attr7.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr8\",\n      \"joinExpression\": \"input.attr_code_1 = attr8.categ_id and input.attr_code_0 = attr8.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"attr9\",\n      \"joinExpression\": \"input.attr_code_1 = attr9.categ_id and input.attr_code_0 = attr9.strct_num\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"prod_lvl\",\n      \"joinExpression\": \"input.attr_code_1 = prod_lvl.categ_id and input.attr_code_0 = prod_lvl.strct_num and input.lvl_num = prod_lvl.lvl_num\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_gan\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] normalize product attr codes to columns",
      "predecessorName": "[MJ] get product attr names,column names",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gan\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_name_6\",\n      \"columnName\": \"attr_name_6\"\n    },\n    {\n      \"transformation\": \"attr_id_7\",\n      \"columnName\": \"attr_id_7\"\n    },\n    {\n      \"transformation\": \"attr_name_7\",\n      \"columnName\": \"attr_name_7\"\n    },\n    {\n      \"transformation\": \"attr_id_8\",\n      \"columnName\": \"attr_id_8\"\n    },\n    {\n      \"transformation\": \"attr_name_8\",\n      \"columnName\": \"attr_name_8\"\n    },\n    {\n      \"transformation\": \"attr_id_9\",\n      \"columnName\": \"attr_id_9\"\n    },\n    {\n      \"transformation\": \"attr_name_9\",\n      \"columnName\": \"attr_name_9\"\n    },\n    {\n      \"transformation\": \"prod_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"row_chng_desc\",\n      \"columnName\": \"row_chng_desc\"\n    },\n    {\n      \"transformation\": \"lvl_num\",\n      \"columnName\": \"lvl_num\"\n    },\n    {\n      \"transformation\": \"prod_match_attr_list\",\n      \"columnName\": \"prod_match_attr_list\"\n    },\n    {\n      \"transformation\": \"extrn_prod_id\",\n      \"columnName\": \"extrn_prod_id\"\n    },\n    {\n      \"transformation\": \"extrn_prod_attr_val_list\",\n      \"columnName\": \"extrn_prod_attr_val_list\"\n    },\n    {\n      \"transformation\": \"extrn_prod_name\",\n      \"columnName\": \"extrn_prod_name\"\n    },\n    {\n      \"transformation\": \"extrn_name\",\n      \"columnName\": \"extrn_name\"\n    },\n    {\n      \"transformation\": \"prod_name\",\n      \"columnName\": \"prod_name\"\n    },\n    {\n      \"transformation\": \"prod_desc\",\n      \"columnName\": \"prod_desc\"\n    },\n    {\n      \"transformation\": \"categ_id\",\n      \"columnName\": \"categ_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"extrn_code\",\n      \"columnName\": \"extrn_code\"\n    },\n    {\n      \"transformation\": \"attr_code_list\",\n      \"columnName\": \"attr_code_list\"\n    },\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    },\n    {\n      \"transformation\": \"attr_id_1\",\n      \"columnName\": \"attr_id_1\"\n    },\n    {\n      \"transformation\": \"attr_name_1\",\n      \"columnName\": \"attr_name_1\"\n    },\n    {\n      \"transformation\": \"attr_id_2\",\n      \"columnName\": \"attr_id_2\"\n    },\n    {\n      \"transformation\": \"attr_name_2\",\n      \"columnName\": \"attr_name_2\"\n    },\n    {\n      \"transformation\": \"attr_id_3\",\n      \"columnName\": \"attr_id_3\"\n    },\n    {\n      \"transformation\": \"attr_name_3\",\n      \"columnName\": \"attr_name_3\"\n    },\n    {\n      \"transformation\": \"attr_id_4\",\n      \"columnName\": \"attr_id_4\"\n    },\n    {\n      \"transformation\": \"attr_name_4\",\n      \"columnName\": \"attr_name_4\"\n    },\n    {\n      \"transformation\": \"attr_id_5\",\n      \"columnName\": \"attr_id_5\"\n    },\n    {\n      \"transformation\": \"attr_name_5\",\n      \"columnName\": \"attr_name_5\"\n    },\n    {\n      \"transformation\": \"attr_id_6\",\n      \"columnName\": \"attr_id_6\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen1-normalize]",
      "operationDescription": "20-dec-2023 - changed the code to take lst_cols dynamically from df_prod_gan based on ATTR_PHYS_NAME 1 to 9",
      "predecessorName": "[CET] normalize product attr codes to columns",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\ndf = dict_all_dfs['df_prod_gan'][\\\"df_object\\\"]\\n\\ndf.createOrReplaceTempView('df_assoc')\\n\\nstr1 = \\\"\\\"\\\"SELECT * , \\\"\\\"\\\"\\n\\nlst_cols = spark.sql('''SELECT DISTINCT column_name FROM (\\n                           SELECT ATTR_PHYS_NAME_1 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_2 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_3 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_4 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_5 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_6 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_7 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_8 column_name FROM df_assoc\\n                           UNION ALL\\n                           SELECT ATTR_PHYS_NAME_9 column_name FROM df_assoc\\n                           ) WHERE column_name IS NOT NULL''').rdd.map(lambda x: x[0]).collect()\\n\\nstr2=\\\"\\\"\\n\\nfor i in lst_cols:\\n\\n\\n  str2+=f\\\" case when attr_phys_name_1='{i}' then attr_code_1 when attr_phys_name_2='{i}' then attr_code_2 when attr_phys_name_3='{i}' then attr_code_3 when attr_phys_name_4='{i}' then attr_code_4 when attr_phys_name_5='{i}' then attr_code_5 when attr_phys_name_6='{i}' then attr_code_6 when attr_phys_name_7='{i}' then attr_code_7 when attr_phys_name_8='{i}' then attr_code_8 when attr_phys_name_9='{i}' then attr_code_9 end as {i} ,\\\"\\n\\nstr2=str2.rstrip(\\\",\\\")\\n\\n\\nfrom delta.tables import DeltaTable\\n\\n\\nstr3 = \\\"\\\"\\\"FROM df_assoc\\\"\\\"\\\"\\n\\nquery = str1+str2+str3\\n\\ndf_output=spark.sql(query)\\n\\n\\ndict_all_dfs['df_prod_nactc'] = {\\\"df_object\\\" :df_output}\\ndf_output_dict['df_prod_nactc'] = df_output\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gan\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "create prod_nactc for dims",
      "predecessorName": "[gen1-normalize]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] to get Prod_skid",
      "predecessorName": "create prod_nactc for dims",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"joinType\": \"LEFT OUTER\",\n  \"referenceDataframe\": \"df_mm_prod_xref\",\n  \"joinExpression\": \"ref.extrn_prod_id = in.extrn_prod_id and ref.prod_match_attr_list = in.prod_match_attr_list\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"extrn_prod_id\",\n          \"columnAlias\": \"extrn_prod_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_xref\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] MM_PROD_ATTR_VAL_LKP",
      "predecessorName": "[JOIN] to get Prod_skid",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"parquet\",\n  \"path\": \"bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_attr_val_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-load] MM_PROD_ATTR_VAL_LKP",
      "predecessorName": "[FL] MM_PROD_ATTR_VAL_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\n\\ndf_prod_attr_val_lkp1 = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_PROD_ATTR_VAL_LKP\\\")\\n\\n\\ndict_all_dfs['df_prod_attr_val_lkp1'] = {\\\"df_object\\\" :df_prod_attr_val_lkp1}\\ndf_output_dict['df_prod_attr_val_lkp1'] = df_prod_attr_val_lkp1\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_attr_val_lkp1\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] on MM_PROD_ATTR_VAL_LKP",
      "predecessorName": "[gen-load] MM_PROD_ATTR_VAL_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"use_ind= \\\"Y\\\"\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_attr_val_lkp1\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_attr_val_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[MJ] get product att values",
      "predecessorName": "[FL] on MM_PROD_ATTR_VAL_LKP",
      "jsonSpecification": "{\r\n  \"active\": \"true\",\r\n  \"milestone\": \"false\",\r\n  \"saveOutputDfsToTempTable\": \"true\",\r\n  \"inputDataframes\": [\r\n    {\r\n      \"name\": \"df_prod_gan\",\r\n      \"addAllColumns\": \"true\",\r\n      \"alias\": \"input\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_name_6\",\r\n          \"columnAlias\": \"attr_name_6\"\r\n        },\r\n        {\r\n          \"columnName\": \"attr_phys_name_7\",\r\n          \"columnAlias\": \"attr_phys_name_7\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr1\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_1\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_1\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_1\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr2\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_2\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_2\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_2\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr3\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_3\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_3\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_3\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr4\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_4\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_4\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_4\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr5\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_5\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_5\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_5\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr6\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_6\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_6\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_6\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr7\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_7\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_7\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_7\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_prod_attr_val_lkp\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"attr8\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"attr_id\",\r\n          \"columnAlias\": \"attr_id_8\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_code\",\r\n          \"columnAlias\": \"prod_attr_val_code_8\"\r\n        },\r\n        {\r\n          \"columnName\": \"categ_id\",\r\n          \"columnAlias\": \"categ_id_8\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_attr_val_name\",\r\n          \"columnAlias\": \"prod_attr_val_name\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"df_mm_prod_cxref\",\r\n      \"addAllColumns\": \"false\",\r\n      \"alias\": \"cxref\",\r\n      \"columns\": [\r\n        {\r\n          \"columnName\": \"extrn_prod_id\",\r\n          \"columnAlias\": \"extrn_prod_id\"\r\n        },\r\n        {\r\n          \"columnName\": \"prod_skid\",\r\n          \"columnAlias\": \"prod_skid\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"joinOperations\": [\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr1\",\r\n      \"joinExpression\": \"input.attr_id_1 = attr1.attr_id and input.attr_code_1 = attr1.categ_id and input.attr_code_1 like attr1.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr2\",\r\n      \"joinExpression\": \"input.attr_id_2 = attr2.attr_id and input.attr_code_1 = attr2.categ_id and input.attr_code_2 like attr2.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr3\",\r\n      \"joinExpression\": \"input.attr_id_3 = attr3.attr_id and input.attr_code_1 = attr3.categ_id and input.attr_code_3 like attr3.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr4\",\r\n      \"joinExpression\": \"input.attr_id_4 = attr4.attr_id and input.attr_code_1 = attr4.categ_id and input.attr_code_4 like attr4.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr5\",\r\n      \"joinExpression\": \"input.attr_id_5 = attr5.attr_id and input.attr_code_1 = attr5.categ_id and input.attr_code_5 like attr5.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr6\",\r\n      \"joinExpression\": \"input.attr_id_6 = attr6.attr_id and input.attr_code_1 = attr6.categ_id and input.attr_code_6 like attr6.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr7\",\r\n      \"joinExpression\": \"input.attr_id_7 = attr7.attr_id and input.attr_code_1 = attr7.categ_id and input.attr_code_7 like attr7.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"attr8\",\r\n      \"joinExpression\": \"input.attr_id_8 = attr8.attr_id and input.attr_code_1 = attr8.categ_id and input.attr_code_8 like attr8.prod_attr_val_code\"\r\n    },\r\n    {\r\n      \"joinType\": \"LEFT OUTER\",\r\n      \"joinDataframeAlias\": \"cxref\",\r\n      \"joinExpression\": \"input.extrn_prod_id = cxref.extrn_prod_id\"\r\n    }\r\n  ],\r\n  \"alterQuery\": [\r\n    {\r\n      \"hintType\": \"none\"\r\n    }\r\n  ],\r\n  \"outputDataframes\": [\r\n    {\r\n      \"name\": \"df_prod_gan\",\r\n      \"cache\": \"materialize\"\r\n    }\r\n  ]\r\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on get product att values",
      "predecessorName": "[MJ] get product att values",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gan\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_1,'%')>0 then attr_code_1 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_1\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_2,'%')>0 then attr_code_2 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_2\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_3,'%')>0 then attr_code_3 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_3\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_4,'%')>0 then attr_code_4 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_4\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_5,'%')>0 then attr_code_5 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_5\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_6,'%')>0 then attr_code_6 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_6\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_7,'%')>0 then attr_code_7 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_7\"\n    },\n    {\n      \"transformation\": \"case when instr(prod_attr_val_code_8,'%')>0 then attr_code_8 else prod_attr_val_name end\",\n      \"columnName\": \"attr_val_8\"\n    },\n    {\n      \"transformation\": \"attr_code_9\",\n      \"columnName\": \"attr_val_9\"\n    },\n    {\n      \"transformation\": \"prod_skid\",\n      \"columnName\": \"prod_skid\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_gav\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] Normalize product attributes values to columns",
      "predecessorName": "[CET] on get product att values",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gav\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_name_6\",\n      \"columnName\": \"attr_name_6\"\n    },\n    {\n      \"transformation\": \"attr_id_7\",\n      \"columnName\": \"attr_id_7\"\n    },\n    {\n      \"transformation\": \"attr_name_7\",\n      \"columnName\": \"attr_name_7\"\n    },\n    {\n      \"transformation\": \"attr_id_8\",\n      \"columnName\": \"attr_id_8\"\n    },\n    {\n      \"transformation\": \"attr_name_8\",\n      \"columnName\": \"attr_name_8\"\n    },\n    {\n      \"transformation\": \"attr_id_9\",\n      \"columnName\": \"attr_id_9\"\n    },\n    {\n      \"transformation\": \"attr_name_9\",\n      \"columnName\": \"attr_name_9\"\n    },\n    {\n      \"transformation\": \"prod_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"row_chng_desc\",\n      \"columnName\": \"row_chng_desc\"\n    },\n    {\n      \"transformation\": \"lvl_num\",\n      \"columnName\": \"lvl_num\"\n    },\n    {\n      \"transformation\": \"prod_match_attr_list\",\n      \"columnName\": \"prod_match_attr_list\"\n    },\n    {\n      \"transformation\": \"extrn_prod_id\",\n      \"columnName\": \"extrn_prod_id\"\n    },\n    {\n      \"transformation\": \"extrn_prod_attr_val_list\",\n      \"columnName\": \"extrn_prod_attr_val_list\"\n    },\n    {\n      \"transformation\": \"extrn_prod_name\",\n      \"columnName\": \"extrn_prod_name\"\n    },\n    {\n      \"transformation\": \"extrn_name\",\n      \"columnName\": \"extrn_name\"\n    },\n    {\n      \"transformation\": \"prod_name\",\n      \"columnName\": \"prod_name\"\n    },\n    {\n      \"transformation\": \"prod_desc\",\n      \"columnName\": \"prod_desc\"\n    },\n    {\n      \"transformation\": \"categ_id\",\n      \"columnName\": \"categ_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"extrn_code\",\n      \"columnName\": \"extrn_code\"\n    },\n    {\n      \"transformation\": \"attr_code_list\",\n      \"columnName\": \"attr_code_list\"\n    },\n    {\n      \"transformation\": \"line_num\",\n      \"columnName\": \"line_num\"\n    },\n    {\n      \"transformation\": \"attr_id_1\",\n      \"columnName\": \"attr_id_1\"\n    },\n    {\n      \"transformation\": \"attr_name_1\",\n      \"columnName\": \"attr_name_1\"\n    },\n    {\n      \"transformation\": \"attr_id_2\",\n      \"columnName\": \"attr_id_2\"\n    },\n    {\n      \"transformation\": \"attr_name_2\",\n      \"columnName\": \"attr_name_2\"\n    },\n    {\n      \"transformation\": \"attr_id_3\",\n      \"columnName\": \"attr_id_3\"\n    },\n    {\n      \"transformation\": \"attr_name_3\",\n      \"columnName\": \"attr_name_3\"\n    },\n    {\n      \"transformation\": \"attr_id_4\",\n      \"columnName\": \"attr_id_4\"\n    },\n    {\n      \"transformation\": \"attr_name_4\",\n      \"columnName\": \"attr_name_4\"\n    },\n    {\n      \"transformation\": \"attr_id_5\",\n      \"columnName\": \"attr_id_5\"\n    },\n    {\n      \"transformation\": \"attr_name_5\",\n      \"columnName\": \"attr_name_5\"\n    },\n    {\n      \"transformation\": \"attr_id_6\",\n      \"columnName\": \"attr_id_6\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_navtc\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen2 normalize ]",
      "predecessorName": "[CET] Normalize product attributes values to columns",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\nstr1 = \\\"\\\"\\\"SELECT * , \\\"\\\"\\\"\\n\\nlst_cols = ['pg_type_txt','pg_categ_txt','pg_mfgr_txt','pg_base_size_txt','pg_varnt','pg_brand_txt','pg_size_txt','pg_pkg_size','item']\\n\\nstr2=\\\"\\\"\\n\\nfor i in lst_cols:\\n\\n\\n  str2+=f\\\" case when attr_phys_name_1='{i}' then attr_val_1 when attr_phys_name_2='{i}' then attr_val_2 when attr_phys_name_3='{i}' then attr_val_3 when attr_phys_name_4='{i}' then attr_val_4 when attr_phys_name_5='{i}' then attr_val_5 when attr_phys_name_6='{i}' then attr_val_6 when attr_phys_name_7='{i}' then attr_val_7 when attr_phys_name_8='{i}' then attr_val_8 when attr_phys_name_9='{i}' then attr_val_9 end as {i} ,\\\"\\n\\nstr2=str2.rstrip(\\\",\\\")\\n\\n\\nfrom delta.tables import DeltaTable\\n\\ndf = dict_all_dfs['df_prod_gav'][\\\"df_object\\\"]\\n\\n\\ndf.createOrReplaceTempView('df_assoc')\\n\\nstr3 = \\\"\\\"\\\"FROM df_assoc\\\"\\\"\\\"\\n\\nquery = str1+str2+str3\\n\\ndf_output=spark.sql(query)\\n\\n\\ndict_all_dfs['df_prod_navtc'] = {\\\"df_object\\\" :df_output}\\ndf_output_dict['df_prod_navtc'] = df_output\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gav\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_navtc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-ROW_CHNG1]",
      "operationDescription": "21-dec-2023  --changed this step to include str_nactc_cols to pick columns dynamically",
      "predecessorName": "[gen2 normalize ]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\ndf_prod_nactc = dict_all_dfs['df_prod_nactc'][\\\"df_object\\\"]\\ndf_prod_nactc.createOrReplaceTempView('nactc')\\n\\n\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\ndf_mm_prod_cxref.createOrReplaceTempView('cxref')\\n\\nlst_nactc_cols = df_prod_nactc.columns\\nlst_nactc_cols = [c for c in lst_nactc_cols if c!='row_chng_desc']\\nstr_nactc_cols = ','.join(lst_nactc_cols)\\n\\ndf_out = spark.sql(f'''select case when extrn_prod_id = extrn_prod_id_cxref and prod_match_attr_list = prod_match_attr_list_cxref then 'FULL MATCH' else row_chng_desc end row_chng_desc,{str_nactc_cols}\\n\\nfrom\\n(select c.extrn_prod_id extrn_prod_id_cxref,c.prod_match_attr_list prod_match_attr_list_cxref, n.*\\nfrom nactc n\\nleft outer join cxref c\\non C.extrn_prod_id = n.extrn_prod_id\\nAND C.prod_match_attr_list = n.prod_match_attr_list\\nand n.row_chng_desc is null\\n)''').drop('extrn_prod_id_cxref','prod_match_attr_list_cxref')\\n\\ndf_out.createOrReplaceTempView('nactc_tmp1')\\n\\n\\ndf_out = spark.sql(f'''select case when extrn_prod_id = extrn_prod_id_cxref and extrn_prod_attr_val_list = extrn_prod_attr_val_list_cxref \\n            and extrn_prod_name != extrn_prod_name_cxref and prod_lvl_name ='ITEM'\\nthen 'ITEM NAME CHANGE' else row_chng_desc end row_chng_desc,prod_skid,{str_nactc_cols}\\n\\nfrom\\n(select c.extrn_prod_attr_val_list extrn_prod_attr_val_list_cxref,c.extrn_prod_id extrn_prod_id_cxref,c.extrn_prod_name extrn_prod_name_cxref,c.prod_skid prod_skid, n.*\\nfrom nactc_tmp1 n\\nleft outer join cxref c\\non C.extrn_prod_id = n.extrn_prod_id\\nAND C.extrn_prod_attr_val_list = n.extrn_prod_attr_val_list\\nand C.extrn_prod_name != n.extrn_prod_name\\nand n.row_chng_desc is null\\n)\\n                   ''')\\n\\t\\t\\t\\t   \\ndict_all_dfs['df_prod_nactc'] = {\\\"df_object\\\" :df_out}\\ndf_output_dict['df_prod_nactc'] = df_out\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[Filter1] on nactc",
      "predecessorName": "[GEN-ROW_CHNG1]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"row_chng_desc= 'ITEM NAME CHANGE'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc1\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-cc1]",
      "predecessorName": "[Filter1] on nactc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_nactc1 = dict_all_dfs['df_prod_nactc1'][\\\"df_object\\\"]\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prod_nactc1.columns\\nsdim_cols = df_mm_prod_cxref.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prod_nactc1 = df_prod_nactc1.withColumn(i,lit(None).cast('string'))\\n\\ndf_prod_nactc1 = df_prod_nactc1.select(*sdim_cols)\\ncols = df_prod_nactc1.columns\\n\\nfor j in cols:\\n  if dict(df_prod_nactc1.dtypes)[j] != dict(df_mm_prod_cxref.dtypes)[j]:\\n    df_prod_nactc1 = df_prod_nactc1.withColumn(j, col(j).cast(dict(df_mm_prod_cxref.dtypes)[j]))\\n\\ndict_all_dfs['df_prod_nactc1'] = {\\\"df_object\\\" :df_prod_nactc1}\\ndf_output_dict['df_prod_nactc1'] = df_prod_nactc1\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc1\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc1\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[merger1]",
      "predecessorName": "[gen-cc1]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"distinct\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc1\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"logicalKey\": [\n    \"extrn_prod_id\",\n    \"extrn_prod_attr_val_list\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[FP1]",
      "predecessorName": "[merger1]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>/MM_PROD_CXREF/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc1\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-ROW_CHNG2]",
      "operationDescription": "21-dec-2023  --changed this step to include str_nactc_cols to pick columns dynamically",
      "predecessorName": "[FP1]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\ndf_prod_nactc = dict_all_dfs['df_prod_nactc'][\\\"df_object\\\"]\\n\\nlst_nactc_cols = df_prod_nactc.columns\\nlst_nactc_cols = [c for c in lst_nactc_cols if c not in ('row_chng_desc','prod_skid')]\\nstr_nactc_cols = ','.join(lst_nactc_cols)\\n\\ndf_prod_nactc = df_prod_nactc.withColumn(\\\"row_chng_desc_3\\\", lit(None))\\ndf_prod_nactc.createOrReplaceTempView('nactc')\\n\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\ndf_mm_prod_cxref.createOrReplaceTempView('cxref')\\n \\ndf_out = spark.sql(f'''select case when extrn_prod_id = extrn_prod_id_cxref and prod_match_attr_list != prod_match_attr_list_cxref then 'EXTERNAL CODE MATCH' else row_chng_desc end row_chng_desc,prod_skid_cxref,{str_nactc_cols}\\nfrom\\n(select c.extrn_prod_id extrn_prod_id_cxref,c.prod_match_attr_list prod_match_attr_list_cxref,c.prod_skid prod_skid_cxref, n.*\\nfrom nactc n\\nleft outer join cxref c\\non C.extrn_prod_id = n.extrn_prod_id\\nAND C.prod_match_attr_list != n.prod_match_attr_list\\nand n.row_chng_desc is null\\n)''').drop('extrn_prod_id_cxref','prod_match_attr_list_cxref')\\ndf_out = df_out.withColumnRenamed('prod_skid_cxref','prod_skid')\\n\\n\\ndict_all_dfs['df_prod_nactc'] = {\\\"df_object\\\" :df_out}\\ndf_output_dict['df_prod_nactc'] = df_out\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[filter2]",
      "predecessorName": "[GEN-ROW_CHNG2]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"row_chng_desc= 'EXTERNAL CODE MATCH'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc2\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-cc2]",
      "predecessorName": "[filter2]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_nactc2 = dict_all_dfs['df_prod_nactc2'][\\\"df_object\\\"]\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prod_nactc2.columns\\nsdim_cols = df_mm_prod_cxref.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prod_nactc2 = df_prod_nactc2.withColumn(i,lit(None).cast('string'))\\n\\ndf_prod_nactc2 = df_prod_nactc2.select(*sdim_cols)\\ncols = df_prod_nactc2.columns\\n\\nfor j in cols:\\n  if dict(df_prod_nactc2.dtypes)[j] != dict(df_mm_prod_cxref.dtypes)[j]:\\n    df_prod_nactc2 = df_prod_nactc2.withColumn(j, col(j).cast(dict(df_mm_prod_cxref.dtypes)[j]))\\n\\ndict_all_dfs['df_prod_nactc2'] = {\\\"df_object\\\" :df_prod_nactc2}\\ndf_output_dict['df_prod_nactc2'] = df_prod_nactc2\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc2\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc2\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[merger2]",
      "predecessorName": "[gen-cc2]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"distinct\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc2\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"logicalKey\": [\n    \"extrn_prod_id\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[FP2]",
      "predecessorName": "[merger2]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>/MM_PROD_CXREF/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc2\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-ROW_CHNG3]",
      "operationDescription": "21-dec-2023  --changed this step to include str_nactc_cols to pick columns dynamically",
      "predecessorName": "[FP2]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\ndf_prod_nactc = dict_all_dfs['df_prod_nactc'][\\\"df_object\\\"]\\n\\nlst_nactc_cols = df_prod_nactc.columns\\nlst_nactc_cols = [c for c in lst_nactc_cols if c not in ('row_chng_desc','prod_skid')]\\nstr_nactc_cols = ','.join(lst_nactc_cols)\\n\\ndf_prod_nactc.createOrReplaceTempView('nactc')\\n\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\ndf_mm_prod_cxref.createOrReplaceTempView('cxref')\\n \\ndf_out = spark.sql(f'''select case when extrn_prod_id != extrn_prod_id_cxref and prod_match_attr_list = prod_match_attr_list_cxref then 'ATTR LIST MATCH' else row_chng_desc end row_chng_desc,prod_skid_cxref,{str_nactc_cols}\\nfrom\\n(select c.extrn_prod_id extrn_prod_id_cxref,c.prod_match_attr_list prod_match_attr_list_cxref,c.prod_skid prod_skid_cxref, n.*\\nfrom nactc n\\nleft outer join cxref c\\non C.extrn_prod_id != n.extrn_prod_id\\nAND C.prod_match_attr_list = n.prod_match_attr_list\\nand n.row_chng_desc is null\\n)''').drop('extrn_prod_id_cxref','prod_match_attr_list_cxref')\\ndf_out = df_out.withColumnRenamed('prod_skid_cxref','prod_skid')\\n\\n\\ndict_all_dfs['df_prod_nactc'] = {\\\"df_object\\\" :df_out}\\ndf_output_dict['df_prod_nactc'] = df_out\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL3]",
      "predecessorName": "[GEN-ROW_CHNG3]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"row_chng_desc= 'ATTR LIST MATCH'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc3\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-cc3]",
      "predecessorName": "[FIL3]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_nactc3 = dict_all_dfs['df_prod_nactc3'][\\\"df_object\\\"]\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prod_nactc3.columns\\nsdim_cols = df_mm_prod_cxref.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prod_nactc3 = df_prod_nactc3.withColumn(i,lit(None).cast('string'))\\n\\ndf_prod_nactc3 = df_prod_nactc3.select(*sdim_cols)\\ncols = df_prod_nactc3.columns\\n\\nfor j in cols:\\n  if dict(df_prod_nactc3.dtypes)[j] != dict(df_mm_prod_cxref.dtypes)[j]:\\n    df_prod_nactc3 = df_prod_nactc3.withColumn(j, col(j).cast(dict(df_mm_prod_cxref.dtypes)[j]))\\n\\ndict_all_dfs['df_prod_nactc3'] = {\\\"df_object\\\" :df_prod_nactc3}\\ndf_output_dict['df_prod_nactc3'] = df_prod_nactc3\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc3\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc3\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[merger3]",
      "predecessorName": "[gen-cc3]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"distinct\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc3\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"logicalKey\": [\n    \"prod_match_attr_list\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[FP3]",
      "predecessorName": "[merger3]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>/MM_PROD_CXREF/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc3\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-ROW_CHNG4]",
      "predecessorName": "[FP3]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nfrom pyspark.sql.functions import *\\n\\ndf_prod_nactc = dict_all_dfs['df_prod_nactc'][\\\"df_object\\\"]\\ndf_prod_nactc.createOrReplaceTempView('nactc')\\n\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\ndf_mm_prod_cxref.createOrReplaceTempView('cxref')\\n\\nupdate_con=(col(\\\"row_chng_desc\\\").isNull()&\\n\\n            col(\\\"extrn_prod_id\\\").isNotNull()&\\n\\n            col(\\\"prod_match_attr_list\\\").isNotNull()\\n\\n            )\\n\\nupdate_prod_nactc=df_prod_nactc.join(df_mm_prod_cxref,on=[\\\"extrn_prod_id\\\",\\\"prod_match_attr_list\\\"],how=\\\"left_anti\\\").withColumn(\\\"row_chng_desc\\\",when(update_con,\\\"NEW PRODUCT\\\").otherwise(col(\\\"row_chng_desc\\\")))\\n\\ndict_all_dfs['df_prod_nactc'] = {\\\"df_object\\\" :update_prod_nactc}\\ndf_output_dict['df_prod_nactc'] = update_prod_nactc\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[fil] for join",
      "predecessorName": "[GEN-ROW_CHNG4]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \" row_chng_desc= 'NEW PRODUCT'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] find new products",
      "predecessorName": "[fil] for join",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"joinExpression\": \"ref.extrn_prod_id = in.extrn_prod_id and ref.prod_match_attr_list = in.prod_match_attr_list\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"extrn_prod_id\",\n          \"columnAlias\": \"extrn_prod_id\"\n        },\n        {\n          \"columnName\": \"prod_match_attr_list\",\n          \"columnAlias\": \"prod_match_attr_list\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"extrn_prod_id\",\n          \"columnAlias\": \"extrn_prod_id\"\n        },\n        {\n          \"columnName\": \"prod_match_attr_list\",\n          \"columnAlias\": \"prod_match_attr_list\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[find new products1]",
      "predecessorName": "[JOIN] find new products",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"joinExpression\": \"ref.extrn_prod_id = in.extrn_prod_id and ref.prod_match_attr_list = in.prod_match_attr_list\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"extrn_prod_id\",\n          \"columnAlias\": \"extrn_prod_id\"\n        },\n        {\n          \"columnName\": \"prod_match_attr_list\",\n          \"columnAlias\": \"prod_match_attr_list\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "SKID Object Type key derivation",
      "predecessorName": "[find new products1]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport csv\\nimport pandas as pd\\nfrom pyspark.sql.functions import *\\nfrom pyspark.sql.types import IntegerType\\n\\ndf_prod_skid_lkp = dict_all_dfs['df_prod_nactc_new'][\\\"df_object\\\"]\\n\\nsrce_sys_id = [<<SRCE_SYS_ID>>]\\nsrce_sys_id1 = <<SRCE_SYS_ID>>\\nPROD_PRTTN_CODE = '<<PROD_PRTTN_CODE>>'\\nkey_panel_prod = f'\\\"TP_{(srce_sys_id1)}_PROD\\\"'\\nkey_panel_prod1 = f'\\\"TP_EU_{(PROD_PRTTN_CODE)}\\\"'\\n\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\n\\n\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\ndf = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_KEY_DOMAIN_DATA_PROVIDER\\\")\\n\\nfor i in srce_sys_id:\\n  if i != 3:\\n    df_prod_skid = df.select(\\\"dimension_type_key\\\",\\\"data_provider_key\\\",\\\"object_type_key\\\",\\\"key_domain_data_provider_code\\\").filter(\\\"dimension_type_key == 8 and data_provider_key == 7 and key_domain_data_provider_code like 'TP_%_PROD'\\\")\\n    df_prod_skid.createOrReplaceTempView(\\\"prod_skid\\\")\\n    df_prod_skid = spark.sql(f'''select * from prod_skid where key_domain_data_provider_code = ({key_panel_prod})\\n                         ''')\\n  else:\\n    df_prod_skid = df.select(\\\"dimension_type_key\\\",\\\"data_provider_key\\\",\\\"object_type_key\\\",\\\"key_domain_data_provider_code\\\").filter(\\\"dimension_type_key == 8 and data_provider_key == 7 and key_domain_data_provider_code like 'TP_EU_%'\\\")\\n    df_prod_skid.createOrReplaceTempView(\\\"prod_skid\\\")\\n    df_prod_skid = spark.sql(f'''select * from prod_skid where key_domain_data_provider_code = ({key_panel_prod1})\\n                         ''')\\n\\t\\t\\t\\t\\t\\t \\ndf_prod_skid = df_prod_skid.select(\\\"object_type_key\\\").withColumn(\\\"srce_sys_id1\\\", lit(srce_sys_id1).cast(IntegerType()))\\n    \\ndf_prod_skid_lkp = df_prod_skid_lkp.join(df_prod_skid, df_prod_skid_lkp.srce_sys_id == df_prod_skid.srce_sys_id1, \\\"Inner\\\").drop(\\\"srce_sys_id1\\\")\\n\\ndict_all_dfs['df_prod_nactc_new'] = {\\\"df_object\\\" :df_prod_skid_lkp}\\ndf_output_dict['df_prod_nactc_new'] = df_prod_skid_lkp\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[SKLP new products]",
      "operationDescription": "Turned off as SKID was not available",
      "predecessorName": "SKID Object Type key derivation",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"skidVersion\": \"V1\",\n  \"uniqueness\": \"false\",\n  \"overrideSkidCache\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputColumnName\": \"prod_skid\",\n  \"orphanIndicatorColumnName\": \"\",\n  \"dataProviderKey\": 7,\n  \"dimensionTypeKey\": 8,\n  \"maxBatchSize\": 50000,\n  \"maxWorkers\": 4,\n  \"azureRetryLimit\": 9,\n  \"objectTypeKeyDynamic\": \"false\",\n  \"objectTypeKey\": \"3148\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"cache\": \"materialize\"\n    }\n  ],\n  \"inputColumnsNames\": [\n    \"extrn_prod_id\"\n  ]\n}",
      "operationVersionName": "SurrogateKeyLookup",
      "overridableIndicator": false
    },
    {
      "operationName": "[SKLP for new products]",
      "predecessorName": "[SKLP new products]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"skidVersion\": \"V1\",\n  \"uniqueness\": \"false\",\n  \"overrideSkidCache\": \"disabled\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"outputColumnName\": \"prod_skid\",\n  \"orphanIndicatorColumnName\": \"\",\n  \"dataProviderKey\": 7,\n  \"dimensionTypeKey\": 8,\n  \"maxBatchSize\": 50000,\n  \"maxWorkers\": 4,\n  \"azureRetryLimit\": 9,\n  \"objectTypeKeyDynamic\": \"true\",\n  \"objectTypeKey\": \"object_type_key\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"cache\": \"none\"\n    }\n  ],\n  \"inputColumnsNames\": [\n    \"extrn_prod_id\",\n    \"cntrt_id\"\n  ]\n}",
      "operationVersionName": "SurrogateKeyLookup",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-cc for new products]",
      "predecessorName": "[SKLP for new products]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_nactc_new = dict_all_dfs['df_prod_nactc_new'][\\\"df_object\\\"]\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prod_nactc_new.columns\\nsdim_cols = df_mm_prod_cxref.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prod_nactc_new = df_prod_nactc_new.withColumn(i,lit(None).cast('string'))\\n\\ndf_prod_nactc_new = df_prod_nactc_new.select(*sdim_cols)\\ncols = df_prod_nactc_new.columns\\n\\nfor j in cols:\\n  if dict(df_prod_nactc_new.dtypes)[j] != dict(df_mm_prod_cxref.dtypes)[j]:\\n    df_prod_nactc_new = df_prod_nactc_new.withColumn(j, col(j).cast(dict(df_mm_prod_cxref.dtypes)[j]))\\n\\ndict_all_dfs['df_prod_nactc_new'] = {\\\"df_object\\\" :df_prod_nactc_new}\\ndf_output_dict['df_prod_nactc_new'] = df_prod_nactc_new    \",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[merger -new products]",
      "predecessorName": "[gen-cc for new products]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"distinct\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_new\"\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"logicalKey\": [],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[fp4]",
      "predecessorName": "[merger -new products]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>/MM_PROD_CXREF/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref2\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-cc4]",
      "predecessorName": "[fp4]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_mm_prod_cxref = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\ndf_mm_prod_xref = dict_all_dfs['df_mm_prod_xref'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_mm_prod_cxref.columns\\nsdim_cols = df_mm_prod_xref.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_mm_prod_cxref = df_mm_prod_cxref.withColumn(i,lit(None).cast('string'))\\n\\ndf_mm_prod_cxref = df_mm_prod_cxref.select(*sdim_cols)\\ncols = df_mm_prod_cxref.columns\\n\\nfor j in cols:\\n  if dict(df_mm_prod_cxref.dtypes)[j] != dict(df_mm_prod_xref.dtypes)[j]:\\n    df_mm_prod_cxref = df_mm_prod_cxref.withColumn(j, col(j).cast(dict(df_mm_prod_xref.dtypes)[j]))\\n\\ndict_all_dfs['df_mm_prod_xref_new'] = {\\\"df_object\\\" :df_mm_prod_cxref}\\ndf_output_dict['df_mm_prod_xref_new'] = df_mm_prod_cxref    \",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    },\n    {\n      \"name\": \"df_mm_prod_xref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_new\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[Merger4]",
      "predecessorName": "[gen-cc4]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"referenceDataframe\": \"df_mm_prod_xref\",\n  \"distinct\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref3\"\n    },\n    {\n      \"name\": \"df_mm_prod_xref\"\n    }\n  ],\n  \"logicalKey\": [\n    \"srce_sys_id\",\n    \"cntrt_id\",\n    \"prod_skid\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_new\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "load MM_PROD_XREF to publish",
      "predecessorName": "[Merger4]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_XREF/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"exclusive\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_latest\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "merge df_mm_prod_xref new with latest",
      "predecessorName": "load MM_PROD_XREF to publish",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_prod_xref_latest\",\n  \"distinct\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_new\"\n    },\n    {\n      \"name\": \"df_mm_prod_xref_latest\"\n    }\n  ],\n  \"logicalKey\": [\n    \"srce_sys_id\",\n    \"cntrt_id\",\n    \"prod_skid\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_final\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "Adding partition columns for prod xref",
      "predecessorName": "merge df_mm_prod_xref new with latest",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_final\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"round(srce_sys_id,0)\",\n      \"columnName\": \"part_srce_sys_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_final\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[fp5]",
      "predecessorName": "Adding partition columns for prod xref",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"already acquired\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_PROD_XREF/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_final\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[fp5] - Prod Xref",
      "predecessorName": "[fp5]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"semaphoreOption\": \"already acquired\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"true\",\n  \"hidePublication\": \"false\",\n  \"outputPhysicalTable\": \"refined/NNIT/tradepanel/prod-tp-lightrefined/MM_PROD_XREF/\",\n  \"owningApplicationName\": {\n    \"applicationName\": \"Turbine Internal - Refined\"\n  },\n  \"dataProviderCode\": \"TP\",\n  \"secureGroupKey\": \"0\",\n  \"postPartitionsRowCount\": \"true\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [\n    \"part_srce_sys_id\"\n  ],\n  \"partitionAdditionalInformations\": [\n    {}\n  ],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_xref_final\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "release sem for MM_PROD_XREF",
      "predecessorName": "[fp5] - Prod Xref",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_PROD_XREF/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen -refresh xref]",
      "predecessorName": "release sem for MM_PROD_XREF",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n \\n\\ndf = dict_all_dfs['df_mm_prod_cxref'][\\\"df_object\\\"]\\n\\n \\n\\ndf.createOrReplaceTempView('MM_PROD_XREF_VW')\\nrefresh = \\\"REFRESH table MM_PROD_XREF_VW\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from MM_PROD_XREF_VW\\\"\\ndf_out = spark.sql(query)\\n\\n \\n\\ndf_output_dict['df_mm_prod_cxref'] = df_out\\ndict_all_dfs['df_mm_prod_cxref'] = {\\\"df_object\\\" :df_out}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] assign product skid for input data",
      "predecessorName": "[gen -refresh xref]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT OUTER\",\n  \"referenceDataframe\": \"df_mm_prod_cxref\",\n  \"joinExpression\": \"in.extrn_prod_id = ref.extrn_prod_id and in.prod_match_attr_list = ref.prod_match_attr_list\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nactc_dim\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"attr_name_6\",\n          \"columnAlias\": \"attr_name_6\"\n        },\n        {\n          \"columnName\": \"extrn_prod_id\",\n          \"columnAlias\": \"extrn_prod_id\"\n        },\n        {\n          \"columnName\": \"prod_name\",\n          \"columnAlias\": \"prod_name_1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_cxref\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        },\n        {\n          \"columnName\": \"extrn_prod_name\",\n          \"columnAlias\": \"prod_name\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_as\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] find new and change's rows for product's",
      "predecessorName": "[JOIN] assign product skid for input data",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"expression\": \"cntrt_id = <<CNTRT_ID>> and srce_sys_id = <<SRCE_SYS_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_as\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_as\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] find new and changed row's for product",
      "predecessorName": "[FL] find new and change's rows for product's",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"joinType\": \"LEFT OUTER\",\n  \"referenceDataframe\": \"df_mm_prod_csdim\",\n  \"joinExpression\": \"in.prod_skid = ref.prod_skid\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_as\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_prod_csdim\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id1\"\n        },\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid1\"\n        },\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id1\"\n        },\n        {\n          \"columnName\": \"cntrt_id\",\n          \"columnAlias\": \"cntrt_id1\"\n        },\n        {\n          \"columnName\": \"prod_prttn_code\",\n          \"columnAlias\": \"prod_prttn_code1\"\n        },\n        {\n          \"columnName\": \"extrn_prod_id\",\n          \"columnAlias\": \"extrn_prod_id1\"\n        },\n        {\n          \"columnName\": \"prod_name\",\n          \"columnAlias\": \"prod_name1\"\n        },\n        {\n          \"columnName\": \"prod_desc\",\n          \"columnAlias\": \"prod_desc1\"\n        },\n        {\n          \"columnName\": \"prod_lvl_id\",\n          \"columnAlias\": \"prod_lvl_id1\"\n        },\n        {\n          \"columnName\": \"prod_lvl_name\",\n          \"columnAlias\": \"prod_lvl_name1\"\n        },\n        {\n          \"columnName\": \"categ_id\",\n          \"columnAlias\": \"categ_id1\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_as\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on find new and change's rows for product's",
      "predecessorName": "[JOIN] find new and changed row's for product",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_as\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"case when prod_skid is null Then 'I' when run_id1 <> run_id or (run_id1 is null and run_id is not null) or srce_sys_id1 <> srce_sys_id or (srce_sys_id1 is null and srce_sys_id is not null) or cntrt_id1 <> cntrt_id or (cntrt_id1 is null and cntrt_id is not null) or prod_prttn_code1 <> prod_prttn_code or (prod_prttn_code1 is null and prod_prttn_code is not null) or extrn_prod_id1 <> extrn_prod_id or (extrn_prod_id1 is null and extrn_prod_id is not null) or prod_name1 <> prod_name or (prod_name1 is null and prod_name is not null) or prod_desc1 <> prod_desc or (prod_desc1 is null and prod_desc is not null) or prod_lvl_id1 <> prod_lvl_id or (prod_lvl_id1 is null and prod_lvl_id is not null) or prod_lvl_name1 <> prod_lvl_name or (prod_lvl_name1 is null and prod_lvl_name is not null) or categ_id1 <> categ_id or (categ_id1 is null and categ_id is not null) THEN 'U' ELSE 'E' end\",\n      \"columnName\": \"flag\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_as\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "find new and change's rows for product's",
      "operationDescription": "06-01-2024  --new step to derive Flag column\n--disabled previous 2 steps (join and cet)",
      "predecessorName": "[CET] on find new and change's rows for product's",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nimport pyspark.sql.functions as f\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_as = dict_all_dfs['df_prod_as'][\\\"df_object\\\"]\\ndf_mm_prod_csdim = dict_all_dfs['df_mm_prod_csdim'][\\\"df_object\\\"]\\n\\n\\n# df_prod_as = spark.sql(\\\"select * from parquet.`/mnt/turbinev1/Spark/data/temp/materialize/578319516_578320344_Joiner_df_prod_as` \\\" )\\n# df_mm_prod_csdim = spark.sql(\\\"select * from parquet.`/mnt/turbinev1/Spark/data/temp/materialize/578319516_578320260_Filter_df_mm_prod_csdim` \\\" )\\n\\ndf_mm_prod_csdim.createOrReplaceTempView('prod_csdim')\\n\\ndf_prod_as=df_prod_as.select([f.col(col).alias(col.lower()) for col in df_prod_as.columns])\\ndf_prod_as.createOrReplaceTempView('prod_as')\\n\\nlst_prod_as_cols = df_prod_as.columns\\nlst_prod_as_cols.remove('extrn_prod_id')\\nlst_prod_csdim_cols = df_mm_prod_csdim.columns\\nresult = [value for value in lst_prod_as_cols if value in lst_prod_csdim_cols]\\n\\n\\n# lst_prod_as_cols.remove('attr_val')\\n# lst_prod_as_cols.remove('prod_name_desc')\\n\\nstr_cond = ''\\ni=1\\nfor col in result:\\n  str_cond+=f'csdim.{col} <> apnd.{col} or (csdim.{col} is null and apnd.{col} is not null) or '\\n  i+=1\\nstr_cond = str_cond.rstrip('or ')\\n\\ndf_prod_as = spark.sql(f'''select apnd.*,case when apnd.prod_skid IS NULL THEN 'I' when {str_cond} THEN 'U' ELSE 'E' end flag from prod_as apnd left outer join prod_csdim csdim on apnd.prod_skid=csdim.prod_skid''')\\n# print(f\\\"\\\"\\\"select apnd.*,case when apnd.prod_skid IS NULL THEN 'I' when {str_cond} THEN 'U' ELSE 'E' end flag from prod_as apnd left outer join prod_csdim csdim on apnd.prod_skid=csdim.prod_skid\\\"\\\"\\\")\\ndict_all_dfs['df_prod_as'] = {\\\"df_object\\\" :df_prod_as}\\ndf_output_dict['df_prod_as'] = df_prod_as\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_as\"\n    },\n    {\n      \"name\": \"df_mm_prod_csdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_as\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] df_prod_as",
      "predecessorName": "find new and change's rows for product's",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"flag != 'E'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_as\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "For Normalize products",
      "operationDescription": "20-dec-2023 --new step to preserve prod dsdim columns",
      "predecessorName": "[FL] df_prod_as",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim_cols\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen-cc]",
      "predecessorName": "For Normalize products",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_dsdim = dict_all_dfs['df_prod_dsdim'][\\\"df_object\\\"]\\ndf_mm_prod_csdim = dict_all_dfs['df_mm_prod_csdim'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prod_dsdim.columns\\nsdim_cols = df_mm_prod_csdim.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prod_dsdim = df_prod_dsdim.withColumn(i,lit(None).cast('string'))\\n\\ndf_prod_dsdim = df_prod_dsdim.select(*sdim_cols)\\ncols = df_prod_dsdim.columns\\n\\nfor j in cols:\\n  if dict(df_prod_dsdim.dtypes)[j] != dict(df_mm_prod_csdim.dtypes)[j]:\\n    df_prod_dsdim = df_prod_dsdim.withColumn(j, col(j).cast(dict(df_mm_prod_csdim.dtypes)[j]))\\n\\ndict_all_dfs['df_prod_dsdim'] = {\\\"df_object\\\" :df_prod_dsdim}\\ndf_output_dict['df_prod_dsdim'] = df_prod_dsdim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\"\n    },\n    {\n      \"name\": \"df_mm_prod_csdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[merger]",
      "predecessorName": "[gen-cc]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_prod_csdim\",\n  \"distinct\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\"\n    },\n    {\n      \"name\": \"df_mm_prod_csdim\"\n    }\n  ],\n  \"logicalKey\": [\n    \"prod_skid\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_csdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[FP6]",
      "operationDescription": "dummy update",
      "predecessorName": "[merger]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>/MM_PROD_CSDIM/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[Pub] publishing csdim",
      "predecessorName": "[FP6]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/test_MM_PROD_CSDIM/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_prod_csdim\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen LOAD]mm_attr_lkp",
      "predecessorName": "[Pub] publishing csdim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\n\\ndf_mm_attr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_ATTR_LKP\\\")\\n\\n\\ndict_all_dfs['df_mm_attr_lkp'] = {\\\"df_object\\\" :df_mm_attr_lkp}\\ndf_output_dict['df_mm_attr_lkp'] = df_mm_attr_lkp\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_dsdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_attr_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] on normalize steps",
      "operationDescription": "20-dec-2023 -changed this normalize step completely to pick columns dynamically \n- also added upper case and lower case converting functions",
      "predecessorName": "[gen LOAD]mm_attr_lkp",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nfrom pyspark.sql.functions import *\\n\\ndef convert_cols_to_lower(df):\\n  cols = df.columns\\n  cols_lower = [col.lower() for col in cols]\\n  df = df.select(*cols_lower)\\n  return df\\n\\ndef convert_cols_to_upper(df):\\n  cols = df.columns\\n  cols_upper = [col.upper() for col in cols]\\n  df = df.select(*cols_upper)\\n  return df\\n\\n\\nfct_df = dict_all_dfs['df_prod_csdim'][\\\"df_object\\\"]\\nfct_df = convert_cols_to_upper(fct_df)\\nfct_df.createOrReplaceTempView(\\\"PROD_CSDIM\\\")\\n\\nperd_df = dict_all_dfs['df_prod_attr_val_lkp1'][\\\"df_object\\\"]\\nperd_df = perd_df.filter(\\\"use_ind= 'Y' \\\")\\nperd_df.createOrReplaceTempView(\\\"MM_PROD_ATTR_VAL_LKP\\\")\\n\\nattr_df = dict_all_dfs['df_mm_attr_lkp'][\\\"df_object\\\"]\\nattr_df.createOrReplaceTempView(\\\"MM_ATTR_LKP\\\")\\n\\ndf_prod_dsdim_cols = dict_all_dfs['df_prod_dsdim_cols'][\\\"df_object\\\"]\\n\\n\\n# Convert columns to upper case\\nprod_csdim = fct_df\\nprod_csdim = convert_cols_to_upper(prod_csdim)\\nprod_csdim.createOrReplaceTempView('PROD_CSDIM')\\n\\n# Select the necessary columns\\n# cols_lst = [i.upper() for i in df_prod_dsdim_cols.columns]\\n\\n## changes 1-feb start\\n\\n\\ndf_mm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_STRCT_LVL_LKP\\\")\\n\\ndf_mm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\n\\ndf_lvls = spark.createDataFrame(\\n    [\\n        (1, \\\"1\\\"),\\n        (2, \\\"2\\\"),\\n        (3, \\\"3\\\"),\\n        (4, \\\"4\\\"),\\n        (5, \\\"5\\\"),\\n        (6, \\\"6\\\"),\\n        (7, \\\"7\\\"),\\n        (8, \\\"8\\\"),\\n        (9, \\\"9\\\"),\\n    ],\\n    [\\\"lvl_num\\\", \\\"label\\\"] \\n)\\n\\ndf_lvls.createOrReplaceTempView('lvls')\\nfct_df.createOrReplaceTempView('input_nav')\\n\\nspark.sql('''create or replace temp view prod_lvls as\\nselect distinct prod_lvl_id, prod_lvl_name from input_nav''')\\n\\nspark.sql(\\\"\\\"\\\"create or replace temp view lvl_mapping as\\nWITH lvl\\n        AS ( SELECT * FROM lvls),\\n           mapping\\n        AS (SELECT NVL2 (a.attr_name,\\n                       '''' || a.attr_name || ''' ',\\n                       'NULL')\\n                      || ' as at'\\n                      || lvl.lvl_num\\n                      || ', '\\n                      || NVL (attr_phys_name, 'NULL')\\n                      || ' as av'\\n                      || lvl.lvl_num\\n                         AS map_stmt,\\n                      a.attr_name,\\n                      a.attr_phys_name,\\n                      lvl.lvl_num,\\n                      s2.lvl_num AS curr_lvl_num,\\n                      pl.prod_lvl_id,\\n                      pl.prod_lvl_name\\n            FROM mm_strct_lvl_lkp s1\\n              JOIN mm_attr_lkp a\\n                ON (a.attr_id = s1.attr_id AND a.attr_name != 'ITEM')\\n              JOIN mm_strct_lvl_lkp s2\\n                ON (    s1.strct_id = s2.strct_id)\\n              JOIN prod_lvls pl\\n                ON (    pl.prod_lvl_id = s2.strct_lvl_id)\\n              RIGHT JOIN lvl\\n                ON (lvl.lvl_num = cast(s1.lvl_num as INT)))\\n      SELECT    m.*\\n        FROM mapping m\\n        where lvl_num <= curr_lvl_num\\n        order by prod_lvl_id,lvl_num\\\"\\\"\\\")\\n\\ndf_nav_output = spark.sql('''select distinct attr_phys_name from input_nav nav\\njoin lvl_mapping map\\non nav.prod_lvl_id = map.prod_lvl_id''')\\n\\ndsdim_cols_lst = [i.upper() for i in df_prod_dsdim_cols.columns]\\nattr_cols_lst = df_nav_output.select('attr_phys_name').rdd.map(lambda x: x.attr_phys_name).collect()\\n\\ndiff_cols_lst = [col for col in dsdim_cols_lst if col not in attr_cols_lst]\\ncols_lst = attr_cols_lst.copy()\\n\\nfor col in diff_cols_lst:\\n    cols_lst.append(col)\\n\\n## changes 1-feb end    \\n\\nsel_cols = []\\n\\nfor i in cols_lst:\\n  if i in prod_csdim.columns:\\n    sel_cols.append(i.upper())\\n\\nprod_csdim = prod_csdim.select(*sel_cols)\\n\\n# Select the attribute physical name in attribute lookup\\ncsdim_cols = prod_csdim.columns\\nattr_collect = attr_df.select('ATTR_PHYS_NAME').collect()\\n\\n# Find List of attribute columns\\nattr_cols = []\\nfor i in attr_collect:\\n  if i[0] in csdim_cols:\\n    attr_cols.append(i[0])\\n\\nlist_of_attr = attr_cols\\n[i.upper() for i in list_of_attr]\\n\\n# Find List of non attribute columns\\nnon_attr_cols = list(set(csdim_cols)-set(attr_cols))\\n\\nlist_non_attr_cols = non_attr_cols\\n[i.upper() for i in list_non_attr_cols]\\n\\n# Building Query\\n#step 1\\nst1 = ''\\nfor i in list_non_attr_cols:\\n  st1 = st1 + 'PROD_CSDIM.'+i + ','\\n  \\n#step2\\n\\nst2 = ''\\nitr = 1\\nfor i in list_of_attr:\\n  if i!='ATTR_VAL':\\n    st2 = st2 + f\\\"\\\"\\\"CASE WHEN mavl{itr}.PROD_ATTR_VAL_NAME NOT LIKE '%/%%' ESCAPE '/' THEN NVL(mavl{itr}.PROD_ATTR_VAL_NAME, PROD_CSDIM.{i}) ELSE PROD_CSDIM.{i} END AS {i},  \\\\n\\\"\\\"\\\"\\n  itr = itr+1\\n  \\n#step3\\nst3 = ''\\nitr2=1\\nfor i in list_of_attr:\\n  if i!='ATTR_VAL':\\n    st3 = st3 + f\\\"\\\"\\\"WHEN m{itr2}.ATTR_NAME = PROD_LVL_NAME THEN  CASE WHEN mavl{itr2}.PROD_ATTR_VAL_NAME NOT LIKE '%/%%' ESCAPE '/' THEN NVL(mavl{itr2}.PROD_ATTR_VAL_NAME, PROD_CSDIM.{i})  ELSE PROD_CSDIM.{i} END\\\\n \\\"\\\"\\\"\\n  itr2 = itr2+1\\n  \\n#step4\\nst4 = ''\\nitr3 = 1\\nfor i in list_of_attr:\\n  if i!='ATTR_VAL':\\n    st4 = st4 + f\\\"\\\"\\\"JOIN MM_ATTR_LKP m{itr3} ON m{itr3}.ATTR_PHYS_NAME='{i}'\\n                    LEFT JOIN MM_PROD_ATTR_VAL_LKP mavl{itr3}\\n                    ON\\n                    PROD_CSDIM.PG_CATEG_TXT = mavl{itr3}.CATEG_ID\\n                    AND m{itr3}.ATTR_ID = mavl{itr3}.ATTR_ID\\n                    AND PROD_CSDIM.{i} LIKE  mavl{itr3}.PROD_ATTR_VAL_CODE \\\\n \\\"\\\"\\\"\\n  itr3 = itr3+1\\n  \\n# Complete Query\\n\\nquery = f\\\"\\\"\\\" \\nselect \\n{st1}\\\\n\\n{st2}\\nCASE\\n{st3} END ATTR_VAL FROM PROD_CSDIM\\n{st4}\\n\\\"\\\"\\\"\\n\\ndf_prod_nav = spark.sql(query)\\ndf_prod_nav = convert_cols_to_lower(df_prod_nav)\\n\\ndict_all_dfs['df_prod_nav'] = {\\\"df_object\\\" :df_prod_nav}\\ndf_output_dict['df_prod_nav'] = df_prod_nav\\n\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_csdim\"\n    },\n    {\n      \"name\": \"df_prod_attr_val_lkp1\"\n    },\n    {\n      \"name\": \"df_mm_attr_lkp\"\n    },\n    {\n      \"name\": \"df_prod_dsdim_cols\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nav\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[SQl] on normalize step's",
      "predecessorName": "[gen] on normalize steps",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"sqlQuery\": \"SELECT csdim.prod_16_txt as prod_16_txt,\\ncsdim.last_sellg_txt as last_sellg_txt,\\ncsdim.pg_last_sellg_txt as pg_last_sellg_txt,\\ncsdim.pg_task_txt as pg_task_txt,\\ncsdim.task_txt as task_txt,\\ncsdim.prod_skid as prod_skid,\\ncsdim.run_id as run_id,\\ncsdim.srce_sys_id as srce_sys_id,\\ncsdim.cntrt_id as cntrt_id,\\ncsdim.prod_prttn_code as prod_prttn_code,\\ncsdim.extrn_prod_id as extrn_prod_id,\\ncsdim.prod_name as prod_name,\\ncsdim.prod_desc as prod_desc,\\ncsdim.prod_lvl_id as prod_lvl_id,\\ncsdim.prod_lvl_name as prod_lvl_name,\\ncsdim.all_prod_name as all_prod_name,\\ncsdim.gbu_id as gbu_id,\\ncsdim.sub_gbu_id as sub_gbu_id,\\ncsdim.categ_id as categ_id,\\ncsdim.pg_age_txt as pg_age_txt,\\ncsdim.pg_stain_fight_txt as pg_stain_fight_txt,\\ncsdim.pg_val_add_txt as pg_val_add_txt,\\ncsdim.pg_ozs_per_load_txt as pg_ozs_per_load_txt,\\ncsdim.pg_mach_type_txt as pg_mach_type_txt,\\ncsdim.age_txt as age_txt,\\ncsdim.stain_fight_txt as stain_fight_txt,\\ncsdim.val_add_txt as val_add_txt,\\ncsdim.ozs_per_load_txt as ozs_per_load_txt,\\ncsdim.mach_type_txt as mach_type_txt,\\ncsdim.pg_prmtd_prod_id as pg_prmtd_prod_id,\\ncsdim.match_lvl_code as match_lvl_code,\\ncsdim.extrn_prod_seq_txt as extrn_prod_seq_txt,\\ncsdim.pg_sub_sectr_txt as pg_sub_sectr_txt,\\ncsdim.parnt_prod_skid as parnt_prod_skid,\\ncsdim.pg_price_rottn as pg_price_rottn,\\ncsdim.custm_agg_ind as custm_agg_ind,\\ncsdim.pg_plr_txt as pg_plr_txt,\\ncsdim.plr_txt as plr_txt,\\ncsdim.basic_size_txt as basic_size_txt,\\ncsdim.pg_basic_size_txt as pg_basic_size_txt,\\ncsdim.aisle_txt as aisle_txt,\\ncsdim.categ_gift_set_txt as categ_gift_set_txt,\\ncsdim.clnsg_exprc_txt as clnsg_exprc_txt,\\ncsdim.gca_top_sheet_def_txt as gca_top_sheet_def_txt,\\ncsdim.globl_pack_type_txt as globl_pack_type_txt,\\ncsdim.grp_benft_txt as grp_benft_txt,\\ncsdim.pg_aisle_txt as pg_aisle_txt,\\ncsdim.pg_categ_gift_set_txt as pg_categ_gift_set_txt,\\ncsdim.pg_clnsg_exprc_txt as pg_clnsg_exprc_txt,\\ncsdim.pg_gca_top_sheet_def_txt as pg_gca_top_sheet_def_txt,\\ncsdim.pg_globl_pack_type_txt as pg_globl_pack_type_txt,\\ncsdim.pg_grp_benft_txt as pg_grp_benft_txt,\\ncsdim.pg_scent_grp_txt as pg_scent_grp_txt,\\ncsdim.pg_shelf_seg_txt as pg_shelf_seg_txt,\\ncsdim.pg_style_txt as pg_style_txt,\\ncsdim.scent_grp_txt as scent_grp_txt,\\ncsdim.shelf_seg_txt as shelf_seg_txt,\\ncsdim.pg_us_offcl_txt as pg_us_offcl_txt,\\ncsdim.prod_10_txt as prod_10_txt,\\ncsdim.prod_11_txt as prod_11_txt,\\ncsdim.prod_12_txt as prod_12_txt,\\ncsdim.prod_13_txt as prod_13_txt,\\ncsdim.prod_14_txt as prod_14_txt,\\ncsdim.prod_15_txt as prod_15_txt,\\ncase when mavl1.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl1.prod_attr_val_name, csdim.pg_type_txt)\\nelse csdim.pg_type_txt end as pg_type_txt,\\ncase when mavl2.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl2.prod_attr_val_name, csdim.pg_categ_txt)\\nelse csdim.pg_categ_txt end as pg_categ_txt,\\ncase when mavl3.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl3.prod_attr_val_name, csdim.pg_base_size_txt)\\nelse csdim.pg_base_size_txt end as pg_base_size_txt,\\ncase when mavl4.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl4.prod_attr_val_name, csdim.pg_mfgr_txt)\\nelse csdim.pg_mfgr_txt end as pg_mfgr_txt,\\ncase when mavl5.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl5.prod_attr_val_name, csdim.pg_varnt)\\nelse csdim.pg_varnt end as pg_varnt,\\ncase when mavl6.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl6.prod_attr_val_name, csdim.pg_brand_txt)\\nelse csdim.pg_brand_txt end as pg_brand_txt,\\ncase when mavl7.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl7.prod_attr_val_name, csdim.pg_seg_txt)\\nelse csdim.pg_seg_txt end as pg_seg_txt,\\ncase when mavl8.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl8.prod_attr_val_name, csdim.pg_sub_brand_txt)\\nelse csdim.pg_sub_brand_txt end as pg_sub_brand_txt,\\ncase when mavl9.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl9.prod_attr_val_name, csdim.pg_form_txt)\\nelse csdim.pg_form_txt end as pg_form_txt,\\ncase when mavl10.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl10.prod_attr_val_name, csdim.pg_trgt_user)\\nelse csdim.pg_trgt_user end as pg_trgt_user,\\ncase\\nwhen m1.attr_name = csdim.prod_lvl_name then case when mavl1.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl1.prod_attr_val_name, csdim.pg_type_txt)\\nelse csdim.pg_type_txt end\\nwhen m2.attr_name = csdim.prod_lvl_name then case when mavl2.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl2.prod_attr_val_name, csdim.pg_categ_txt)\\nelse csdim.pg_categ_txt end\\nwhen m3.attr_name = csdim.prod_lvl_name then case when mavl3.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl3.prod_attr_val_name, csdim.pg_base_size_txt)\\nelse csdim.pg_base_size_txt end\\nwhen m4.attr_name = csdim.prod_lvl_name then case when mavl4.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl4.prod_attr_val_name, csdim.pg_mfgr_txt)\\nelse csdim.pg_mfgr_txt end\\nwhen m5.attr_name = csdim.prod_lvl_name then case when mavl5.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl5.prod_attr_val_name, csdim.pg_varnt)\\nelse csdim.pg_varnt end\\nwhen m6.attr_name = csdim.prod_lvl_name then case when mavl6.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl6.prod_attr_val_name, csdim.pg_brand_txt)\\nelse csdim.pg_brand_txt end\\nwhen m7.attr_name = csdim.prod_lvl_name then case when mavl7.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl7.prod_attr_val_name, csdim.pg_seg_txt)\\nelse csdim.pg_seg_txt end\\nwhen m8.attr_name = csdim.prod_lvl_name then case when mavl8.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl8.prod_attr_val_name, csdim.pg_sub_brand_txt)\\nelse csdim.pg_sub_brand_txt end\\nwhen m9.attr_name = csdim.prod_lvl_name then case when mavl9.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl9.prod_attr_val_name, csdim.pg_form_txt)\\nelse csdim.pg_form_txt end\\nwhen m10.attr_name = csdim.prod_lvl_name then case when mavl10.prod_attr_val_name not like '%/%%' escape '/' then nvl(mavl10.prod_attr_val_name, csdim.pg_trgt_user)\\nelse csdim.pg_trgt_user end end attr_val from parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Target/CSDIM/`csdim\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m1 on m1.attr_phys_name='pg_type_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl1\\non\\ncsdim.pg_categ_txt = mavl1.categ_id\\nand m1.attr_id = mavl1.attr_id\\nand csdim.pg_type_txt like mavl1.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m2 on m2.attr_phys_name='pg_categ_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl2\\non\\ncsdim.pg_categ_txt = mavl2.categ_id\\nand m2.attr_id = mavl2.attr_id\\nand csdim.pg_categ_txt like mavl2.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m3 on m3.attr_phys_name='pg_base_size_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl3\\non\\ncsdim.pg_categ_txt = mavl3.categ_id\\nand m3.attr_id = mavl3.attr_id\\nand csdim.pg_base_size_txt like mavl3.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m4 on m4.attr_phys_name='pg_mfgr_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl4\\non\\ncsdim.pg_categ_txt = mavl4.categ_id\\nand m4.attr_id = mavl4.attr_id\\nand csdim.pg_mfgr_txt like mavl4.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m5 on m5.attr_phys_name='pg_varnt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl5\\non\\ncsdim.pg_categ_txt = mavl5.categ_id\\nand m5.attr_id = mavl5.attr_id\\nand csdim.pg_varnt like mavl5.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m6 on m6.attr_phys_name='pg_brand_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl6\\non\\ncsdim.pg_categ_txt = mavl6.categ_id\\nand m6.attr_id = mavl6.attr_id\\nand csdim.pg_brand_txt like mavl6.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m7 on m7.attr_phys_name='pg_seg_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl7\\non\\ncsdim.pg_categ_txt = mavl7.categ_id\\nand m7.attr_id = mavl7.attr_id\\nand csdim.pg_seg_txt like mavl7.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m8 on m8.attr_phys_name='pg_sub_brand_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl8\\non\\ncsdim.pg_categ_txt = mavl8.categ_id\\nand m8.attr_id = mavl8.attr_id\\nand csdim.pg_sub_brand_txt like mavl8.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m9 on m9.attr_phys_name='pg_form_txt'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl9\\non\\ncsdim.pg_categ_txt = mavl9.categ_id\\nand m9.attr_id = mavl9.attr_id\\nand csdim.pg_form_txt like mavl9.prod_attr_val_code\\njoin parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/Tables/MM_ATTR_LKP/` m10 on m10.attr_phys_name='pg_trgt_user'\\nleft join parquet.`/mnt/bf/unrefined/cloudpanel-test/cloudpanel-test-unref/Tier1/5000/MM_PROD_ATTR_VAL_LKP/` mavl10\\non\\ncsdim.pg_categ_txt = mavl10.categ_id\\nand m10.attr_id = mavl10.attr_id\\nand csdim.pg_trgt_user like mavl10.prod_attr_val_code\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_csdim\",\n      \"alias\": \"csdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_nav\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "SQLSyntax",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] get product name and description",
      "predecessorName": "[SQl] on normalize step's",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nav\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"prod_12_txt\",\n      \"columnName\": \"prod_12_txt\"\n    },\n    {\n      \"transformation\": \"prod_13_txt\",\n      \"columnName\": \"prod_13_txt\"\n    },\n    {\n      \"transformation\": \"prod_14_txt\",\n      \"columnName\": \"prod_14_txt\"\n    },\n    {\n      \"transformation\": \"prod_15_txt\",\n      \"columnName\": \"prod_15_txt\"\n    },\n    {\n      \"transformation\": \"pg_type_txt\",\n      \"columnName\": \"pg_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_txt\",\n      \"columnName\": \"pg_categ_txt\"\n    },\n    {\n      \"transformation\": \"pg_base_size_txt\",\n      \"columnName\": \"pg_base_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_mfgr_txt\",\n      \"columnName\": \"pg_mfgr_txt\"\n    },\n    {\n      \"transformation\": \"pg_varnt\",\n      \"columnName\": \"pg_varnt\"\n    },\n    {\n      \"transformation\": \"pg_brand_txt\",\n      \"columnName\": \"pg_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_seg_txt\",\n      \"columnName\": \"pg_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_sub_brand_txt\",\n      \"columnName\": \"pg_sub_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_form_txt\",\n      \"columnName\": \"pg_form_txt\"\n    },\n    {\n      \"transformation\": \"pg_trgt_user\",\n      \"columnName\": \"pg_trgt_user\"\n    },\n    {\n      \"transformation\": \"attr_val\",\n      \"columnName\": \"attr_val\"\n    },\n    {\n      \"transformation\": \"prod_16_txt\",\n      \"columnName\": \"prod_16_txt\"\n    },\n    {\n      \"transformation\": \"last_sellg_txt\",\n      \"columnName\": \"last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"pg_last_sellg_txt\",\n      \"columnName\": \"pg_last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"pg_task_txt\",\n      \"columnName\": \"pg_task_txt\"\n    },\n    {\n      \"transformation\": \"task_txt\",\n      \"columnName\": \"task_txt\"\n    },\n    {\n      \"transformation\": \"prod_skid\",\n      \"columnName\": \"prod_skid\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"extrn_prod_id\",\n      \"columnName\": \"extrn_prod_id\"\n    },\n    {\n      \"transformation\": \"prod_name\",\n      \"columnName\": \"prod_name\"\n    },\n    {\n      \"transformation\": \"prod_desc\",\n      \"columnName\": \"prod_desc\"\n    },\n    {\n      \"transformation\": \"prod_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"all_prod_name\",\n      \"columnName\": \"all_prod_name\"\n    },\n    {\n      \"transformation\": \"gbu_id\",\n      \"columnName\": \"gbu_id\"\n    },\n    {\n      \"transformation\": \"sub_gbu_id\",\n      \"columnName\": \"sub_gbu_id\"\n    },\n    {\n      \"transformation\": \"categ_id\",\n      \"columnName\": \"categ_id\"\n    },\n    {\n      \"transformation\": \"pg_age_txt\",\n      \"columnName\": \"pg_age_txt\"\n    },\n    {\n      \"transformation\": \"pg_stain_fight_txt\",\n      \"columnName\": \"pg_stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"pg_val_add_txt\",\n      \"columnName\": \"pg_val_add_txt\"\n    },\n    {\n      \"transformation\": \"pg_ozs_per_load_txt\",\n      \"columnName\": \"pg_ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"pg_mach_type_txt\",\n      \"columnName\": \"pg_mach_type_txt\"\n    },\n    {\n      \"transformation\": \"age_txt\",\n      \"columnName\": \"age_txt\"\n    },\n    {\n      \"transformation\": \"stain_fight_txt\",\n      \"columnName\": \"stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"val_add_txt\",\n      \"columnName\": \"val_add_txt\"\n    },\n    {\n      \"transformation\": \"ozs_per_load_txt\",\n      \"columnName\": \"ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"mach_type_txt\",\n      \"columnName\": \"mach_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_prmtd_prod_id\",\n      \"columnName\": \"pg_prmtd_prod_id\"\n    },\n    {\n      \"transformation\": \"pg_price_rottn\",\n      \"columnName\": \"pg_price_rottn\"\n    },\n    {\n      \"transformation\": \"custm_agg_ind\",\n      \"columnName\": \"custm_agg_ind\"\n    },\n    {\n      \"transformation\": \"pg_plr_txt\",\n      \"columnName\": \"pg_plr_txt\"\n    },\n    {\n      \"transformation\": \"plr_txt\",\n      \"columnName\": \"plr_txt\"\n    },\n    {\n      \"transformation\": \"basic_size_txt\",\n      \"columnName\": \"basic_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_basic_size_txt\",\n      \"columnName\": \"pg_basic_size_txt\"\n    },\n    {\n      \"transformation\": \"aisle_txt\",\n      \"columnName\": \"aisle_txt\"\n    },\n    {\n      \"transformation\": \"categ_gift_set_txt\",\n      \"columnName\": \"categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"clnsg_exprc_txt\",\n      \"columnName\": \"clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"gca_top_sheet_def_txt\",\n      \"columnName\": \"gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"globl_pack_type_txt\",\n      \"columnName\": \"globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"grp_benft_txt\",\n      \"columnName\": \"grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_aisle_txt\",\n      \"columnName\": \"pg_aisle_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_gift_set_txt\",\n      \"columnName\": \"pg_categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"pg_clnsg_exprc_txt\",\n      \"columnName\": \"pg_clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"pg_gca_top_sheet_def_txt\",\n      \"columnName\": \"pg_gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"pg_globl_pack_type_txt\",\n      \"columnName\": \"pg_globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_grp_benft_txt\",\n      \"columnName\": \"pg_grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_scent_grp_txt\",\n      \"columnName\": \"pg_scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"pg_shelf_seg_txt\",\n      \"columnName\": \"pg_shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_style_txt\",\n      \"columnName\": \"pg_style_txt\"\n    },\n    {\n      \"transformation\": \"scent_grp_txt\",\n      \"columnName\": \"scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"shelf_seg_txt\",\n      \"columnName\": \"shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_us_offcl_txt\",\n      \"columnName\": \"pg_us_offcl_txt\"\n    },\n    {\n      \"transformation\": \"prod_10_txt\",\n      \"columnName\": \"prod_10_txt\"\n    },\n    {\n      \"transformation\": \"prod_11_txt\",\n      \"columnName\": \"prod_11_txt\"\n    },\n    {\n      \"transformation\": \"match_lvl_code\",\n      \"columnName\": \"match_lvl_code\"\n    },\n    {\n      \"transformation\": \"extrn_prod_seq_txt\",\n      \"columnName\": \"extrn_prod_seq_txt\"\n    },\n    {\n      \"transformation\": \"pg_sub_sectr_txt\",\n      \"columnName\": \"pg_sub_sectr_txt\"\n    },\n    {\n      \"transformation\": \"parnt_prod_skid\",\n      \"columnName\": \"parnt_prod_skid\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_gpnd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "df_prod_gpnd",
      "operationDescription": "21-dec-2023  --get df_prod_gpnd from df_prod_nav",
      "predecessorName": "[CET] get product name and description",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_nav\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_gpnd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] get productname and desc",
      "operationDescription": "20-dec-2023 -changed the collect method at lst_prod_lvls step",
      "predecessorName": "df_prod_gpnd",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_nav = df_input_dict['df_prod_gpnd']\\n\\n# generic code starts\\nfrom pyspark.sql.functions import col, lit,row_number,monotonically_increasing_id,col,concat_ws\\nfrom pyspark.sql.window import Window\\n\\n\\n\\n\\ndf_mm_strct_lvl_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_STRCT_LVL_LKP\\\")\\n\\ndf_mm_attr_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_ATTR_LKP\\\")\\n\\ndf_mm_strct_lvl_lkp.createOrReplaceTempView('mm_strct_lvl_lkp')\\ndf_mm_attr_lkp.createOrReplaceTempView('mm_attr_lkp')\\n\\ndf_lvls = spark.createDataFrame(\\n    [\\n        (1, \\\"1\\\"),\\n        (2, \\\"2\\\"),\\n        (3, \\\"3\\\"),\\n        (4, \\\"4\\\"),\\n        (5, \\\"5\\\"),\\n        (6, \\\"6\\\"),\\n        (7, \\\"7\\\"),\\n        (8, \\\"8\\\"),\\n        (9, \\\"9\\\"),\\n    ],\\n    [\\\"lvl_num\\\", \\\"label\\\"] \\n)\\n\\ndf_lvls.createOrReplaceTempView('lvls')\\ndf_nav.createOrReplaceTempView('input_nav')\\n\\nspark.sql('''create or replace temp view prod_lvls as\\nselect distinct prod_lvl_id, prod_lvl_name from input_nav''')\\n\\nspark.sql(\\\"\\\"\\\"create or replace temp view lvl_mapping as\\nWITH lvl\\n        AS ( SELECT * FROM lvls),\\n           mapping\\n        AS (SELECT NVL2 (a.attr_name,\\n                       '''' || a.attr_name || ''' ',\\n                       'NULL')\\n                      || ' as at'\\n                      || lvl.lvl_num\\n                      || ', '\\n                      || NVL (attr_phys_name, 'NULL')\\n                      || ' as av'\\n                      || lvl.lvl_num\\n                         AS map_stmt,\\n                      a.attr_name,\\n                      a.attr_phys_name,\\n                      lvl.lvl_num,\\n                      s2.lvl_num AS curr_lvl_num,\\n                      pl.prod_lvl_id,\\n                      pl.prod_lvl_name\\n            FROM mm_strct_lvl_lkp s1\\n              JOIN mm_attr_lkp a\\n                ON (a.attr_id = s1.attr_id AND a.attr_name != 'ITEM')\\n              JOIN mm_strct_lvl_lkp s2\\n                ON (    s1.strct_id = s2.strct_id)\\n              JOIN prod_lvls pl\\n                ON (    pl.prod_lvl_id = s2.strct_lvl_id)\\n              RIGHT JOIN lvl\\n                ON (lvl.lvl_num = cast(s1.lvl_num as INT)))\\n      SELECT    m.*\\n        FROM mapping m\\n        where lvl_num <= curr_lvl_num\\n        order by prod_lvl_id,lvl_num\\\"\\\"\\\")\\n\\nspark.sql(\\\"\\\"\\\"\\ncreate or replace temp view input_nav_with_cols as\\nwith cols_extrn_prod_id as\\n(select concat_ws(',',collect_list(attr_phys_name1)) bus_name_1,concat_ws(',',collect_list(attr_phys_name2)) bus_name_2,extrn_prod_id from\\n(\\nselect case when nav.prod_lvl_name != 'CATEGORY' and map.attr_name = 'CATEGORY' then null \\n            when nav.prod_lvl_name != 'COMPANY' and map.attr_name = 'COMPANY' then null\\n            else attr_phys_name \\n            end attr_phys_name1,\\ncase when nav.prod_lvl_name != 'CATEGORY' and map.attr_name = 'CATEGORY' then 'categ_id' else attr_phys_name end attr_phys_name2,\\nextrn_prod_id,lvl_num from input_nav nav\\njoin lvl_mapping map\\non nav.prod_lvl_id = map.prod_lvl_id\\norder by extrn_prod_id,lvl_num\\n)\\ngroup by extrn_prod_id)\\nselect bus_name_1,ltrim(bus_name_1,',') bus_name_111,bus_name_2,nav1.*\\nfrom input_nav nav1\\nleft join cols_extrn_prod_id c\\non c.extrn_prod_id = nav1.extrn_prod_id\\nwhere nav1.prod_lvl_name != 'ITEM'\\\"\\\"\\\")\\n\\ndf_input_nav_with_cols = spark.sql('''select * from input_nav_with_cols''')  \\n\\ndf_tmp = df_input_nav_with_cols.select(col('prod_Desc').alias('prod_name_desc'),'extrn_prod_id').limit(0)\\n\\nlst_prod_lvls = spark.sql(f'''select distinct prod_lvl_id from input_nav_with_cols''').collect()\\n\\nfor i in lst_prod_lvls:\\n  # print(i)\\n  cols1 = spark.sql(f'''select distinct bus_name_1 from input_nav_with_cols where prod_lvl_id = {i[0]}''').collect()[0][0]\\n  cols2 = spark.sql(f'''select distinct bus_name_2 from input_nav_with_cols where prod_lvl_id = {i[0]}''').collect()[0][0]\\n  lst_part1_cols = cols1.split(',')\\n  lst_part2_cols = cols2.split(',')\\n  \\n  df_tmp = df_tmp.union(df_input_nav_with_cols.where(df_input_nav_with_cols[\\\"prod_lvl_id\\\"]==i[0]).select(concat_ws('|',concat_ws(' ',*lst_part1_cols),concat_ws(' ',*lst_part2_cols)).alias('prod_name_desc_test'),'extrn_prod_id'))\\n\\ndf_nav_output = df_nav.join(df_tmp,'extrn_prod_id','left')  \\n\\n\\n# generic code ends\\ndf_output_dict['df_prod_gpnd'] = df_nav_output\\ndict_all_dfs['df_prod_gpnd'] = {\\\"df_object\\\" :df_nav_output}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gpnd\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_gpnd\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": true
    },
    {
      "operationName": "[CET] set product name and description",
      "predecessorName": "[gen] get productname and desc",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gpnd\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_val\",\n      \"columnName\": \"all_prod_name\"\n    },\n    {\n      \"transformation\": \"prod_12_txt\",\n      \"columnName\": \"prod_12_txt\"\n    },\n    {\n      \"transformation\": \"prod_13_txt\",\n      \"columnName\": \"prod_13_txt\"\n    },\n    {\n      \"transformation\": \"prod_14_txt\",\n      \"columnName\": \"prod_14_txt\"\n    },\n    {\n      \"transformation\": \"prod_15_txt\",\n      \"columnName\": \"prod_15_txt\"\n    },\n    {\n      \"transformation\": \"pg_type_txt\",\n      \"columnName\": \"pg_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_txt\",\n      \"columnName\": \"pg_categ_txt\"\n    },\n    {\n      \"transformation\": \"pg_base_size_txt\",\n      \"columnName\": \"pg_base_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_mfgr_txt\",\n      \"columnName\": \"pg_mfgr_txt\"\n    },\n    {\n      \"transformation\": \"pg_varnt\",\n      \"columnName\": \"pg_varnt\"\n    },\n    {\n      \"transformation\": \"pg_brand_txt\",\n      \"columnName\": \"pg_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_seg_txt\",\n      \"columnName\": \"pg_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_sub_brand_txt\",\n      \"columnName\": \"pg_sub_brand_txt\"\n    },\n    {\n      \"transformation\": \"pg_form_txt\",\n      \"columnName\": \"pg_form_txt\"\n    },\n    {\n      \"transformation\": \"pg_trgt_user\",\n      \"columnName\": \"pg_trgt_user\"\n    },\n    {\n      \"transformation\": \"attr_val\",\n      \"columnName\": \"attr_val\"\n    },\n    {\n      \"transformation\": \"prod_16_txt\",\n      \"columnName\": \"prod_16_txt\"\n    },\n    {\n      \"transformation\": \"last_sellg_txt\",\n      \"columnName\": \"last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"pg_last_sellg_txt\",\n      \"columnName\": \"pg_last_sellg_txt\"\n    },\n    {\n      \"transformation\": \"pg_task_txt\",\n      \"columnName\": \"pg_task_txt\"\n    },\n    {\n      \"transformation\": \"task_txt\",\n      \"columnName\": \"task_txt\"\n    },\n    {\n      \"transformation\": \"prod_skid\",\n      \"columnName\": \"prod_skid\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"srce_sys_id\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"prod_prttn_code\",\n      \"columnName\": \"prod_prttn_code\"\n    },\n    {\n      \"transformation\": \"extrn_prod_id\",\n      \"columnName\": \"extrn_prod_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_id\",\n      \"columnName\": \"prod_lvl_id\"\n    },\n    {\n      \"transformation\": \"prod_lvl_name\",\n      \"columnName\": \"prod_lvl_name\"\n    },\n    {\n      \"transformation\": \"gbu_id\",\n      \"columnName\": \"gbu_id\"\n    },\n    {\n      \"transformation\": \"sub_gbu_id\",\n      \"columnName\": \"sub_gbu_id\"\n    },\n    {\n      \"transformation\": \"categ_id\",\n      \"columnName\": \"categ_id\"\n    },\n    {\n      \"transformation\": \"pg_age_txt\",\n      \"columnName\": \"pg_age_txt\"\n    },\n    {\n      \"transformation\": \"pg_stain_fight_txt\",\n      \"columnName\": \"pg_stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"pg_val_add_txt\",\n      \"columnName\": \"pg_val_add_txt\"\n    },\n    {\n      \"transformation\": \"pg_ozs_per_load_txt\",\n      \"columnName\": \"pg_ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"pg_mach_type_txt\",\n      \"columnName\": \"pg_mach_type_txt\"\n    },\n    {\n      \"transformation\": \"age_txt\",\n      \"columnName\": \"age_txt\"\n    },\n    {\n      \"transformation\": \"stain_fight_txt\",\n      \"columnName\": \"stain_fight_txt\"\n    },\n    {\n      \"transformation\": \"val_add_txt\",\n      \"columnName\": \"val_add_txt\"\n    },\n    {\n      \"transformation\": \"ozs_per_load_txt\",\n      \"columnName\": \"ozs_per_load_txt\"\n    },\n    {\n      \"transformation\": \"mach_type_txt\",\n      \"columnName\": \"mach_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_prmtd_prod_id\",\n      \"columnName\": \"pg_prmtd_prod_id\"\n    },\n    {\n      \"transformation\": \"pg_price_rottn\",\n      \"columnName\": \"pg_price_rottn\"\n    },\n    {\n      \"transformation\": \"custm_agg_ind\",\n      \"columnName\": \"custm_agg_ind\"\n    },\n    {\n      \"transformation\": \"pg_plr_txt\",\n      \"columnName\": \"pg_plr_txt\"\n    },\n    {\n      \"transformation\": \"plr_txt\",\n      \"columnName\": \"plr_txt\"\n    },\n    {\n      \"transformation\": \"basic_size_txt\",\n      \"columnName\": \"basic_size_txt\"\n    },\n    {\n      \"transformation\": \"pg_basic_size_txt\",\n      \"columnName\": \"pg_basic_size_txt\"\n    },\n    {\n      \"transformation\": \"aisle_txt\",\n      \"columnName\": \"aisle_txt\"\n    },\n    {\n      \"transformation\": \"categ_gift_set_txt\",\n      \"columnName\": \"categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"clnsg_exprc_txt\",\n      \"columnName\": \"clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"gca_top_sheet_def_txt\",\n      \"columnName\": \"gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"globl_pack_type_txt\",\n      \"columnName\": \"globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"grp_benft_txt\",\n      \"columnName\": \"grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_aisle_txt\",\n      \"columnName\": \"pg_aisle_txt\"\n    },\n    {\n      \"transformation\": \"pg_categ_gift_set_txt\",\n      \"columnName\": \"pg_categ_gift_set_txt\"\n    },\n    {\n      \"transformation\": \"pg_clnsg_exprc_txt\",\n      \"columnName\": \"pg_clnsg_exprc_txt\"\n    },\n    {\n      \"transformation\": \"pg_gca_top_sheet_def_txt\",\n      \"columnName\": \"pg_gca_top_sheet_def_txt\"\n    },\n    {\n      \"transformation\": \"pg_globl_pack_type_txt\",\n      \"columnName\": \"pg_globl_pack_type_txt\"\n    },\n    {\n      \"transformation\": \"pg_grp_benft_txt\",\n      \"columnName\": \"pg_grp_benft_txt\"\n    },\n    {\n      \"transformation\": \"pg_scent_grp_txt\",\n      \"columnName\": \"pg_scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"pg_shelf_seg_txt\",\n      \"columnName\": \"pg_shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_style_txt\",\n      \"columnName\": \"pg_style_txt\"\n    },\n    {\n      \"transformation\": \"scent_grp_txt\",\n      \"columnName\": \"scent_grp_txt\"\n    },\n    {\n      \"transformation\": \"shelf_seg_txt\",\n      \"columnName\": \"shelf_seg_txt\"\n    },\n    {\n      \"transformation\": \"pg_us_offcl_txt\",\n      \"columnName\": \"pg_us_offcl_txt\"\n    },\n    {\n      \"transformation\": \"prod_10_txt\",\n      \"columnName\": \"prod_10_txt\"\n    },\n    {\n      \"transformation\": \"prod_11_txt\",\n      \"columnName\": \"prod_11_txt\"\n    },\n    {\n      \"transformation\": \"match_lvl_code\",\n      \"columnName\": \"match_lvl_code\"\n    },\n    {\n      \"transformation\": \"extrn_prod_seq_txt\",\n      \"columnName\": \"extrn_prod_seq_txt\"\n    },\n    {\n      \"transformation\": \"pg_sub_sectr_txt\",\n      \"columnName\": \"pg_sub_sectr_txt\"\n    },\n    {\n      \"transformation\": \"parnt_prod_skid\",\n      \"columnName\": \"parnt_prod_skid\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] set product name and description v2",
      "operationDescription": "20-12-2023  -new step to set prod name and desc",
      "predecessorName": "[CET] set product name and description",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_gpnd\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"attr_val\",\n      \"columnName\": \"all_prod_name\"\n    },\n    {\n      \"transformation\": \"(case prod_lvl_name when 'ITEM' then prod_name else split(prod_name_desc,'\\\\\\\\|')[0] end)\",\n      \"columnName\": \"prod_name\"\n    },\n    {\n      \"transformation\": \"(case prod_lvl_name when 'ITEM' then prod_desc else split(prod_name_desc,'\\\\\\\\|')[1] end)\",\n      \"columnName\": \"prod_desc\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL] on find new and changed product's in dim ta",
      "predecessorName": "[CET] set product name and description v2",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"expression\": \"cntrt_id = <<CNTRT_ID>> and srce_sys_id = <<SRCE_SYS_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] find new and changed product's in dim ta",
      "operationDescription": "22-12-2023 --disabled this step",
      "predecessorName": "[FL] on find new and changed product's in dim ta",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"joinType\": \"LEFT OUTER\",\n  \"referenceDataframe\": \"df_prod_cdim\",\n  \"joinExpression\": \"ref.prod_skid = in.prod_skid\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_prod_cdim\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id1\"\n        },\n        {\n          \"columnName\": \"prod_skid\",\n          \"columnAlias\": \"prod_skid1\"\n        },\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id1\"\n        },\n        {\n          \"columnName\": \"cntrt_id\",\n          \"columnAlias\": \"cntrt_id1\"\n        },\n        {\n          \"columnName\": \"prod_prttn_code\",\n          \"columnAlias\": \"prod_prttn_code1\"\n        },\n        {\n          \"columnName\": \"prod_name\",\n          \"columnAlias\": \"prod_name1\"\n        },\n        {\n          \"columnName\": \"prod_desc\",\n          \"columnAlias\": \"prod_desc1\"\n        },\n        {\n          \"columnName\": \"prod_lvl_id\",\n          \"columnAlias\": \"prod_lvl_id1\"\n        },\n        {\n          \"columnName\": \"prod_lvl_name\",\n          \"columnAlias\": \"prod_lvl_name1\"\n        },\n        {\n          \"columnName\": \"all_prod_name\",\n          \"columnAlias\": \"all_prod_name1\"\n        },\n        {\n          \"columnName\": \"gbu_id\",\n          \"columnAlias\": \"gbu_id1\"\n        },\n        {\n          \"columnName\": \"sub_gbu_id\",\n          \"columnAlias\": \"sub_gbu_id1\"\n        },\n        {\n          \"columnName\": \"categ_id\",\n          \"columnAlias\": \"categ_id1\"\n        },\n        {\n          \"columnName\": \"custm_agg_ind\",\n          \"columnAlias\": \"custm_agg_ind1\"\n        },\n        {\n          \"columnName\": \"pg_base_size_txt\",\n          \"columnAlias\": \"pg_base_size_txt1\"\n        },\n        {\n          \"columnName\": \"pg_brand_txt\",\n          \"columnAlias\": \"pg_brand_txt1\"\n        },\n        {\n          \"columnName\": \"pg_categ_txt\",\n          \"columnAlias\": \"pg_categ_txt1\"\n        },\n        {\n          \"columnName\": \"pg_form_txt\",\n          \"columnAlias\": \"pg_form_txt1\"\n        },\n        {\n          \"columnName\": \"pg_mfgr_txt\",\n          \"columnAlias\": \"pg_mfgr_txt1\"\n        },\n        {\n          \"columnName\": \"pg_seg_txt\",\n          \"columnAlias\": \"pg_seg_txt1\"\n        },\n        {\n          \"columnName\": \"pg_sub_brand_txt\",\n          \"columnAlias\": \"pg_sub_brand_txt1\"\n        },\n        {\n          \"columnName\": \"pg_trgt_user\",\n          \"columnAlias\": \"pg_trgt_user1\"\n        },\n        {\n          \"columnName\": \"pg_type_txt\",\n          \"columnAlias\": \"pg_type_txt1\"\n        },\n        {\n          \"columnName\": \"pg_varnt\",\n          \"columnAlias\": \"pg_varnt1\"\n        },\n        {\n          \"columnName\": \"pg_age_txt\",\n          \"columnAlias\": \"pg_age_txt1\"\n        },\n        {\n          \"columnName\": \"pg_stain_fight_txt\",\n          \"columnAlias\": \"pg_stain_fight_txt1\"\n        },\n        {\n          \"columnName\": \"pg_val_add_txt\",\n          \"columnAlias\": \"pg_val_add_txt1\"\n        },\n        {\n          \"columnName\": \"pg_ozs_per_load_txt\",\n          \"columnAlias\": \"pg_ozs_per_load_txt1\"\n        },\n        {\n          \"columnName\": \"pg_mach_type_txt\",\n          \"columnAlias\": \"pg_mach_type_txt1\"\n        },\n        {\n          \"columnName\": \"age_txt\",\n          \"columnAlias\": \"age_txt1\"\n        },\n        {\n          \"columnName\": \"stain_fight_txt\",\n          \"columnAlias\": \"stain_fight_txt1\"\n        },\n        {\n          \"columnName\": \"val_add_txt\",\n          \"columnAlias\": \"val_add_txt1\"\n        },\n        {\n          \"columnName\": \"ozs_per_load_txt\",\n          \"columnAlias\": \"ozs_per_load_txt1\"\n        },\n        {\n          \"columnName\": \"mach_type_txt\",\n          \"columnAlias\": \"mach_type_txt1\"\n        },\n        {\n          \"columnName\": \"pg_prmtd_prod_id\",\n          \"columnAlias\": \"pg_prmtd_prod_id1\"\n        },\n        {\n          \"columnName\": \"pg_price_rottn\",\n          \"columnAlias\": \"pg_price_rottn1\"\n        },\n        {\n          \"columnName\": \"pg_plr_txt\",\n          \"columnAlias\": \"pg_plr_txt1\"\n        },\n        {\n          \"columnName\": \"plr_txt\",\n          \"columnAlias\": \"plr_txt1\"\n        },\n        {\n          \"columnName\": \"basic_size_txt\",\n          \"columnAlias\": \"basic_size_txt1\"\n        },\n        {\n          \"columnName\": \"pg_basic_size_txt\",\n          \"columnAlias\": \"pg_basic_size_txt1\"\n        },\n        {\n          \"columnName\": \"aisle_txt\",\n          \"columnAlias\": \"aisle_txt1\"\n        },\n        {\n          \"columnName\": \"categ_gift_set_txt\",\n          \"columnAlias\": \"categ_gift_set_txt1\"\n        },\n        {\n          \"columnName\": \"clnsg_exprc_txt\",\n          \"columnAlias\": \"clnsg_exprc_txt1\"\n        },\n        {\n          \"columnName\": \"gca_top_sheet_def_txt\",\n          \"columnAlias\": \"gca_top_sheet_def_txt1\"\n        },\n        {\n          \"columnName\": \"globl_pack_type_txt\",\n          \"columnAlias\": \"globl_pack_type_txt1\"\n        },\n        {\n          \"columnName\": \"grp_benft_txt\",\n          \"columnAlias\": \"grp_benft_txt1\"\n        },\n        {\n          \"columnName\": \"pg_aisle_txt\",\n          \"columnAlias\": \"pg_aisle_txt1\"\n        },\n        {\n          \"columnName\": \"pg_categ_gift_set_txt\",\n          \"columnAlias\": \"pg_categ_gift_set_txt1\"\n        },\n        {\n          \"columnName\": \"pg_clnsg_exprc_txt\",\n          \"columnAlias\": \"pg_clnsg_exprc_txt1\"\n        },\n        {\n          \"columnName\": \"pg_gca_top_sheet_def_txt\",\n          \"columnAlias\": \"pg_gca_top_sheet_def_txt1\"\n        },\n        {\n          \"columnName\": \"pg_globl_pack_type_txt\",\n          \"columnAlias\": \"pg_globl_pack_type_txt1\"\n        },\n        {\n          \"columnName\": \"pg_grp_benft_txt\",\n          \"columnAlias\": \"pg_grp_benft_txt1\"\n        },\n        {\n          \"columnName\": \"pg_scent_grp_txt\",\n          \"columnAlias\": \"pg_scent_grp_txt1\"\n        },\n        {\n          \"columnName\": \"pg_shelf_seg_txt\",\n          \"columnAlias\": \"pg_shelf_seg_txt1\"\n        },\n        {\n          \"columnName\": \"pg_style_txt\",\n          \"columnAlias\": \"pg_style_txt1\"\n        },\n        {\n          \"columnName\": \"scent_grp_txt\",\n          \"columnAlias\": \"scent_grp_txt1\"\n        },\n        {\n          \"columnName\": \"shelf_seg_txt\",\n          \"columnAlias\": \"shelf_seg_txt1\"\n        },\n        {\n          \"columnName\": \"pg_us_offcl_txt\",\n          \"columnAlias\": \"pg_us_offcl_txt1\"\n        },\n        {\n          \"columnName\": \"prod_10_txt\",\n          \"columnAlias\": \"prod_10_txt1\"\n        },\n        {\n          \"columnName\": \"prod_11_txt\",\n          \"columnAlias\": \"prod_11_txt1\"\n        },\n        {\n          \"columnName\": \"prod_12_txt\",\n          \"columnAlias\": \"prod_12_txt1\"\n        },\n        {\n          \"columnName\": \"prod_13_txt\",\n          \"columnAlias\": \"prod_13_txt1\"\n        },\n        {\n          \"columnName\": \"prod_14_txt\",\n          \"columnAlias\": \"prod_14_txt1\"\n        },\n        {\n          \"columnName\": \"prod_15_txt\",\n          \"columnAlias\": \"prod_15_txt1\"\n        },\n        {\n          \"columnName\": \"prod_16_txt\",\n          \"columnAlias\": \"prod_16_txt1\"\n        },\n        {\n          \"columnName\": \"match_lvl_code\",\n          \"columnAlias\": \"match_lvl_code1\"\n        },\n        {\n          \"columnName\": \"extrn_prod_seq_txt\",\n          \"columnAlias\": \"extrn_prod_seq_txt1\"\n        },\n        {\n          \"columnName\": \"pg_sub_sectr_txt\",\n          \"columnAlias\": \"pg_sub_sectr_txt1\"\n        },\n        {\n          \"columnName\": \"parnt_prod_skid\",\n          \"columnAlias\": \"parnt_prod_skid1\"\n        },\n        {\n          \"columnName\": \"last_sellg_txt\",\n          \"columnAlias\": \"last_sellg_txt1\"\n        },\n        {\n          \"columnName\": \"pg_last_sellg_txt\",\n          \"columnAlias\": \"pg_last_sellg_txt1\"\n        },\n        {\n          \"columnName\": \"pg_task_txt\",\n          \"columnAlias\": \"pg_task_txt1\"\n        },\n        {\n          \"columnName\": \"task_txt\",\n          \"columnAlias\": \"task_txt1\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on find new and changed product's in dim tab",
      "operationDescription": "22-12-2023 --disabled this step",
      "predecessorName": "[JOIN] find new and changed product's in dim ta",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"CASE  WHEN prod_skid IS NULL  THEN 'I' WHEN run_id1 <> run_id or (run_id1 is null and run_id is not null) or srce_sys_id1 <> srce_sys_id or (srce_sys_id1 is null and srce_sys_id is not null) or cntrt_id1 <> cntrt_id or (cntrt_id1 is null and cntrt_id is not null) or prod_prttn_code1 <> prod_prttn_code or (prod_prttn_code1 is null and prod_prttn_code is not null) or prod_name1 <> prod_name or (prod_name1 is null and prod_name is not null) or prod_desc1 <> prod_desc or (prod_desc1 is null and prod_desc is not null) or prod_lvl_id1 <> prod_lvl_id or (prod_lvl_id1 is null and prod_lvl_id is not null) or prod_lvl_name1 <> prod_lvl_name or (prod_lvl_name1 is null and prod_lvl_name is not null) or all_prod_name1 <> all_prod_name or (all_prod_name1 is null and all_prod_name is not null) or gbu_id1 <> gbu_id or (gbu_id1 is null and gbu_id is not null) or sub_gbu_id1 <> sub_gbu_id or (sub_gbu_id1 is null and sub_gbu_id is not null) or categ_id1 <> categ_id or (categ_id1 is null and categ_id is not null) or custm_agg_ind1 <> custm_agg_ind or (custm_agg_ind1 is null and custm_agg_ind is not null) or pg_base_size_txt1 <> pg_base_size_txt or (pg_base_size_txt1 is null and pg_base_size_txt is not null) or pg_brand_txt1 <> pg_brand_txt or (pg_brand_txt1 is null and pg_brand_txt is not null) or pg_categ_txt1 <> pg_categ_txt or (pg_categ_txt1 is null and pg_categ_txt is not null) or pg_form_txt1 <> pg_form_txt or (pg_form_txt1 is null and pg_form_txt is not null) or pg_mfgr_txt1 <> pg_mfgr_txt or (pg_mfgr_txt1 is null and pg_mfgr_txt is not null) or pg_seg_txt1 <> pg_seg_txt or (pg_seg_txt1 is null and pg_seg_txt is not null) or pg_sub_brand_txt1 <> pg_sub_brand_txt or (pg_sub_brand_txt1 is null and pg_sub_brand_txt is not null) or pg_trgt_user1 <> pg_trgt_user or (pg_trgt_user1 is null and pg_trgt_user is not null) or pg_type_txt1 <> pg_type_txt or (pg_type_txt1 is null and pg_type_txt is not null) or pg_varnt1 <> pg_varnt or (pg_varnt1 is null and pg_varnt is not null) or pg_age_txt1 <> pg_age_txt or (pg_age_txt1 is null and pg_age_txt is not null) or pg_stain_fight_txt1 <> pg_stain_fight_txt or (pg_stain_fight_txt1 is null and pg_stain_fight_txt is not null) or pg_val_add_txt1 <> pg_val_add_txt or (pg_val_add_txt1 is null and pg_val_add_txt is not null) or pg_ozs_per_load_txt1 <> pg_ozs_per_load_txt or (pg_ozs_per_load_txt1 is null and pg_ozs_per_load_txt is not null) or pg_mach_type_txt1 <> pg_mach_type_txt or (pg_mach_type_txt1 is null and pg_mach_type_txt is not null) or age_txt1 <> age_txt or (age_txt1 is null and age_txt is not null) or stain_fight_txt1 <> stain_fight_txt or (stain_fight_txt1 is null and stain_fight_txt is not null) or val_add_txt1 <> val_add_txt or (val_add_txt1 is null and val_add_txt is not null) or ozs_per_load_txt1 <> ozs_per_load_txt or (ozs_per_load_txt1 is null and ozs_per_load_txt is not null) or mach_type_txt1 <> mach_type_txt or (mach_type_txt1 is null and mach_type_txt is not null) or pg_prmtd_prod_id1 <> pg_prmtd_prod_id or (pg_prmtd_prod_id1 is null and pg_prmtd_prod_id is not null)or match_lvl_code1 <> match_lvl_code or (match_lvl_code1 is null and match_lvl_code is not null) or extrn_prod_seq_txt1 <> extrn_prod_seq_txt or (extrn_prod_seq_txt1 is null and extrn_prod_seq_txt is not null) or pg_sub_sectr_txt1 <> pg_sub_sectr_txt or (pg_sub_sectr_txt1 is null and pg_sub_sectr_txt is not null) or parnt_prod_skid1 <> parnt_prod_skid or (parnt_prod_skid1 is null and parnt_prod_skid is not null) or pg_price_rottn1 <> pg_price_rottn or (pg_price_rottn1 is null and pg_price_rottn is not null) or pg_plr_txt1 <> pg_plr_txt or (pg_plr_txt1 is null and pg_plr_txt is not null) or plr_txt1 <> plr_txt or (plr_txt1 is null and plr_txt is not null) or basic_size_txt1 <> basic_size_txt or (basic_size_txt1 is null and basic_size_txt is not null) or pg_basic_size_txt1 <> pg_basic_size_txt or (pg_basic_size_txt1 is null and pg_basic_size_txt is not null) or aisle_txt1 <> aisle_txt or (aisle_txt1 is null and aisle_txt is not null) or categ_gift_set_txt1 <> categ_gift_set_txt or (categ_gift_set_txt1 is null and categ_gift_set_txt is not null) or clnsg_exprc_txt1 <> clnsg_exprc_txt or (clnsg_exprc_txt1 is null and clnsg_exprc_txt is not null) or gca_top_sheet_def_txt1 <> gca_top_sheet_def_txt or (gca_top_sheet_def_txt1 is null and gca_top_sheet_def_txt is not null) or globl_pack_type_txt1 <> globl_pack_type_txt or (globl_pack_type_txt1 is null and globl_pack_type_txt is not null) or grp_benft_txt1 <> grp_benft_txt or (grp_benft_txt1 is null and grp_benft_txt is not null) or pg_aisle_txt1 <> pg_aisle_txt or (pg_aisle_txt1 is null and pg_aisle_txt is not null) or pg_categ_gift_set_txt1 <> pg_categ_gift_set_txt or (pg_categ_gift_set_txt1 is null and pg_categ_gift_set_txt is not null) or pg_clnsg_exprc_txt1 <> pg_clnsg_exprc_txt or (pg_clnsg_exprc_txt1 is null and pg_clnsg_exprc_txt is not null) or pg_gca_top_sheet_def_txt1 <> pg_gca_top_sheet_def_txt or (pg_gca_top_sheet_def_txt1 is null and pg_gca_top_sheet_def_txt is not null) or pg_globl_pack_type_txt1 <> pg_globl_pack_type_txt or (pg_globl_pack_type_txt1 is null and pg_globl_pack_type_txt is not null) or pg_grp_benft_txt1 <> pg_grp_benft_txt or (pg_grp_benft_txt1 is null and pg_grp_benft_txt is not null) or pg_scent_grp_txt1 <> pg_scent_grp_txt or (pg_scent_grp_txt1 is null and pg_scent_grp_txt is not null) or pg_shelf_seg_txt1 <> pg_shelf_seg_txt or (pg_shelf_seg_txt1 is null and pg_shelf_seg_txt is not null) or pg_style_txt1 <> pg_style_txt or (pg_style_txt1 is null and pg_style_txt is not null) or scent_grp_txt1 <> scent_grp_txt or (scent_grp_txt1 is null and scent_grp_txt is not null) or shelf_seg_txt1 <> shelf_seg_txt or (shelf_seg_txt1 is null and shelf_seg_txt is not null) or pg_us_offcl_txt1 <> pg_us_offcl_txt or (pg_us_offcl_txt1 is null and pg_us_offcl_txt is not null) or prod_10_txt1 <> prod_10_txt or (prod_10_txt1 is null and prod_10_txt is not null) or prod_11_txt1 <> prod_11_txt or (prod_11_txt1 is null and prod_11_txt is not null) or prod_12_txt1 <> prod_12_txt or (prod_12_txt1 is null and prod_12_txt is not null) or prod_13_txt1 <> prod_13_txt or (prod_13_txt1 is null and prod_13_txt is not null) or prod_14_txt1 <> prod_14_txt or (prod_14_txt1 is null and prod_14_txt is not null) or prod_15_txt1 <> prod_15_txt or (prod_15_txt1 is null and prod_15_txt is not null) or prod_16_txt1 <> prod_16_txt or (prod_16_txt1 is null and prod_16_txt is not null) or last_sellg_txt1 <> last_sellg_txt or (last_sellg_txt1 is null and last_sellg_txt is not null) or pg_last_sellg_txt1 <> pg_last_sellg_txt or (pg_last_sellg_txt1 is null and pg_last_sellg_txt is not null) or pg_task_txt1 <> pg_task_txt or (pg_task_txt1 is null and pg_task_txt is not null) or task_txt1 <> task_txt or (task_txt1 is null and task_txt is not null) THEN 'U' ELSE 'E' END\",\n      \"columnName\": \"flag\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[gen] find new and changed products in dim",
      "operationDescription": "22-12-2023  --new step to derive Flag column\n--disabled previous 2 steps (join and cet)",
      "predecessorName": "[CET] on find new and changed product's in dim tab",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_apnd = dict_all_dfs['df_prod_apnd'][\\\"df_object\\\"]\\ndf_prod_cdim = dict_all_dfs['df_prod_cdim'][\\\"df_object\\\"]\\n\\ndf_prod_cdim.createOrReplaceTempView('prod_cdim')\\ndf_prod_apnd.createOrReplaceTempView('prod_apnd')\\n\\nlst_prod_apnd_cols = df_prod_apnd.columns\\nlst_prod_apnd_cols.remove('extrn_prod_id')\\nlst_prod_apnd_cols.remove('attr_val')\\nlst_prod_apnd_cols.remove('prod_name_desc')\\n\\nstr_cond = ''\\ni=1\\nfor col in lst_prod_apnd_cols:\\n  str_cond+=f'cdim.{col} <> apnd.{col} or (cdim.{col} is null and apnd.{col} is not null) or '\\n  i+=1\\nstr_cond = str_cond.rstrip('or ')\\n\\ndf_prod_apnd = spark.sql(f'''select apnd.*,case when apnd.prod_skid IS NULL THEN 'I' when {str_cond} THEN 'U' ELSE 'E' end flag from prod_apnd apnd left outer join prod_cdim cdim on apnd.prod_skid=cdim.prod_skid''')\\n\\ndict_all_dfs['df_prod_apnd'] = {\\\"df_object\\\" :df_prod_apnd}\\ndf_output_dict['df_prod_apnd'] = df_prod_apnd\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\"\n    },\n    {\n      \"name\": \"df_prod_cdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "filter on flag",
      "predecessorName": "[gen] find new and changed products in dim",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"flag != 'E'\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_apnd\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_ddim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN-cC]",
      "predecessorName": "filter on flag",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_prod_ddim = dict_all_dfs['df_prod_ddim'][\\\"df_object\\\"]\\ndf_prod_cdim = dict_all_dfs['df_prod_cdim'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_prod_ddim.columns\\nsdim_cols = df_prod_cdim.columns\\n \\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_prod_ddim = df_prod_ddim.withColumn(i,lit(None).cast('string'))\\n\\ndf_prod_ddim = df_prod_ddim.select(*sdim_cols)\\ncols = df_prod_ddim.columns\\n\\nfor j in cols:\\n  if dict(df_prod_ddim.dtypes)[j] != dict(df_prod_cdim.dtypes)[j]:\\n    df_prod_ddim = df_prod_ddim.withColumn(j, col(j).cast(dict(df_prod_cdim.dtypes)[j]))\\n\\ndict_all_dfs['df_prod_ddim'] = {\\\"df_object\\\" :df_prod_ddim}\\ndf_output_dict['df_prod_ddim'] = df_prod_ddim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_ddim\"\n    },\n    {\n      \"name\": \"df_prod_cdim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_ddim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[MErger]",
      "predecessorName": "[GEN-cC]",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_prod_cdim\",\n  \"distinct\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_ddim\"\n    },\n    {\n      \"name\": \"df_prod_cdim\"\n    }\n  ],\n  \"logicalKey\": [\n    \"prod_skid\"\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_prod_cdim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[PUB] data into product dim copy using merge",
      "predecessorName": "[MErger]",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"format\": \"parquet\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"useApiV2.5\": \"false\",\n  \"path\": \"<@@PATH1@@>/MM_PROD_CDIM/\",\n  \"mode\": \"dynamicoverwrite\",\n  \"compression\": \"None\",\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_prod_ddim\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL]  MM_MKT_SKID_LKP",
      "predecessorName": "[PUB] data into product dim copy using merge",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_MKT_SKID_LKP/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[FL]  MM_MKT_SKID_LKP adwgp_mm",
      "predecessorName": "[FL]  MM_MKT_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.functions import *\\n\\n\\n\\ndf_mkt_skid_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_MKT_SKID_LKP\\\")\\n\\ndf_output_dict['df_mkt_skid_lkp'] = df_mkt_skid_lkp\\ndict_all_dfs['df_mkt_skid_lkp'] = {\\\"df_object\\\" :df_mkt_skid_lkp}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "release /MM_MKT_SKID_LKP",
      "predecessorName": "[FL]  MM_MKT_SKID_LKP adwgp_mm",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_MKT_SKID_LKP/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] filter 1",
      "predecessorName": "release /MM_MKT_SKID_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"srce_sys_id = <<SRCE_SYS_ID>> and vendr_id = <<VENDOR_ID>> and cntry_id = '<<GEO_ID>>' and cntrt_id is null\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp_1\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[FIL] filter 2",
      "predecessorName": "[FIL] filter 1",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"srce_sys_id = <<SRCE_SYS_ID>> and cntry_id = '<<GEO_ID>>' and cntrt_id = <<CNTRT_ID>> and extrn_mkt_id is not null\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_skid_lkp_2\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[MJ] assign market skid for input markets",
      "predecessorName": "[FIL] filter 2",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_srce_mmkt\",\n      \"addAllColumns\": \"true\",\n      \"alias\": \"input\",\n      \"columns\": [\n        {\n          \"columnName\": \"lvl_num\",\n          \"columnAlias\": \"lvl_num\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mkt_skid_lkp_1\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"mkt\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_skid\",\n          \"columnAlias\": \"mkt_skid_1\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mkt_skid_lkp_2\",\n      \"addAllColumns\": \"false\",\n      \"alias\": \"mkt_cntrt\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_skid\",\n          \"columnAlias\": \"mkt_skid_2\"\n        }\n      ]\n    }\n  ],\n  \"joinOperations\": [\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"mkt\",\n      \"joinExpression\": \"input.extrn_mkt_id = mkt.extrn_mkt_id\"\n    },\n    {\n      \"joinType\": \"LEFT OUTER\",\n      \"joinDataframeAlias\": \"mkt_cntrt\",\n      \"joinExpression\": \"input.extrn_mkt_id = mkt_cntrt.extrn_mkt_id\"\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_as\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "MultipleJoiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] on result assign market",
      "predecessorName": "[MJ] assign market skid for input markets",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_as\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"nvl(mkt_skid_2,mkt_skid_1)\",\n      \"columnName\": \"mkt_skid\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_as\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] fact_01",
      "predecessorName": "[CET] on result assign market",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Fact Standardization\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[DVM] Reference Data Vendors Inputs",
      "predecessorName": "[NG] fact_01",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_ref_data_vendors_inputs_sff\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "[DVM] Reference Data Vendors",
      "predecessorName": "[DVM] Reference Data Vendors Inputs",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_ref_data_vendors_validation\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "[DVM] - FYI inputs",
      "predecessorName": "[DVM] Reference Data Vendors",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_fyi_inputs_sff\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "[DVM] - FYI Validations checks",
      "predecessorName": "[DVM] - FYI inputs",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_fyi_validation\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "[DVM] - Reference Data inputs",
      "predecessorName": "[DVM] - FYI Validations checks",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_ref_data_inputs_sff\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "[DVM] - Reference Data Valdiations",
      "predecessorName": "[DVM] - Reference Data inputs",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_ref_data\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "[NG] run_loading",
      "predecessorName": "[DVM] - Reference Data Valdiations",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Run Logs Loading\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] atomic measure calculation",
      "predecessorName": "[NG] run_loading",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF_Atomic Measure Calculation\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] fact skid",
      "predecessorName": "[NG] atomic measure calculation",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Fact Dimension Skid\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] FACT IMAGE CREATION",
      "predecessorName": "[NG] fact skid",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Fact Image Derivation\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] Materialize Fact Image",
      "predecessorName": "[NG] FACT IMAGE CREATION",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1 materialize fact image\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] measure log",
      "predecessorName": "[NG] Materialize Fact Image",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF_Measure_log_Loading\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] fact copy",
      "predecessorName": "[NG] measure log",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Fact Copy\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] fact_time",
      "predecessorName": "[NG] fact copy",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Fact Time calculations\"\n  },\n  \"active\": \"false\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] business data quality",
      "predecessorName": "[NG] fact_time",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF Business Data Quality\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "Business Validations inputs",
      "predecessorName": "[NG] business data quality",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_business_validations_inputs_sff\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "Business Validations",
      "operationDescription": "business",
      "predecessorName": "Business Validations inputs",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"t1_dq_business_validations\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": true
    },
    {
      "operationName": "DVM - Combined Calcuations",
      "predecessorName": "Business Validations",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_ref_data_vendors = dict_all_dfs['df_ref_data_vendors'][\\\"df_object\\\"]\\ndf_combine_ref_data_vendors = dict_all_dfs['df_combine_ref_data_vendors'][\\\"df_object\\\"]\\ndf_fyi = dict_all_dfs['df_fyi'][\\\"df_object\\\"]\\ndf_combine_fyi = dict_all_dfs['df_combine_fyi'][\\\"df_object\\\"]\\ndf_ref = dict_all_dfs['df_ref'][\\\"df_object\\\"]\\ndf_combine_ref = dict_all_dfs['df_combine_ref'][\\\"df_object\\\"]\\ndf_business_val = dict_all_dfs['df_business_val'][\\\"df_object\\\"]\\ndq_combine_bv = dict_all_dfs['dq_combine_bv'][\\\"df_object\\\"]\\n\\ndf_dvm_data = df_ref_data_vendors.unionByName(df_fyi, True).unionByName(df_ref, True).unionByName(df_business_val, True)\\ndf_dvm_combine = df_combine_ref_data_vendors.unionByName(df_combine_fyi, True).unionByName(df_combine_ref, True).unionByName(dq_combine_bv, True)\\n\\ndict_all_dfs['df_dvm_data'] = {\\\"df_object\\\" :df_dvm_data}\\ndf_output_dict['df_dvm_data'] = df_dvm_data\\n\\ndict_all_dfs['df_dvm_combine'] = {\\\"df_object\\\" :df_dvm_combine}\\ndf_output_dict['df_dvm_combine'] = df_dvm_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_ref_data_vendors\"\n    },\n    {\n      \"name\": \"df_combine_ref_data_vendors\"\n    },\n    {\n      \"name\": \"df_fyi\"\n    },\n    {\n      \"name\": \"df_combine_fyi\"\n    },\n    {\n      \"name\": \"df_ref\"\n    },\n    {\n      \"name\": \"df_combine_ref\"\n    },\n    {\n      \"name\": \"df_business_val\"\n    },\n    {\n      \"name\": \"dq_combine_bv\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dvm_data\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_dvm_combine\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": true
    },
    {
      "operationName": "DVM - Combined Calcuations - wo refdata",
      "predecessorName": "DVM - Combined Calcuations",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_file_struct_data = dict_all_dfs['df_file_struct_data'][\\\"df_object\\\"]\\ndf_combine_file_struct = dict_all_dfs['df_combine_file_struct'][\\\"df_object\\\"]\\ndf_ref_data_vendors = dict_all_dfs['df_ref_data_vendors'][\\\"df_object\\\"]\\ndf_combine_ref_data_vendors = dict_all_dfs['df_combine_ref_data_vendors'][\\\"df_object\\\"]\\ndf_fyi = dict_all_dfs['df_fyi'][\\\"df_object\\\"]\\ndf_combine_fyi = dict_all_dfs['df_combine_fyi'][\\\"df_object\\\"]\\n#df_ref = dict_all_dfs['df_ref'][\\\"df_object\\\"]\\n#df_combine_ref = dict_all_dfs['df_combine_ref'][\\\"df_object\\\"]\\ndf_business_val = dict_all_dfs['df_business_val'][\\\"df_object\\\"]\\ndq_combine_bv = dict_all_dfs['dq_combine_bv'][\\\"df_object\\\"]\\n\\ndf_dvm_data = df_file_struct_data.unionByName(df_ref_data_vendors,True).unionByName(df_fyi, True).unionByName(df_business_val, True)\\ndf_dvm_combine = df_combine_file_struct.unionByName(df_combine_ref_data_vendors,True).unionByName(df_combine_fyi, True).unionByName(dq_combine_bv, True)\\n\\ndict_all_dfs['df_dvm_data'] = {\\\"df_object\\\" :df_dvm_data}\\ndf_output_dict['df_dvm_data'] = df_dvm_data\\n\\ndict_all_dfs['df_dvm_combine'] = {\\\"df_object\\\" :df_dvm_combine}\\ndf_output_dict['df_dvm_combine'] = df_dvm_combine\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_ref_data_vendors\"\n    },\n    {\n      \"name\": \"df_combine_ref_data_vendors\"\n    },\n    {\n      \"name\": \"df_fyi\"\n    },\n    {\n      \"name\": \"df_combine_fyi\"\n    },\n    {\n      \"name\": \"df_business_val\"\n    },\n    {\n      \"name\": \"dq_combine_bv\"\n    },\n    {\n      \"name\": \"df_file_struct_data\"\n    },\n    {\n      \"name\": \"df_combine_file_struct\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dvm_data\",\n      \"cache\": \"materialize\"\n    },\n    {\n      \"name\": \"df_dvm_combine\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": true
    },
    {
      "operationName": "DVM - FP - Save Combined KPI",
      "predecessorName": "DVM - Combined Calcuations - wo refdata",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"semaphoreOption\": \"none\",\n  \"format\": \"csv\",\n  \"disableSuccessFile\": \"false\",\n  \"shouldDeleteSuccess\": \"false\",\n  \"path\": \"bf/unrefined/adw-reference-bf/KPI/<<PROCESS_RUN_KEY>>_data.csv\",\n  \"mode\": \"overwrite\",\n  \"compression\": \"None\",\n  \"coalesceByNumber\": 1,\n  \"repartitionByColumn\": [],\n  \"columnToDrop\": [],\n  \"partitionByColumn\": [],\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dvm_data\"\n    }\n  ]\n}",
      "operationVersionName": "FilePublisher",
      "overridableIndicator": true
    },
    {
      "operationName": "DVM - Combined  DQ Check Calc",
      "predecessorName": "DVM - FP - Save Combined KPI",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"documentation\": \"https://jira-pg-ds.atlassian.net/wiki/spaces/CDLBOK/pages/3676897284/Turbine+DQ+Operations\",\n  \"inputType\": \"Input using uploaded file\",\n  \"path\": \"bf/unrefined/adw-reference-bf/KPI/<<PROCESS_RUN_KEY>>_data.csv\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dvm_combine\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dvm_combine_chk\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "DataQualityValidation",
      "overridableIndicator": true
    },
    {
      "operationName": "DVM - Combined  DQ Check Report",
      "predecessorName": "DVM - Combined  DQ Check Calc",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"documentation\": \"https://jira-pg-ds.atlassian.net/wiki/spaces/CDLBOK/pages/3676897284/Turbine+DQ+Operations\",\n  \"saveToCSV\": \"true\",\n  \"generateHTMLReport\": \"true\",\n  \"generatePDFReport\": \"true\",\n  \"includeDetailedValidationResults\": \"failed rows only\",\n  \"numberOfRowsToDisplay\": 100,\n  \"reportTemplate\": \"default\"\n}",
      "operationVersionName": "DataQualityReport",
      "overridableIndicator": true
    },
    {
      "operationName": "Auto Approval Indicator - calc",
      "predecessorName": "DVM - Combined  DQ Check Report",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n \\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n \\ndq_combine_bv = dict_all_dfs['dq_combine_bv'][\\\"df_object\\\"]\\nbusiness_val_failed_cnt = dq_combine_bv.filter(\\\"DQ IS NOT NULL\\\" ).count()\\n \\nauto_val_ind = '<<DATA_AUTO_VAL_IND>>'\\nbuiness_dvm = '<<BUSINESS_DVM>>'\\n \\nif ( (auto_val_ind == 'N') & ('<<BUSINESS_DVM>>'== 'false')):\\n  auto_val_ind = 'Y'\\nelif ((auto_val_ind == 'Y') & (business_val_failed_cnt>0)):\\n  auto_val_ind = 'N'\\nelse:\\n  auto_val_ind = '<<DATA_AUTO_VAL_IND>>'\\n \\ncntrt_id = <<CNTRT_ID>>\\ndata = [(cntrt_id, auto_val_ind)]\\nsch = ['cntrt_id', 'auto_appr_ind']\\n \\ndf = spark.createDataFrame(data, sch)\\n \\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n \\n\\n \\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n \\nrun_id = <<PROCESS_RUN_KEY>>\\n \\n# Load MM_DLVRY_RUN_LKP\\ndlvry_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_DLVRY_RUN_LKP\\\")\\ndlvry_lkp = dlvry_lkp.filter(f'run_id = {run_id} and dlvry_phase_id in (12,13)')\\n \\nif (business_val_failed_cnt == 0):\\n  rows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 13, 1, 3, <<PROCESS_RUN_KEY>>]]\\nelse:\\n  rows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 12, 1, 4, <<PROCESS_RUN_KEY>>]]\\n\\n \\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\nif dlvry_lkp.count()==0:\\n  pass\\n  #jdbcDF2.write.format(\\\"parquet\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_DLVRY_RUN_LKP\\\")\\n \\n \\ndict_all_dfs['df_auto_appr'] = {\\\"df_object\\\" :df}\\ndf_output_dict['df_auto_appr'] = df\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    },\n    {\n      \"name\": \"dq_combine_bv\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_auto_appr\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": true
    },
    {
      "operationName": "test Filter",
      "predecessorName": "Auto Approval Indicator - calc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"true\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_auto_appr\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_auto_appr\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "acquire turbine_run_plc",
      "predecessorName": "test Filter",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"acquire\",\n  \"semaphoreOption\": \"exclusive\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>/turbine_run_plc/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Determine Stop Calc Indicator",
      "predecessorName": "acquire turbine_run_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import col, lit, when\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\ndf = spark.read.format('parquet').load('/mnt/<@@PATH1@@>/turbine_run_plc/')\\ncnt = df.filter('run_id = <<PROCESS_RUN_KEY>>').count()+1\\n\\nrows = [[ <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, cnt]]\\n\\n\\ncolumns = ['cntrt_id', 'run_id', 'count']\\ndf_run_count = spark_session.createDataFrame(rows, columns)\\n\\ndf_run_count.write.format('parquet').mode('append').save('/mnt/<@@PATH1@@>/turbine_run_plc/')\\n\\n# Determine Stop Calc Indicator\\n\\ndf_auto_appr = dict_all_dfs['df_auto_appr'][\\\"df_object\\\"]\\n\\ndf_auto_appr = df_auto_appr.join(df_run_count, ['cntrt_id'],'inner' )\\n\\ndf_auto_appr = df_auto_appr.withColumn('auto_appr_ind', when(col('auto_appr_ind')=='Y', lit('Y')).when(((col('auto_appr_ind')=='N') & (col('count')>1)), lit('Y')).otherwise(lit('N')))\\n\\ndict_all_dfs['df_auto_appr'] = {\\\"df_object\\\" :df_auto_appr}\\ndf_output_dict['df_auto_appr'] = df_auto_appr\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_auto_appr\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_auto_appr\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": true
    },
    {
      "operationName": "Release turbine_run_plc",
      "predecessorName": "Determine Stop Calc Indicator",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>/turbine_run_plc/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "Auto Approval - Stop Calculations",
      "predecessorName": "Release turbine_run_plc",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"auto_appr_ind = 'N'\",\n  \"processStatus\": \"DQ_ISSUE\",\n  \"conditionValue\": \"true\",\n  \"milestone\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_auto_appr\"\n    }\n  ]\n}",
      "operationVersionName": "ConditionalStop",
      "overridableIndicator": true
    },
    {
      "operationName": "Backup Fact",
      "predecessorName": "Auto Approval - Stop Calculations",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"cp_fact_backup_process\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] product publication",
      "predecessorName": "Backup Fact",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF_Atomic Product_Publication\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] Fact publications",
      "predecessorName": "[NG] product publication",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"T1_SFF_Atomic_Fact_Publication\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "Refresh Integrated Contract based on Extract Refresh",
      "predecessorName": "[NG] Fact publications",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"Refresh_t1_integrated_processing\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "Update Delivery Details - status id 3, phase id 7",
      "predecessorName": "Refresh Integrated Contract based on Extract Refresh",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\n\\n\\n\\nspark_session = SparkSession.builder.appName('Spark_Session').getOrCreate()\\n\\nrows = [['null', <<CNTRT_ID>>, <<PROCESS_RUN_KEY>>, 7, 1, 3, <<PROCESS_RUN_KEY>>]]\\n\\ncolumns = ['cmmnt_txt', 'cntrt_id', 'dlvry_id', 'dlvry_phase_id', 'dlvry_run_seq_num', 'dlvry_sttus_id', 'run_id']\\njdbcDF2 = spark_session.createDataFrame(rows, columns)\\njdbcDF2.write.format(\\\"parquet\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_DLVRY_RUN_LKP\\\")\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[GEN] - Fact data indicator update",
      "predecessorName": "Update Delivery Details - status id 3, phase id 7",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\nfrom IPython import get_ipython\\nfrom pyspark.sql.functions import lit, col, date_sub, current_date\\n\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport datetime;\\n\\ncntrt_id = <<CNTRT_ID>>\\nprocess_run_key = <<PROCESS_RUN_KEY>>\\nfact_avlb_ind = 'Y'\\nupdate_timestamp = datetime.datetime.now()\\nsch = ['process_run_key', 'cntrt_id', 'fact_avlb_ind', 'update_timestamp']\\ndata = [(process_run_key, cntrt_id, fact_avlb_ind, update_timestamp )]\\n\\ndf_new_fct = spark.createDataFrame(data, sch)\\n\\n# Check Fact indicator available\\n\\n\\ndf_fact_lkp = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_CNTRT_FACT_IND_LKP\\\")\\ndf_fact_lkp = df_fact_lkp.filter(f'cntrt_id = {cntrt_id} and fact_avlb_ind = 'Y' ')\\n\\npublish_fact_ind = (df_fact_lkp.count()==0)\\n###################\\n\\nif publish_fact_ind:\\n  df_new_fct.write.format(\\\"parquet\\\").partitionBy('cntrt_id').option(\\\"partitionOverwriteMode\\\", \\\"dynamic\\\").mode(\\\"append\\\").save(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-refined/MM_CNTRT_FACT_IND_LKP\\\")\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "Move to Archive",
      "predecessorName": "[GEN] - Fact data indicator update",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"DPF2CDL_WORK_TO_ARCH\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "load info for refined layer publish",
      "predecessorName": "Move to Archive",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.functions import *\\n\\n\\n\\ndf_cntrt_refined_publish = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_CNTRT_REFINED_LAYER_ASSOC\\\").filter('cntrt_id = <<CNTRT_ID>>')\\n\\ndf_output_dict['df_cntrt_refined_publish'] = df_cntrt_refined_publish\\ndict_all_dfs['df_cntrt_refined_publish'] = {\\\"df_object\\\" :df_cntrt_refined_publish}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_cntrt_refined_publish\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "break process or continue for refined layer publishing",
      "predecessorName": "load info for refined layer publish",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"publish_refined_layer = 'Y'\",\n  \"processStatus\": \"COMPLETED\",\n  \"conditionValue\": \"false\",\n  \"milestone\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_cntrt_refined_publish\"\n    }\n  ]\n}",
      "operationVersionName": "ConditionalStop",
      "overridableIndicator": false
    },
    {
      "operationName": "test control - filter",
      "predecessorName": "break process or continue for refined layer publishing",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"expression\": \"1=1\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_cntrt_refined_publish\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_cntrt_refined_publish_test_stop_control\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] Publish BIMTH facts to Refined Layer",
      "predecessorName": "test control - filter",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"DPF_Tier1_Refined_BIMTH_Facts SSID-3 v2\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] Publish MTH facts to Refined Layer",
      "predecessorName": "[NG] Publish BIMTH facts to Refined Layer",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"DPF_Tier1_Refined_MTH_Facts SSID-3 v2\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    },
    {
      "operationName": "[NG] Publish WK facts to Refined Layer",
      "predecessorName": "[NG] Publish MTH facts to Refined Layer",
      "jsonSpecification": "{\n  \"graph\": {\n    \"graphName\": \"DPF_Tier1_Refined_WK_Facts SSID-3 v2\"\n  },\n  \"active\": \"true\"\n}",
      "operationVersionName": "NestedGraph",
      "overridableIndicator": false
    }
  ],
  "graphName": "NNIT_TradePanel_DPF_Tier1_Atomic TP Main Chain SFF"
}