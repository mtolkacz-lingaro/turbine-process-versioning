{
  "applicationName": "TURBINE_INTERNAL",
  "jsonSpecification": "{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \"T1 Integrated TP Main Chain\",\r\n    \"description\": \"T1 Integrated TP Main Chain\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n\t\t\"FACT_TYPE_CODE\": {\r\n            \"title\": \"FACT_TYPE_CODE\",\r\n            \"description\": \"FACT_TYPE_CODE\",\r\n\t\t\t\"enum\": [\r\n                \"HHP\",\r\n                \"SF\",\r\n\t\t\t\t\"TP\"\r\n            ],\r\n            \"type\": \"string\"\r\n        },\r\n\t\t\"CATEGORY_ID\": {\r\n            \"title\": \"CATEGORY_ID\",\r\n            \"description\": \"CATEGORY_ID\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"SRCE_SYS_ID\": {\r\n            \"title\": \"SRCE_SYS_ID\",\r\n            \"description\": \"SRCE_SYS_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n        \"IGRTD_PUBLISH_FILE_PATTERN\": {\r\n            \"title\": \"IGRTD_PUBLISH_FILE_PATTERN\",\r\n            \"description\": \"File pattern to create a file from atomic contract that will trigger integrated layer publishing\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"CNTRT_ID\": {\r\n            \"title\": \"CNTRT_ID\",\r\n            \"description\": \"CNTRT_ID\",\r\n            \"type\": \"integer\"\r\n        },\r\n        \"RAW_FILE_PATH\": {\r\n            \"title\": \"RAW_FILE_PATH\",\r\n            \"description\": \"Raw File Path\",\r\n            \"default\": \"turbinev1/WORK/\",\r\n            \"type\": \"string\"\r\n        },\r\n         \"PUBLISH_PATH\": {\r\n            \"title\": \"PUBLISH_PATH\",\r\n            \"description\": \"Publishing Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf\",\r\n            \"type\": \"string\"\r\n        }, \r\n         \"IN_FILE_PATH\": {\r\n            \"title\": \"IN_FILE_PATH\",\r\n            \"description\": \"Input File Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf\",\r\n            \"type\": \"string\"\r\n        }, \r\n         \"MAPPINGS_PATH\": {\r\n            \"title\": \"MAPPINGS_PATH\",\r\n            \"description\": \"Mappings Path\",\r\n            \"default\": \"bf/unrefined/adw-t1-unrefined-bf/\",\r\n            \"type\": \"string\"\r\n        }\r\n   },\r\n    \"required\": [],\r\n    \"configurable\": [\"FACT_TYPE_CODE\",\"CATEGORY_ID\", \"SRCE_SYS_ID\", \"IGRTD_PUBLISH_FILE_PATTERN\", \"CNTRT_ID\"]\r\n}",
  "nodes": [
    {
      "operationName": "df_dummy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"manualSchema\": \"true\",\n  \"transformations\": [\n    {\n      \"columnType\": \"string\",\n      \"columnName\": \"test\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_dummy\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "CreateSchema",
      "overridableIndicator": false
    },
    {
      "operationName": "[File Load] MM_MKT_DIM",
      "predecessorName": "df_dummy",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"fileType\": \"parquet\",\n  \"inferSchema\": \"false\",\n  \"path\": \"<@@PATH1@@>MM_MKT_DIM_VW/\",\n  \"addInputFileName\": \"false\",\n  \"semaphoreOption\": \"shared\",\n  \"createIfNotExist\": \"false\",\n  \"mergeSchema\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "FileLoaderTabular",
      "overridableIndicator": false
    },
    {
      "operationName": "[sem] release mm_mkt_dim1",
      "predecessorName": "[File Load] MM_MKT_DIM",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"actionType\": \"release\",\n  \"itemType\": \"path\",\n  \"itemPath\": \"/mnt/<@@PATH1@@>MM_MKT_DIM_VW/\"\n}",
      "operationVersionName": "SemaphoreOperation",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] Loading MM_STRCT_LVL_LKP and MM_STRCT_LKP",
      "predecessorName": "[sem] release mm_mkt_dim1",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\n\\nref_db_url = dbutils.secrets.get('tp_dpf2cdl', 'refDBjdbcURL')\\nrefDBname = dbutils.secrets.get('tp_dpf2cdl', 'refDBname')\\nrefDBuser = dbutils.secrets.get('tp_dpf2cdl', 'refDBuser')\\nrefDBpwd = dbutils.secrets.get('tp_dpf2cdl', 'refDBpwd')\\n\\n\\ndf_mm_strct_lvl_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_strct_lvl_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").load()\\n\\ndf_mm_strct_lkp = spark.read.format(\\\"jdbc\\\").option(\\\"url\\\", f\\\"{ref_db_url}/{refDBname}\\\").option(\\\"dbtable\\\", \\\"adwgp_mm.mm_strct_lkp\\\").option(\\\"user\\\", f\\\"{refDBuser}\\\").option(\\\"password\\\", f\\\"{refDBpwd}\\\").load()\\n\\n\\ndf_output_dict['df_mm_strct_lvl_lkp'] = df_mm_strct_lvl_lkp\\ndf_output_dict['df_mm_strct_lkp'] = df_mm_strct_lkp\\n\\ndict_all_dfs['df_mm_strct_lvl_lkp'] = {\\\"df_object\\\" :df_mm_strct_lvl_lkp}\\ndict_all_dfs['df_mm_strct_lkp'] = {\\\"df_object\\\" :df_mm_strct_lkp}\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_dummy\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_strct_lkp\",\n      \"cache\": \"none\"\n    },\n    {\n      \"name\": \"df_mm_strct_lvl_lkp\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[Gen] Set Parent Mkt Skid for Processed Integrated Mkts",
      "predecessorName": "[Gen] Loading MM_STRCT_LVL_LKP and MM_STRCT_LKP",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport csv\\nimport pandas as pd\\nfrom pyspark.sql.functions import *\\n\\n\\ndf_mm_mkt_dim = dict_all_dfs['df_mm_mkt_dim'][\\\"df_object\\\"]\\ndf_mm_mkt_dim.createOrReplaceTempView(\\\"mm_mkt_dim\\\")\\nrefresh = \\\"REFRESH table mm_mkt_dim\\\"\\nspark.sql(refresh)\\nquery = \\\"select * from mm_mkt_dim\\\"\\nmkt_df = spark.sql(query)\\nmkt_df.createOrReplaceTempView(\\\"mm_mkt_dim\\\")\\n\\ndf_mm_strct_lvl_lkp = dict_all_dfs['df_mm_strct_lvl_lkp'][\\\"df_object\\\"]\\ndf_mm_strct_lvl_lkp.createOrReplaceTempView(\\\"mm_strct_lvl_lkp\\\")\\nrefresh1 = \\\"REFRESH table mm_strct_lvl_lkp\\\"\\nspark.sql(refresh1)\\nquery = \\\"select * from mm_strct_lvl_lkp\\\"\\nstrct_lvl_df = spark.sql(query)\\nstrct_lvl_df.createOrReplaceTempView(\\\"mm_strct_lvl_lkp\\\")\\n\\ndf_mm_strct_lkp = dict_all_dfs['df_mm_strct_lkp'][\\\"df_object\\\"]\\ndf_mm_strct_lkp.createOrReplaceTempView(\\\"mm_strct_lkp\\\")\\nrefresh2 = \\\"REFRESH table mm_strct_lkp\\\"\\nspark.sql(refresh2)\\nquery = \\\"select * from mm_strct_lkp\\\"\\nstrct_df = spark.sql(query)\\nstrct_df.createOrReplaceTempView(\\\"mm_strct_lkp\\\")\\n\\nctequery = \\\"\\\"\\\"WITH input AS (\\n                           SELECT  \\n                               mkt_skid,\\n                               run_id,\\n                               srce_sys_id,\\n                               cntrt_id,\\n                               mkt_name,\\n                               mkt_desc,\\n                               mkt_lvl_id,\\n                               mkt_lvl_name,\\n                               mkt_grp_id,\\n                               mkt_grp_name,\\n                               mkt_brkdw_type,\\n                               mkt_brkdw_name,\\n                               regn_id,\\n                               regn_name,\\n                               sub_regn_id,\\n                               sub_regn_name,\\n                               cntry_hub_id,\\n                               cntry_hub_name,\\n                               iso_cntry_code,\\n                               cntry_name,\\n                               iso_crncy_code,\\n                               root_mkt_ind,\\n                               mkt_store_ind,\\n                               custm_agg_ind,\\n                               key_acct_id,\\n                               key_acct_name,\\n                               cust_id,\\n                               cust_name,\\n                               retl_bannr_id,\\n                               retl_bannr_name,\\n                               geo_id,\\n                               geo_name,\\n                               indus_class_id,\\n                               indus_class_name,\\n                               div_whse_id,\\n                               div_whse_name,\\n                               trade_chanl_name\\n                             FROM \\n                               mm_mkt_dim\\n                             WHERE \\n                                   srce_sys_id = <<SRCE_SYS_ID>> and cntrt_id = 0 and mkt_lvl_id in (select strct_lvl_id from mm_strct_lvl_lkp lvl JOIN mm_strct_lkp strct ON strct.strct_id = lvl.strct_id AND strct_code = 'TP_H1')\\n                           ),\\n                           mkt_parnt as (\\n                           select  * from mm_mkt_dim\\n                           WHERE 1=1 AND srce_sys_id = <<SRCE_SYS_ID>> and cntrt_id = 0 and mkt_lvl_id in (select strct_lvl_id FROM mm_strct_lvl_lkp lvl JOIN mm_strct_lkp strct ON strct.strct_id = lvl.strct_id AND strct_code = 'TP_H1' and lvl_num=5)\\n                           )\\n                           SELECT \\n                             input.mkt_skid,input.run_id,input.srce_sys_id,input.cntrt_id,input.mkt_name,input.mkt_desc,input.mkt_lvl_id,input.mkt_lvl_name,input.mkt_grp_id,input.mkt_grp_name,input.mkt_brkdw_type,input.mkt_brkdw_name,input.regn_id,input.regn_name,input.sub_regn_id,input.sub_regn_name,input.cntry_hub_id,input.cntry_hub_name,input.iso_cntry_code,input.cntry_name,input.iso_crncy_code,input.root_mkt_ind,input.mkt_store_ind,input.custm_agg_ind,input.key_acct_id,input.key_acct_name,input.cust_id,input.cust_name,input.retl_bannr_id,input.retl_bannr_name,input.geo_id,input.geo_name,input.indus_class_id,input.indus_class_name,input.div_whse_id,input.div_whse_name,input.trade_chanl_name\\n                           , input.mkt_skid child_mkt_skid,input.mkt_lvl_id child_strct_lvl_id,mkt_parnt.mkt_skid parnt_mkt_skid,mkt_parnt.mkt_lvl_id parnt_strct_lvl_id,1 seq_num\\n                           from  input\\n                            left outer join mkt_parnt on input.iso_cntry_code = mkt_parnt.iso_cntry_code\\\"\\\"\\\"\\n\\ndf_mm_mkt_assoc_tran = spark.sql(ctequery)\\n\\ndict_all_dfs['df_mm_mkt_assoc_tran'] = {\\\"df_object\\\" :df_mm_mkt_assoc_tran}\\ndf_output_dict['df_mm_mkt_assoc_tran'] = df_mm_mkt_assoc_tran\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_dim\"\n    },\n    {\n      \"name\": \"df_mm_strct_lkp\"\n    },\n    {\n      \"name\": \"df_mm_strct_lvl_lkp\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_assoc_tran\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    }
  ],
  "graphName": "T1 Integrated TP Market Association Loading_v1"
}