{
  "applicationName": "TURBINE_INTERNAL",
  "nodes": [
    {
      "operationName": "[CET] PREPARE MKT DIM",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"AddAllSourceColumns\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"mkt_dsply_name\",\n      \"columnName\": \"mkt_name\"\n    },\n    {\n      \"transformation\": \"mkt_dsply_name\",\n      \"columnName\": \"mkt_desc\"\n    },\n    {\n      \"transformation\": \"cast('<<SRCE_SYS_ID>>' as decimal(38,10))\",\n      \"columnName\": \"srce_sys_id\"\n    },\n    {\n      \"transformation\": \"cast('0' as decimal(38,10))\",\n      \"columnName\": \"cntrt_id\"\n    },\n    {\n      \"transformation\": \"run_id\",\n      \"columnName\": \"run_id\"\n    },\n    {\n      \"transformation\": \"geo_id\",\n      \"columnName\": \"iso_cntry_code\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOINER] MAP MARKET SKIDS",
      "predecessorName": "[CET] PREPARE MKT DIM",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT OUTER\",\n  \"referenceDataframe\": \"df_mm_mkt_dim\",\n  \"joinExpression\": \"in.mkt_name = ref.mkt_name and in.srce_sys_id = ref.srce_sys_id and ref.srce_sys_id=<<SRCE_SYS_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_name\",\n          \"columnAlias\": \"mkt_name\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_mkt_dim\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_skid\",\n          \"columnAlias\": \"mkt_skid\"\n        },\n        {\n          \"columnName\": \"indus_class_id\",\n          \"columnAlias\": \"indus_class_id\"\n        },\n        {\n          \"columnName\": \"indus_class_name\",\n          \"columnAlias\": \"indus_class_name\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOINER] GET NEW MKTS -tmp",
      "predecessorName": "[JOINER] MAP MARKET SKIDS",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_mm_mkt_dim\",\n  \"joinExpression\": \"ref.mkt_name = in.mkt_name AND ref.srce_sys_id = in.srce_sys_id AND ref.srce_sys_id = <<SRCE_SYS_ID>>\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_name\",\n          \"columnAlias\": \"mkt_name\"\n        },\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id\"\n        },\n        {\n          \"columnName\": \"cntrt_id\",\n          \"columnAlias\": \"cntrt_id\"\n        },\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id\"\n        },\n        {\n          \"columnName\": \"iso_cntry_code\",\n          \"columnAlias\": \"iso_cntry_code\"\n        },\n        {\n          \"columnName\": \"mkt_skid\",\n          \"columnAlias\": \"mkt_skid\"\n        },\n        {\n          \"columnName\": \"indus_class_id\",\n          \"columnAlias\": \"indus_class_id\"\n        },\n        {\n          \"columnName\": \"indus_class_name\",\n          \"columnAlias\": \"indus_class_name\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_mkt_dim\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_desc\",\n          \"columnAlias\": \"mkt_desc\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "filter mkt_skid null - tmp",
      "predecessorName": "[JOINER] GET NEW MKTS -tmp",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"expression\": \"mkt_skid is null\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Filter",
      "overridableIndicator": false
    },
    {
      "operationName": "Read Object Type Key for Mkt SKID Service",
      "predecessorName": "filter mkt_skid null - tmp",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"customCode\": \"spark = self.spark_session\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\nimport csv\\nimport pandas as pd\\nfrom pyspark.sql.functions import *\\nfrom pyspark.sql.types import IntegerType\\n\\ndf_mkt_dim = dict_all_dfs['df_mkt_dim'][\\\"df_object\\\"]\\n\\nsrce_sys_id = [<<SRCE_SYS_ID>>]\\nsrce_sys_id1 = <<SRCE_SYS_ID>>\\nISO_CNTRY_CODE = '<<ISO_CNTRY_CODE>>'\\nkey_panel_mkt = f'\\\"TP_{(srce_sys_id1)}_MKT\\\"'\\nkey_panel_mkt1 = f'\\\"TP_EU_{(ISO_CNTRY_CODE)}\\\"'\\n\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\nimport pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.types import *\\nfrom pyspark.sql.functions import *\\n\\n\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\n\\ndf = spark.read.format(\\\"parquet\\\").load(\\\"/mnt/refined/NNIT/tradepanel/prod-tp-lightrefined/MM_KEY_DOMAIN_DATA_PROVIDER\\\")\\n\\nfor i in srce_sys_id:\\n  if i != 3:\\n    df_mkt_skid = df.select(\\\"dimension_type_key\\\",\\\"data_provider_key\\\",\\\"object_type_key\\\",\\\"key_domain_data_provider_code\\\").filter(\\\"dimension_type_key == 5 and data_provider_key == 7 and key_domain_data_provider_code like 'TP_%_MKT'\\\")    \\n    df_mkt_skid.createOrReplaceTempView(\\\"mkt_skid\\\")    \\n    df_mkt_skid = spark.sql(f'''select * from mkt_skid where key_domain_data_provider_code = ({key_panel_mkt})\\n                         ''')\\n\\n  else:\\n    df_mkt_skid = df.select(\\\"dimension_type_key\\\",\\\"data_provider_key\\\",\\\"object_type_key\\\",\\\"key_domain_data_provider_code\\\").filter(\\\"dimension_type_key == 5 and data_provider_key == 7 and key_domain_data_provider_code like 'TP_EU_%'\\\")    \\n    df_mkt_skid.createOrReplaceTempView(\\\"mkt_skid\\\")    \\n    df_mkt_skid = spark.sql(f'''select * from mkt_skid where key_domain_data_provider_code = ({key_panel_mkt1})\\n                         ''')\\n\\t\\t\\t\\t\\t\\t \\ndf_mkt_skid = df_mkt_skid.select(\\\"object_type_key\\\").withColumn(\\\"srce_sys_id1\\\", lit(srce_sys_id1).cast(IntegerType()))\\n    \\ndf_mkt_dim = df_mkt_dim.join(df_mkt_skid, df_mkt_dim.srce_sys_id == df_mkt_skid.srce_sys_id1, \\\"Inner\\\").drop(\\\"srce_sys_id1\\\")\\n\\ndict_all_dfs['df_mkt_dim'] = {\\\"df_object\\\" :df_mkt_dim}\\ndf_output_dict['df_mkt_dim'] = df_mkt_dim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[SKL] MAP NEW MARKET SKIDS",
      "predecessorName": "Read Object Type Key for Mkt SKID Service",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"skidVersion\": \"V1\",\n  \"uniqueness\": \"false\",\n  \"overrideSkidCache\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"outputColumnName\": \"mkt_skid\",\n  \"orphanIndicatorColumnName\": \"\",\n  \"dataProviderKey\": 7,\n  \"dimensionTypeKey\": 5,\n  \"maxBatchSize\": 50000,\n  \"maxWorkers\": 4,\n  \"azureRetryLimit\": 9,\n  \"objectTypeKeyDynamic\": \"true\",\n  \"objectTypeKey\": \"object_type_key\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"materialize\"\n    }\n  ],\n  \"inputColumnsNames\": [\n    \"mkt_name\"\n  ]\n}",
      "operationVersionName": "SurrogateKeyLookup",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOINER] GET NEW MKTS",
      "predecessorName": "[SKL] MAP NEW MARKET SKIDS",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_mm_mkt_dim\",\n  \"joinExpression\": \"ref.mkt_name = in.mkt_name AND ref.srce_sys_id = in.srce_sys_id AND ref.srce_sys_id = 4\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"addAllColumns\": \"true\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_name\",\n          \"columnAlias\": \"mkt_name\"\n        },\n        {\n          \"columnName\": \"srce_sys_id\",\n          \"columnAlias\": \"srce_sys_id\"\n        },\n        {\n          \"columnName\": \"cntrt_id\",\n          \"columnAlias\": \"cntrt_id\"\n        },\n        {\n          \"columnName\": \"run_id\",\n          \"columnAlias\": \"run_id\"\n        },\n        {\n          \"columnName\": \"iso_cntry_code\",\n          \"columnAlias\": \"iso_cntry_code\"\n        },\n        {\n          \"columnName\": \"mkt_skid\",\n          \"columnAlias\": \"mkt_skid\"\n        },\n        {\n          \"columnName\": \"indus_class_id\",\n          \"columnAlias\": \"indus_class_id\"\n        },\n        {\n          \"columnName\": \"indus_class_name\",\n          \"columnAlias\": \"indus_class_name\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_mkt_dim\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"mkt_desc\",\n          \"columnAlias\": \"mkt_desc\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"none\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[CC] MKT_DIM",
      "predecessorName": "[JOINER] GET NEW MKTS",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"referenceDataframe\": \"df_mm_mkt_dim\",\n  \"deleteColumns\": \"true\",\n  \"referenceColumnOrder\": \"true\",\n  \"milestone\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnComplementer",
      "overridableIndicator": false
    },
    {
      "operationName": "[MERGER] NEW MKTS WITH EXISITNG MKTS",
      "predecessorName": "[CC] MKT_DIM",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"referenceDataframe\": \"df_mm_mkt_dim\",\n  \"distinct\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    }\n  ],\n  \"logicalKey\": [],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\",\n      \"cache\": \"materialize\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    },
    {
      "operationName": "[CC] - Complement and typecast MKT columns",
      "predecessorName": "[MERGER] NEW MKTS WITH EXISITNG MKTS",
      "jsonSpecification": "{\n  \"active\": \"true\",\n  \"separateSparkSession\": \"true\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"true\",\n  \"customCode\": \"spark = self.spark_session\\nmyLogger = self.log\\n\\nfrom IPython import get_ipython\\ndbutils = get_ipython().user_ns[\\\"dbutils\\\"]\\n\\ndf_mkt_dim = dict_all_dfs['df_mkt_dim'][\\\"df_object\\\"]\\ndf_fct_schema = dict_all_dfs['df_mm_mkt_dim'][\\\"df_object\\\"]\\n\\nfrom pyspark.sql.functions import col\\n\\nlkp_cols = df_mkt_dim.columns\\nsdim_cols = df_fct_schema.columns\\n\\nfrom pyspark.sql.functions import lit\\nadd_cols = list(set(sdim_cols)-set(lkp_cols))\\nfor i in add_cols:\\n  df_mkt_dim = df_mkt_dim.withColumn(i,lit(None).cast('string'))\\n\\ndf_mkt_dim = df_mkt_dim.select(*sdim_cols)\\ncols = df_mkt_dim.columns\\n\\nfor j in cols:\\n  df_mkt_dim = df_mkt_dim.withColumn(j, col(j).cast(dict(df_fct_schema.dtypes)[j]))\\n\\ndict_all_dfs['df_mm_mkt_dim'] = {\\\"df_object\\\" :df_mkt_dim}\\ndf_output_dict['df_mm_mkt_dim'] = df_mkt_dim\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_mkt_dim\"\n    },\n    {\n      \"name\": \"df_mm_mkt_dim\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_mkt_dim\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Generic",
      "overridableIndicator": false
    },
    {
      "operationName": "[DISTINCT] GET TIME PERIODS",
      "predecessorName": "[CC] - Complement and typecast MKT columns",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_perd\"\n    }\n  ],\n  \"columns\": [\n    {\n      \"name\": \"time_perd_id\"\n    },\n    {\n      \"name\": \"perd_short_desc\"\n    },\n    {\n      \"name\": \"cntrt_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Distinct",
      "overridableIndicator": false
    },
    {
      "operationName": "[CET] PREPARE TIME PERIODS",
      "predecessorName": "[DISTINCT] GET TIME PERIODS",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"AddAllSourceColumns\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_perd\"\n    }\n  ],\n  \"transformations\": [\n    {\n      \"transformation\": \"perd_short_desc\",\n      \"columnName\": \"extrn_time_perd_id\"\n    },\n    {\n      \"transformation\": \"time_perd_id\",\n      \"columnName\": \"time_perd_id\"\n    },\n    {\n      \"transformation\": \"cntrt_id\",\n      \"columnName\": \"cntrt_id\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "ColumnExpressionTransformation",
      "overridableIndicator": false
    },
    {
      "operationName": "[JOIN] GET NEW TIME PERDS",
      "predecessorName": "[CET] PREPARE TIME PERIODS",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"joinType\": \"LEFT ANTI\",\n  \"referenceDataframe\": \"df_mm_time_perd_xref\",\n  \"joinExpression\": \"ref.extrn_time_perd_id = in.extrn_time_perd_id AND ref.cntrt_id = in.cntrt_id\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_perd\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"cntrt_id\"\n        },\n        {\n          \"columnName\": \"extrn_time_perd_id\"\n        },\n        {\n          \"columnName\": \"time_perd_id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"df_mm_time_perd_xref\",\n      \"addAllColumns\": \"false\",\n      \"columns\": [\n        {\n          \"columnName\": \"extrn_time_perd_id\"\n        },\n        {\n          \"columnName\": \"cntrt_id\"\n        }\n      ]\n    }\n  ],\n  \"alterQuery\": [\n    {\n      \"hintType\": \"broadcastjoin\",\n      \"broadcastDataframe\": \"ref\"\n    }\n  ],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_time_perd\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Joiner",
      "overridableIndicator": false
    },
    {
      "operationName": "[MERGE] NEW TIME PERIODS",
      "predecessorName": "[JOIN] GET NEW TIME PERDS",
      "jsonSpecification": "{\n  \"active\": \"false\",\n  \"referenceDataframe\": \"df_mm_time_perd_xref\",\n  \"distinct\": \"false\",\n  \"milestone\": \"false\",\n  \"saveOutputDfsToTempTable\": \"false\",\n  \"inputDataframes\": [\n    {\n      \"name\": \"df_time_perd\"\n    },\n    {\n      \"name\": \"df_mm_time_perd_xref\"\n    }\n  ],\n  \"logicalKey\": [],\n  \"outputDataframes\": [\n    {\n      \"name\": \"df_mm_time_perd_xref\",\n      \"cache\": \"none\"\n    }\n  ]\n}",
      "operationVersionName": "Merger",
      "overridableIndicator": false
    }
  ],
  "graphName": "NNIT_CDL_TP_USA Nielsen Fact-Load Dimensions"
}